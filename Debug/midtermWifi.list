
midtermWifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e330  0800e330  00020534  2**0
                  CONTENTS
  4 .ARM          00000008  0800e330  0800e330  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e338  0800e338  00020534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e338  0800e338  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e33c  0800e33c  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000534  20000000  0800e340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f90  20000534  0800e874  00020534  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054c4  0800e874  000254c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020534  2**0
                  CONTENTS, READONLY
 12 .debug_info   000293b0  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000401d  00000000  00000000  00049914  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed8  00000000  00000000  0004d938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d00  00000000  00000000  0004f810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002be37  00000000  00000000  00051510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000181da  00000000  00000000  0007d347  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001025a2  00000000  00000000  00095521  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090f4  00000000  00000000  00197b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000534 	.word	0x20000534
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d428 	.word	0x0800d428

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000538 	.word	0x20000538
 80001cc:	0800d428 	.word	0x0800d428

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b2f      	cmp	r3, #47	; 0x2f
 8000d6a:	d906      	bls.n	8000d7a <Hex2Num+0x1e>
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b39      	cmp	r3, #57	; 0x39
 8000d70:	d803      	bhi.n	8000d7a <Hex2Num+0x1e>
        return a - '0';
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	3b30      	subs	r3, #48	; 0x30
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	e014      	b.n	8000da4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b60      	cmp	r3, #96	; 0x60
 8000d7e:	d906      	bls.n	8000d8e <Hex2Num+0x32>
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b66      	cmp	r3, #102	; 0x66
 8000d84:	d803      	bhi.n	8000d8e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	3b57      	subs	r3, #87	; 0x57
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	e00a      	b.n	8000da4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b40      	cmp	r3, #64	; 0x40
 8000d92:	d906      	bls.n	8000da2 <Hex2Num+0x46>
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b46      	cmp	r3, #70	; 0x46
 8000d98:	d803      	bhi.n	8000da2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3b37      	subs	r3, #55	; 0x37
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	e000      	b.n	8000da4 <Hex2Num+0x48>
    }

    return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000dc2:	e012      	b.n	8000dea <ParseHexNumber+0x3a>
        sum <<= 4;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffc4 	bl	8000d5c <Hex2Num>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
        i++;
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	3301      	adds	r3, #1
 8000de8:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b2f      	cmp	r3, #47	; 0x2f
 8000df0:	d903      	bls.n	8000dfa <ParseHexNumber+0x4a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b39      	cmp	r3, #57	; 0x39
 8000df8:	d9e4      	bls.n	8000dc4 <ParseHexNumber+0x14>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b60      	cmp	r3, #96	; 0x60
 8000e00:	d903      	bls.n	8000e0a <ParseHexNumber+0x5a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b66      	cmp	r3, #102	; 0x66
 8000e08:	d9dc      	bls.n	8000dc4 <ParseHexNumber+0x14>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b40      	cmp	r3, #64	; 0x40
 8000e10:	d903      	bls.n	8000e1a <ParseHexNumber+0x6a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b46      	cmp	r3, #70	; 0x46
 8000e18:	d9d4      	bls.n	8000dc4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <ParseHexNumber+0x76>
        *cnt = i;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	7afa      	ldrb	r2, [r7, #11]
 8000e24:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b2d      	cmp	r3, #45	; 0x2d
 8000e4c:	d119      	bne.n	8000e82 <ParseNumber+0x52>
        minus = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
        i++;
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000e5e:	e010      	b.n	8000e82 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3b30      	subs	r3, #48	; 0x30
 8000e72:	4413      	add	r3, r2
 8000e74:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
        i++;
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b2f      	cmp	r3, #47	; 0x2f
 8000e88:	d903      	bls.n	8000e92 <ParseNumber+0x62>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b39      	cmp	r3, #57	; 0x39
 8000e90:	d9e6      	bls.n	8000e60 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <ParseNumber+0x6e>
        *cnt = i;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	7bba      	ldrb	r2, [r7, #14]
 8000e9c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <ParseNumber+0x7a>
        return 0 - sum;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	e000      	b.n	8000eac <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000eaa:	68bb      	ldr	r3, [r7, #8]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000ec6:	e019      	b.n	8000efc <ParseMAC+0x44>
    hexcnt = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b3a      	cmp	r3, #58	; 0x3a
 8000ed2:	d00e      	beq.n	8000ef2 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000ed4:	f107 030e 	add.w	r3, r7, #14
 8000ed8:	4619      	mov	r1, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff68 	bl	8000db0 <ParseHexNumber>
 8000ee0:	4601      	mov	r1, r0
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	73fa      	strb	r2, [r7, #15]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e1      	bne.n	8000ec8 <ParseMAC+0x10>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000f1a:	e019      	b.n	8000f50 <ParseIP+0x44>
    hexcnt = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b2e      	cmp	r3, #46	; 0x2e
 8000f26:	d00e      	beq.n	8000f46 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000f28:	f107 030e 	add.w	r3, r7, #14
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff7e 	bl	8000e30 <ParseNumber>
 8000f34:	4601      	mov	r1, r0
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	73fa      	strb	r2, [r7, #15]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e1      	bne.n	8000f1c <ParseIP+0x10>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3302      	adds	r3, #2
 8000f72:	4934      	ldr	r1, [pc, #208]	; (8001044 <AT_ParseInfo+0xe4>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00b f8e1 	bl	800c13c <strtok>
 8000f7a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000f7c:	e05a      	b.n	8001034 <AT_ParseInfo+0xd4>
    switch (num++) {
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	72fa      	strb	r2, [r7, #11]
 8000f84:	2b06      	cmp	r3, #6
 8000f86:	d84f      	bhi.n	8001028 <AT_ParseInfo+0xc8>
 8000f88:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <AT_ParseInfo+0x30>)
 8000f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8e:	bf00      	nop
 8000f90:	08000fad 	.word	0x08000fad
 8000f94:	08000fbb 	.word	0x08000fbb
 8000f98:	08000fcb 	.word	0x08000fcb
 8000f9c:	08000fdb 	.word	0x08000fdb
 8000fa0:	08000feb 	.word	0x08000feb
 8000fa4:	08000ffb 	.word	0x08000ffb
 8000fa8:	0800100f 	.word	0x0800100f
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00b f893 	bl	800c0de <strncpy>
      break;
 8000fb8:	e037      	b.n	800102a <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	2218      	movs	r2, #24
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00b f88b 	bl	800c0de <strncpy>
      break;
 8000fc8:	e02f      	b.n	800102a <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3338      	adds	r3, #56	; 0x38
 8000fce:	2210      	movs	r2, #16
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00b f883 	bl	800c0de <strncpy>
      break;
 8000fd8:	e027      	b.n	800102a <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	2210      	movs	r2, #16
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b f87b 	bl	800c0de <strncpy>
      break;
 8000fe8:	e01f      	b.n	800102a <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3358      	adds	r3, #88	; 0x58
 8000fee:	2210      	movs	r2, #16
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00b f873 	bl	800c0de <strncpy>
      break;
 8000ff8:	e017      	b.n	800102a <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff ff17 	bl	8000e30 <ParseNumber>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800100c:	e00d      	b.n	800102a <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <AT_ParseInfo+0xe8>)
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f00b f893 	bl	800c13c <strtok>
 8001016:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3368      	adds	r3, #104	; 0x68
 800101c:	2220      	movs	r2, #32
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b f85c 	bl	800c0de <strncpy>
      break;
 8001026:	e000      	b.n	800102a <AT_ParseInfo+0xca>

    default: break;
 8001028:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800102a:	4906      	ldr	r1, [pc, #24]	; (8001044 <AT_ParseInfo+0xe4>)
 800102c:	2000      	movs	r0, #0
 800102e:	f00b f885 	bl	800c13c <strtok>
 8001032:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1a1      	bne.n	8000f7e <AT_ParseInfo+0x1e>
  }
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	0800d470 	.word	0x0800d470
 8001048:	0800d474 	.word	0x0800d474

0800104c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3302      	adds	r3, #2
 800105e:	4952      	ldr	r1, [pc, #328]	; (80011a8 <AT_ParseConnSettings+0x15c>)
 8001060:	4618      	mov	r0, r3
 8001062:	f00b f86b 	bl	800c13c <strtok>
 8001066:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001068:	e095      	b.n	8001196 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	73fa      	strb	r2, [r7, #15]
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d87f      	bhi.n	8001174 <AT_ParseConnSettings+0x128>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <AT_ParseConnSettings+0x30>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	080010ad 	.word	0x080010ad
 8001080:	080010bb 	.word	0x080010bb
 8001084:	080010cb 	.word	0x080010cb
 8001088:	080010df 	.word	0x080010df
 800108c:	080010f3 	.word	0x080010f3
 8001090:	08001107 	.word	0x08001107
 8001094:	08001115 	.word	0x08001115
 8001098:	08001123 	.word	0x08001123
 800109c:	08001131 	.word	0x08001131
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	0800114d 	.word	0x0800114d
 80010a8:	08001161 	.word	0x08001161
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2221      	movs	r2, #33	; 0x21
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00b f813 	bl	800c0de <strncpy>
      break;
 80010b8:	e05d      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3321      	adds	r3, #33	; 0x21
 80010be:	2221      	movs	r2, #33	; 0x21
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b f80b 	bl	800c0de <strncpy>
      break;
 80010c8:	e055      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80010ca:	2100      	movs	r1, #0
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f7ff feaf 	bl	8000e30 <ParseNumber>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80010dc:	e04b      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80010de:	2100      	movs	r1, #0
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff fea5 	bl	8000e30 <ParseNumber>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80010f0:	e041      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80010f2:	2100      	movs	r1, #0
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f7ff fe9b 	bl	8000e30 <ParseNumber>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001104:	e037      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3348      	adds	r3, #72	; 0x48
 800110a:	4619      	mov	r1, r3
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f7ff fefd 	bl	8000f0c <ParseIP>
      break;
 8001112:	e030      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	334c      	adds	r3, #76	; 0x4c
 8001118:	4619      	mov	r1, r3
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f7ff fef6 	bl	8000f0c <ParseIP>
      break;
 8001120:	e029      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3350      	adds	r3, #80	; 0x50
 8001126:	4619      	mov	r1, r3
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f7ff feef 	bl	8000f0c <ParseIP>
      break;
 800112e:	e022      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3354      	adds	r3, #84	; 0x54
 8001134:	4619      	mov	r1, r3
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f7ff fee8 	bl	8000f0c <ParseIP>
      break;
 800113c:	e01b      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3358      	adds	r3, #88	; 0x58
 8001142:	4619      	mov	r1, r3
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f7ff fee1 	bl	8000f0c <ParseIP>
      break;
 800114a:	e014      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800114c:	2100      	movs	r1, #0
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f7ff fe6e 	bl	8000e30 <ParseNumber>
 8001154:	4603      	mov	r3, r0
 8001156:	b2da      	uxtb	r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800115e:	e00a      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001160:	2100      	movs	r1, #0
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f7ff fe64 	bl	8000e30 <ParseNumber>
 8001168:	4603      	mov	r3, r0
 800116a:	b2da      	uxtb	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001172:	e000      	b.n	8001176 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001174:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <AT_ParseConnSettings+0x15c>)
 8001178:	2000      	movs	r0, #0
 800117a:	f00a ffdf 	bl	800c13c <strtok>
 800117e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <AT_ParseConnSettings+0x14a>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b2c      	cmp	r3, #44	; 0x2c
 800118e:	d102      	bne.n	8001196 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f af66 	bne.w	800106a <AT_ParseConnSettings+0x1e>
    }
  }
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	0800d470 	.word	0x0800d470

080011ac <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3302      	adds	r3, #2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b31      	cmp	r3, #49	; 0x31
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	701a      	strb	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7fe ffec 	bl	80001d0 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b299      	uxth	r1, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001202:	461a      	mov	r2, r3
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	47a0      	blx	r4
 8001208:	4603      	mov	r3, r0
 800120a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	dd3e      	ble.n	8001290 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800121e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
 8001226:	4603      	mov	r3, r0
 8001228:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800122a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd27      	ble.n	8001282 <AT_ExecuteCommand+0xaa>
 8001232:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001236:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800123a:	dc22      	bgt.n	8001282 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001244:	d105      	bne.n	8001252 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001246:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001252:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800125e:	490f      	ldr	r1, [pc, #60]	; (800129c <AT_ExecuteCommand+0xc4>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f00a ff51 	bl	800c108 <strstr>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e010      	b.n	8001292 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001270:	490b      	ldr	r1, [pc, #44]	; (80012a0 <AT_ExecuteCommand+0xc8>)
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f00a ff48 	bl	800c108 <strstr>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800127e:	2305      	movs	r3, #5
 8001280:	e007      	b.n	8001292 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001282:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001286:	f113 0f04 	cmn.w	r3, #4
 800128a:	d101      	bne.n	8001290 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800128c:	2306      	movs	r3, #6
 800128e:	e000      	b.n	8001292 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001290:	2304      	movs	r3, #4
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	0800d484 	.word	0x0800d484
 80012a0:	0800d490 	.word	0x0800d490

080012a4 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7fe ff86 	bl	80001d0 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <AT_RequestSendData+0x32>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e053      	b.n	800137e <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80012e2:	8a79      	ldrh	r1, [r7, #18]
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	4798      	blx	r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80012ec:	8a3a      	ldrh	r2, [r7, #16]
 80012ee:	8a7b      	ldrh	r3, [r7, #18]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d143      	bne.n	800137c <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001300:	8879      	ldrh	r1, [r7, #2]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
 8001306:	4603      	mov	r3, r0
 8001308:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800130a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	429a      	cmp	r2, r3
 8001312:	d131      	bne.n	8001378 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001320:	2100      	movs	r1, #0
 8001322:	6a38      	ldr	r0, [r7, #32]
 8001324:	4798      	blx	r3
 8001326:	4603      	mov	r3, r0
 8001328:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800132a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	dd19      	ble.n	8001366 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001332:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001336:	6a3a      	ldr	r2, [r7, #32]
 8001338:	4413      	add	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800133e:	4912      	ldr	r1, [pc, #72]	; (8001388 <AT_RequestSendData+0xe4>)
 8001340:	6a38      	ldr	r0, [r7, #32]
 8001342:	f00a fee1 	bl	800c108 <strstr>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	e016      	b.n	800137e <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <AT_RequestSendData+0xe8>)
 8001352:	6a38      	ldr	r0, [r7, #32]
 8001354:	f00a fed8 	bl	800c108 <strstr>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800135e:	2305      	movs	r3, #5
 8001360:	e00d      	b.n	800137e <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001362:	2302      	movs	r3, #2
 8001364:	e00b      	b.n	800137e <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800136a:	f113 0f04 	cmn.w	r3, #4
 800136e:	d101      	bne.n	8001374 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001370:	2306      	movs	r3, #6
 8001372:	e004      	b.n	800137e <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001378:	2302      	movs	r3, #2
 800137a:	e000      	b.n	800137e <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800137c:	2304      	movs	r3, #4
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800d484 	.word	0x0800d484
 800138c:	0800d490 	.word	0x0800d490

08001390 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a4:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f7fe ff0f 	bl	80001d0 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b299      	uxth	r1, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80013bc:	461a      	mov	r2, r3
 80013be:	68b8      	ldr	r0, [r7, #8]
 80013c0:	47a0      	blx	r4
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dd6f      	ble.n	80014a8 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80013d4:	2100      	movs	r1, #0
 80013d6:	6938      	ldr	r0, [r7, #16]
 80013d8:	4798      	blx	r3
 80013da:	4603      	mov	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b0d      	cmp	r3, #13
 80013e4:	d104      	bne.n	80013f0 <AT_RequestReceiveData+0x60>
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3301      	adds	r3, #1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d001      	beq.n	80013f4 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80013f0:	2304      	movs	r3, #4
 80013f2:	e05a      	b.n	80014aa <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3b02      	subs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    p+=2;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	3302      	adds	r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b07      	cmp	r3, #7
 8001404:	d94a      	bls.n	800149c <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001406:	e002      	b.n	800140e <AT_RequestReceiveData+0x7e>
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3b01      	subs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <AT_RequestReceiveData+0x92>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3b01      	subs	r3, #1
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b15      	cmp	r3, #21
 8001420:	d0f2      	beq.n	8001408 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4413      	add	r3, r2
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3b08      	subs	r3, #8
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4413      	add	r3, r2
 8001434:	491f      	ldr	r1, [pc, #124]	; (80014b4 <AT_RequestReceiveData+0x124>)
 8001436:	4618      	mov	r0, r3
 8001438:	f00a fe66 	bl	800c108 <strstr>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b08      	subs	r3, #8
 8001448:	b29a      	uxth	r2, r3
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	429a      	cmp	r2, r3
 8001456:	d202      	bcs.n	800145e <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f00a fd69 	bl	800bf3e <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e01c      	b.n	80014aa <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3b04      	subs	r3, #4
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4413      	add	r3, r2
 8001478:	2204      	movs	r2, #4
 800147a:	490f      	ldr	r1, [pc, #60]	; (80014b8 <AT_RequestReceiveData+0x128>)
 800147c:	4618      	mov	r0, r3
 800147e:	f00a fd4f 	bl	800bf20 <memcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d104      	bne.n	8001492 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8001488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148a:	2200      	movs	r2, #0
 800148c:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800148e:	2305      	movs	r3, #5
 8001490:	e00b      	b.n	80014aa <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001498:	2305      	movs	r3, #5
 800149a:	e006      	b.n	80014aa <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f113 0f04 	cmn.w	r3, #4
 80014a2:	d101      	bne.n	80014a8 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80014a4:	2306      	movs	r3, #6
 80014a6:	e000      	b.n	80014aa <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80014a8:	2304      	movs	r3, #4
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800d484 	.word	0x0800d484
 80014b8:	0800d498 	.word	0x0800d498

080014bc <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80014c4:	2302      	movs	r3, #2
 80014c6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f247 5230 	movw	r2, #30000	; 0x7530
 80014ce:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80014d8:	2000      	movs	r0, #0
 80014da:	4798      	blx	r3
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d113      	bne.n	800150a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e8:	461a      	mov	r2, r3
 80014ea:	490a      	ldr	r1, [pc, #40]	; (8001514 <ES_WIFI_Init+0x58>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fe73 	bl	80011d8 <AT_ExecuteCommand>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d106      	bne.n	800150a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fd2b 	bl	8000f60 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	0800d4a0 	.word	0x0800d4a0

08001518 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <ES_WIFI_RegisterBusIO+0x2c>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <ES_WIFI_RegisterBusIO+0x2c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <ES_WIFI_RegisterBusIO+0x2c>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <ES_WIFI_RegisterBusIO+0x2c>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001544:	2302      	movs	r3, #2
 8001546:	e014      	b.n	8001572 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4931      	ldr	r1, [pc, #196]	; (800165c <ES_WIFI_Connect+0xdc>)
 8001598:	4618      	mov	r0, r3
 800159a:	f00a fd5f 	bl	800c05c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015aa:	461a      	mov	r2, r3
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fe13 	bl	80011d8 <AT_ExecuteCommand>
 80015b2:	4603      	mov	r3, r0
 80015b4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d14a      	bne.n	8001652 <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4926      	ldr	r1, [pc, #152]	; (8001660 <ES_WIFI_Connect+0xe0>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00a fd48 	bl	800c05c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015d8:	461a      	mov	r2, r3
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fdfc 	bl	80011d8 <AT_ExecuteCommand>
 80015e0:	4603      	mov	r3, r0
 80015e2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d133      	bne.n	8001652 <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	491a      	ldr	r1, [pc, #104]	; (8001664 <ES_WIFI_Connect+0xe4>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fd2d 	bl	800c05c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800160e:	461a      	mov	r2, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fde1 	bl	80011d8 <AT_ExecuteCommand>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d118      	bne.n	8001652 <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <ES_WIFI_Connect+0xe8>)
 8001628:	6810      	ldr	r0, [r2, #0]
 800162a:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001638:	461a      	mov	r2, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fdcc 	bl	80011d8 <AT_ExecuteCommand>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001652:	7dfb      	ldrb	r3, [r7, #23]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	0800d4b8 	.word	0x0800d4b8
 8001660:	0800d4c0 	.word	0x0800d4c0
 8001664:	0800d4c8 	.word	0x0800d4c8
 8001668:	0800d4d0 	.word	0x0800d4d0

0800166c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <ES_WIFI_IsConnected+0x54>)
 800167c:	6810      	ldr	r0, [r2, #0]
 800167e:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800168c:	461a      	mov	r2, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fda2 	bl	80011d8 <AT_ExecuteCommand>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	33d2      	adds	r3, #210	; 0xd2
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f7ff fd7e 	bl	80011ac <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	0800d4d4 	.word	0x0800d4d4

080016c4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <ES_WIFI_GetNetworkSettings+0x50>)
 80016d4:	6810      	ldr	r0, [r2, #0]
 80016d6:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e4:	461a      	mov	r2, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fd76 	bl	80011d8 <AT_ExecuteCommand>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	338d      	adds	r3, #141	; 0x8d
 8001700:	4619      	mov	r1, r3
 8001702:	4610      	mov	r0, r2
 8001704:	f7ff fca2 	bl	800104c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800d4dc 	.word	0x0800d4dc

08001718 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <ES_WIFI_GetMACAddress+0x58>)
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800173a:	461a      	mov	r2, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fd4b 	bl	80011d8 <AT_ExecuteCommand>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10c      	bne.n	8001766 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001752:	3302      	adds	r3, #2
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <ES_WIFI_GetMACAddress+0x5c>)
 8001756:	4618      	mov	r0, r3
 8001758:	f00a fcf0 	bl	800c13c <strtok>
 800175c:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f7ff fba9 	bl	8000eb8 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800d538 	.word	0x0800d538
 8001774:	0800d53c 	.word	0x0800d53c

08001778 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	461a      	mov	r2, r3
 8001792:	494d      	ldr	r1, [pc, #308]	; (80018c8 <ES_WIFI_StartServerSingleConn+0x150>)
 8001794:	f00a fc62 	bl	800c05c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017a4:	461a      	mov	r2, r3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fd16 	bl	80011d8 <AT_ExecuteCommand>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	e082      	b.n	80018c0 <ES_WIFI_StartServerSingleConn+0x148>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d01c      	beq.n	80017fc <ES_WIFI_StartServerSingleConn+0x84>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d018      	beq.n	80017fc <ES_WIFI_StartServerSingleConn+0x84>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d0:	493e      	ldr	r1, [pc, #248]	; (80018cc <ES_WIFI_StartServerSingleConn+0x154>)
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	cb03      	ldmia	r3!, {r0, r1}
 80017d8:	6010      	str	r0, [r2, #0]
 80017da:	6051      	str	r1, [r2, #4]
 80017dc:	8819      	ldrh	r1, [r3, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	8111      	strh	r1, [r2, #8]
 80017e2:	7293      	strb	r3, [r2, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f0:	461a      	mov	r2, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fcf0 	bl	80011d8 <AT_ExecuteCommand>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d15d      	bne.n	80018be <ES_WIFI_StartServerSingleConn+0x146>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4930      	ldr	r1, [pc, #192]	; (80018d0 <ES_WIFI_StartServerSingleConn+0x158>)
 8001810:	f00a fc24 	bl	800c05c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001820:	461a      	mov	r2, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fcd8 	bl	80011d8 <AT_ExecuteCommand>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d145      	bne.n	80018be <ES_WIFI_StartServerSingleConn+0x146>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	7c1b      	ldrb	r3, [r3, #16]
 800183c:	461a      	mov	r2, r3
 800183e:	4925      	ldr	r1, [pc, #148]	; (80018d4 <ES_WIFI_StartServerSingleConn+0x15c>)
 8001840:	f00a fc0c 	bl	800c05c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001850:	461a      	mov	r2, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fcc0 	bl	80011d8 <AT_ExecuteCommand>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d12d      	bne.n	80018be <ES_WIFI_StartServerSingleConn+0x146>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	461a      	mov	r2, r3
 800186e:	491a      	ldr	r1, [pc, #104]	; (80018d8 <ES_WIFI_StartServerSingleConn+0x160>)
 8001870:	f00a fbf4 	bl	800c05c <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001880:	461a      	mov	r2, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fca8 	bl	80011d8 <AT_ExecuteCommand>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <ES_WIFI_StartServerSingleConn+0x146>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001898:	4a10      	ldr	r2, [pc, #64]	; (80018dc <ES_WIFI_StartServerSingleConn+0x164>)
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	6018      	str	r0, [r3, #0]
 800189e:	8891      	ldrh	r1, [r2, #4]
 80018a0:	7992      	ldrb	r2, [r2, #6]
 80018a2:	8099      	strh	r1, [r3, #4]
 80018a4:	719a      	strb	r2, [r3, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018b2:	461a      	mov	r2, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fc8f 	bl	80011d8 <AT_ExecuteCommand>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	0800d5a0 	.word	0x0800d5a0
 80018cc:	0800d5e8 	.word	0x0800d5e8
 80018d0:	0800d5a8 	.word	0x0800d5a8
 80018d4:	0800d5f4 	.word	0x0800d5f4
 80018d8:	0800d5b0 	.word	0x0800d5b0
 80018dc:	0800d5fc 	.word	0x0800d5fc

080018e0 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 80018f2:	f005 fa47 	bl	8006d84 <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	429a      	cmp	r2, r3
 8001906:	d201      	bcs.n	800190c <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001912:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00a fb1b 	bl	800bf54 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001924:	4a71      	ldr	r2, [pc, #452]	; (8001aec <ES_WIFI_WaitServerConnection+0x20c>)
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001936:	461a      	mov	r2, r3
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff fc4d 	bl	80011d8 <AT_ExecuteCommand>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8001944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001948:	2b00      	cmp	r3, #0
 800194a:	d136      	bne.n	80019ba <ES_WIFI_WaitServerConnection+0xda>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001952:	4967      	ldr	r1, [pc, #412]	; (8001af0 <ES_WIFI_WaitServerConnection+0x210>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00a fbd7 	bl	800c108 <strstr>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03b      	beq.n	80019d8 <ES_WIFI_WaitServerConnection+0xf8>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001966:	4963      	ldr	r1, [pc, #396]	; (8001af4 <ES_WIFI_WaitServerConnection+0x214>)
 8001968:	4618      	mov	r0, r3
 800196a:	f00a fbcd 	bl	800c108 <strstr>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d031      	beq.n	80019d8 <ES_WIFI_WaitServerConnection+0xf8>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800197a:	495f      	ldr	r1, [pc, #380]	; (8001af8 <ES_WIFI_WaitServerConnection+0x218>)
 800197c:	4618      	mov	r0, r3
 800197e:	f00a fbc3 	bl	800c108 <strstr>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d127      	bne.n	80019d8 <ES_WIFI_WaitServerConnection+0xf8>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800198e:	495b      	ldr	r1, [pc, #364]	; (8001afc <ES_WIFI_WaitServerConnection+0x21c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00a fbb9 	bl	800c108 <strstr>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11d      	bne.n	80019d8 <ES_WIFI_WaitServerConnection+0xf8>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 800199c:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 80019a0:	4957      	ldr	r1, [pc, #348]	; (8001b00 <ES_WIFI_WaitServerConnection+0x220>)
 80019a2:	4858      	ldr	r0, [pc, #352]	; (8001b04 <ES_WIFI_WaitServerConnection+0x224>)
 80019a4:	f00a fade 	bl	800bf64 <iprintf>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ae:	4619      	mov	r1, r3
 80019b0:	4855      	ldr	r0, [pc, #340]	; (8001b08 <ES_WIFI_WaitServerConnection+0x228>)
 80019b2:	f00a fad7 	bl	800bf64 <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80019b6:	2302      	movs	r3, #2
 80019b8:	e094      	b.n	8001ae4 <ES_WIFI_WaitServerConnection+0x204>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 80019ba:	f44f 62e9 	mov.w	r2, #1864	; 0x748
 80019be:	4950      	ldr	r1, [pc, #320]	; (8001b00 <ES_WIFI_WaitServerConnection+0x220>)
 80019c0:	4850      	ldr	r0, [pc, #320]	; (8001b04 <ES_WIFI_WaitServerConnection+0x224>)
 80019c2:	f00a facf 	bl	800bf64 <iprintf>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019cc:	4619      	mov	r1, r3
 80019ce:	484f      	ldr	r0, [pc, #316]	; (8001b0c <ES_WIFI_WaitServerConnection+0x22c>)
 80019d0:	f00a fac8 	bl	800bf64 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e085      	b.n	8001ae4 <ES_WIFI_WaitServerConnection+0x204>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00a fab5 	bl	800bf54 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f0:	4a47      	ldr	r2, [pc, #284]	; (8001b10 <ES_WIFI_WaitServerConnection+0x230>)
 80019f2:	6810      	ldr	r0, [r2, #0]
 80019f4:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a02:	461a      	mov	r2, r3
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fbe7 	bl	80011d8 <AT_ExecuteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8001a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d13f      	bne.n	8001a98 <ES_WIFI_WaitServerConnection+0x1b8>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a1e:	220c      	movs	r2, #12
 8001a20:	493c      	ldr	r1, [pc, #240]	; (8001b14 <ES_WIFI_WaitServerConnection+0x234>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00a fb49 	bl	800c0ba <strncmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d043      	beq.n	8001ab6 <ES_WIFI_WaitServerConnection+0x1d6>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a34:	3302      	adds	r3, #2
 8001a36:	4938      	ldr	r1, [pc, #224]	; (8001b18 <ES_WIFI_WaitServerConnection+0x238>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00a fb7f 	bl	800c13c <strtok>
 8001a3e:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 8001a40:	4935      	ldr	r1, [pc, #212]	; (8001b18 <ES_WIFI_WaitServerConnection+0x238>)
 8001a42:	2000      	movs	r0, #0
 8001a44:	f00a fb7a 	bl	800c13c <strtok>
 8001a48:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff fa5b 	bl	8000f0c <ParseIP>
        ptr = strtok(0, ","); //port
 8001a56:	4930      	ldr	r1, [pc, #192]	; (8001b18 <ES_WIFI_WaitServerConnection+0x238>)
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f00a fb6f 	bl	800c13c <strtok>
 8001a5e:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff f9e4 	bl	8000e30 <ParseNumber>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 8001a70:	4929      	ldr	r1, [pc, #164]	; (8001b18 <ES_WIFI_WaitServerConnection+0x238>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	f00a fb62 	bl	800c13c <strtok>
 8001a78:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 8001a7a:	4927      	ldr	r1, [pc, #156]	; (8001b18 <ES_WIFI_WaitServerConnection+0x238>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f00a fb5d 	bl	800c13c <strtok>
 8001a82:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff f9d2 	bl	8000e30 <ParseNumber>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e025      	b.n	8001ae4 <ES_WIFI_WaitServerConnection+0x204>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8001a98:	f240 7263 	movw	r2, #1891	; 0x763
 8001a9c:	4918      	ldr	r1, [pc, #96]	; (8001b00 <ES_WIFI_WaitServerConnection+0x220>)
 8001a9e:	4819      	ldr	r0, [pc, #100]	; (8001b04 <ES_WIFI_WaitServerConnection+0x224>)
 8001aa0:	f00a fa60 	bl	800bf64 <iprintf>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <ES_WIFI_WaitServerConnection+0x23c>)
 8001aae:	f00a fa59 	bl	800bf64 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e016      	b.n	8001ae4 <ES_WIFI_WaitServerConnection+0x204>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001abc:	2064      	movs	r0, #100	; 0x64
 8001abe:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8001ac0:	f005 f960 	bl	8006d84 <HAL_GetTick>
 8001ac4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f43f af1f 	beq.w	800190c <ES_WIFI_WaitServerConnection+0x2c>
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	f4ff af1a 	bcc.w	800190c <ES_WIFI_WaitServerConnection+0x2c>
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f4ff af15 	bcc.w	800190c <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0800d4b0 	.word	0x0800d4b0
 8001af0:	0800d604 	.word	0x0800d604
 8001af4:	0800d60c 	.word	0x0800d60c
 8001af8:	0800d614 	.word	0x0800d614
 8001afc:	0800d620 	.word	0x0800d620
 8001b00:	0800d630 	.word	0x0800d630
 8001b04:	0800d648 	.word	0x0800d648
 8001b08:	0800d650 	.word	0x0800d650
 8001b0c:	0800d668 	.word	0x0800d668
 8001b10:	0800d680 	.word	0x0800d680
 8001b14:	0800d684 	.word	0x0800d684
 8001b18:	0800d470 	.word	0x0800d470
 8001b1c:	0800d694 	.word	0x0800d694

08001b20 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4926      	ldr	r1, [pc, #152]	; (8001bcc <ES_WIFI_CloseServerConnection+0xac>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00a fa91 	bl	800c05c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b46:	461a      	mov	r2, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fb45 	bl	80011d8 <AT_ExecuteCommand>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8001b58:	f240 727f 	movw	r2, #1919	; 0x77f
 8001b5c:	491c      	ldr	r1, [pc, #112]	; (8001bd0 <ES_WIFI_CloseServerConnection+0xb0>)
 8001b5e:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <ES_WIFI_CloseServerConnection+0xb4>)
 8001b60:	f00a fa00 	bl	800bf64 <iprintf>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	481a      	ldr	r0, [pc, #104]	; (8001bd8 <ES_WIFI_CloseServerConnection+0xb8>)
 8001b6e:	f00a f9f9 	bl	800bf64 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	e026      	b.n	8001bc4 <ES_WIFI_CloseServerConnection+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <ES_WIFI_CloseServerConnection+0xbc>)
 8001b7e:	6810      	ldr	r0, [r2, #0]
 8001b80:	6018      	str	r0, [r3, #0]
 8001b82:	8891      	ldrh	r1, [r2, #4]
 8001b84:	7992      	ldrb	r2, [r2, #6]
 8001b86:	8099      	strh	r1, [r3, #4]
 8001b88:	719a      	strb	r2, [r3, #6]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b96:	461a      	mov	r2, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fb1d 	bl	80011d8 <AT_ExecuteCommand>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <ES_WIFI_CloseServerConnection+0xa2>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8001ba8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8001bac:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <ES_WIFI_CloseServerConnection+0xb0>)
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <ES_WIFI_CloseServerConnection+0xb4>)
 8001bb0:	f00a f9d8 	bl	800bf64 <iprintf>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <ES_WIFI_CloseServerConnection+0xc0>)
 8001bbe:	f00a f9d1 	bl	800bf64 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800d5a0 	.word	0x0800d5a0
 8001bd0:	0800d630 	.word	0x0800d630
 8001bd4:	0800d648 	.word	0x0800d648
 8001bd8:	0800d6ac 	.word	0x0800d6ac
 8001bdc:	0800d6c8 	.word	0x0800d6c8
 8001be0:	0800d6d0 	.word	0x0800d6d0

08001be4 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4926      	ldr	r1, [pc, #152]	; (8001c90 <ES_WIFI_StopServerSingleConn+0xac>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a fa2f 	bl	800c05c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fae3 	bl	80011d8 <AT_ExecuteCommand>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00e      	beq.n	8001c3a <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8001c1c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001c20:	491c      	ldr	r1, [pc, #112]	; (8001c94 <ES_WIFI_StopServerSingleConn+0xb0>)
 8001c22:	481d      	ldr	r0, [pc, #116]	; (8001c98 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001c24:	f00a f99e 	bl	800bf64 <iprintf>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <ES_WIFI_StopServerSingleConn+0xb8>)
 8001c32:	f00a f997 	bl	800bf64 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	e026      	b.n	8001c88 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <ES_WIFI_StopServerSingleConn+0xbc>)
 8001c42:	6810      	ldr	r0, [r2, #0]
 8001c44:	6018      	str	r0, [r3, #0]
 8001c46:	8892      	ldrh	r2, [r2, #4]
 8001c48:	809a      	strh	r2, [r3, #4]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c56:	461a      	mov	r2, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fabd 	bl	80011d8 <AT_ExecuteCommand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8001c68:	f240 72a7 	movw	r2, #1959	; 0x7a7
 8001c6c:	4909      	ldr	r1, [pc, #36]	; (8001c94 <ES_WIFI_StopServerSingleConn+0xb0>)
 8001c6e:	480a      	ldr	r0, [pc, #40]	; (8001c98 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001c70:	f00a f978 	bl	800bf64 <iprintf>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <ES_WIFI_StopServerSingleConn+0xc0>)
 8001c7e:	f00a f971 	bl	800bf64 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	e000      	b.n	8001c88 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	0800d5a0 	.word	0x0800d5a0
 8001c94:	0800d630 	.word	0x0800d630
 8001c98:	0800d648 	.word	0x0800d648
 8001c9c:	0800d6e8 	.word	0x0800d6e8
 8001ca0:	0800d708 	.word	0x0800d708
 8001ca4:	0800d710 	.word	0x0800d710

08001ca8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	72fb      	strb	r3, [r7, #11]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e001      	b.n	8001cd0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001cd0:	893b      	ldrh	r3, [r7, #8]
 8001cd2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001cd6:	d302      	bcc.n	8001cde <ES_WIFI_SendData+0x36>
 8001cd8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001cdc:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	893a      	ldrh	r2, [r7, #8]
 8001ce2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cea:	7afa      	ldrb	r2, [r7, #11]
 8001cec:	4942      	ldr	r1, [pc, #264]	; (8001df8 <ES_WIFI_SendData+0x150>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00a f9b4 	bl	800c05c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d00:	461a      	mov	r2, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff fa68 	bl	80011d8 <AT_ExecuteCommand>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d15e      	bne.n	8001dd0 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4938      	ldr	r1, [pc, #224]	; (8001dfc <ES_WIFI_SendData+0x154>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00a f99d 	bl	800c05c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fa51 	bl	80011d8 <AT_ExecuteCommand>
 8001d36:	4603      	mov	r3, r0
 8001d38:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001d3a:	7cfb      	ldrb	r3, [r7, #19]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d13d      	bne.n	8001dbc <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d46:	893a      	ldrh	r2, [r7, #8]
 8001d48:	492d      	ldr	r1, [pc, #180]	; (8001e00 <ES_WIFI_SendData+0x158>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f00a f986 	bl	800c05c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fa9d 	bl	80012a4 <AT_RequestSendData>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d7a:	4922      	ldr	r1, [pc, #136]	; (8001e04 <ES_WIFI_SendData+0x15c>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00a f9c3 	bl	800c108 <strstr>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02c      	beq.n	8001de2 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001d88:	f640 025b 	movw	r2, #2139	; 0x85b
 8001d8c:	491e      	ldr	r1, [pc, #120]	; (8001e08 <ES_WIFI_SendData+0x160>)
 8001d8e:	481f      	ldr	r0, [pc, #124]	; (8001e0c <ES_WIFI_SendData+0x164>)
 8001d90:	f00a f8e8 	bl	800bf64 <iprintf>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481c      	ldr	r0, [pc, #112]	; (8001e10 <ES_WIFI_SendData+0x168>)
 8001d9e:	f00a f8e1 	bl	800bf64 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001da2:	2302      	movs	r3, #2
 8001da4:	74fb      	strb	r3, [r7, #19]
 8001da6:	e01c      	b.n	8001de2 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001da8:	f640 0261 	movw	r2, #2145	; 0x861
 8001dac:	4916      	ldr	r1, [pc, #88]	; (8001e08 <ES_WIFI_SendData+0x160>)
 8001dae:	4817      	ldr	r0, [pc, #92]	; (8001e0c <ES_WIFI_SendData+0x164>)
 8001db0:	f00a f8d8 	bl	800bf64 <iprintf>
 8001db4:	4817      	ldr	r0, [pc, #92]	; (8001e14 <ES_WIFI_SendData+0x16c>)
 8001db6:	f00a f949 	bl	800c04c <puts>
 8001dba:	e012      	b.n	8001de2 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001dbc:	f640 0266 	movw	r2, #2150	; 0x866
 8001dc0:	4911      	ldr	r1, [pc, #68]	; (8001e08 <ES_WIFI_SendData+0x160>)
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <ES_WIFI_SendData+0x164>)
 8001dc4:	f00a f8ce 	bl	800bf64 <iprintf>
 8001dc8:	4813      	ldr	r0, [pc, #76]	; (8001e18 <ES_WIFI_SendData+0x170>)
 8001dca:	f00a f93f 	bl	800c04c <puts>
 8001dce:	e008      	b.n	8001de2 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001dd0:	f640 026b 	movw	r2, #2155	; 0x86b
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <ES_WIFI_SendData+0x160>)
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <ES_WIFI_SendData+0x164>)
 8001dd8:	f00a f8c4 	bl	800bf64 <iprintf>
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <ES_WIFI_SendData+0x174>)
 8001dde:	f00a f935 	bl	800c04c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d102      	bne.n	8001dee <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2200      	movs	r2, #0
 8001dec:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800d5a0 	.word	0x0800d5a0
 8001dfc:	0800d754 	.word	0x0800d754
 8001e00:	0800d75c 	.word	0x0800d75c
 8001e04:	0800d768 	.word	0x0800d768
 8001e08:	0800d630 	.word	0x0800d630
 8001e0c:	0800d648 	.word	0x0800d648
 8001e10:	0800d770 	.word	0x0800d770
 8001e14:	0800d78c 	.word	0x0800d78c
 8001e18:	0800d7a8 	.word	0x0800d7a8
 8001e1c:	0800d7bc 	.word	0x0800d7bc

08001e20 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	72fb      	strb	r3, [r7, #11]
 8001e30:	4613      	mov	r3, r2
 8001e32:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001e34:	2302      	movs	r3, #2
 8001e36:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e001      	b.n	8001e48 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001e4e:	f200 808a 	bhi.w	8001f66 <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e58:	7afa      	ldrb	r2, [r7, #11]
 8001e5a:	4945      	ldr	r1, [pc, #276]	; (8001f70 <ES_WIFI_ReceiveData+0x150>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00a f8fd 	bl	800c05c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff f9b1 	bl	80011d8 <AT_ExecuteCommand>
 8001e76:	4603      	mov	r3, r0
 8001e78:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d164      	bne.n	8001f4a <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e86:	893a      	ldrh	r2, [r7, #8]
 8001e88:	493a      	ldr	r1, [pc, #232]	; (8001f74 <ES_WIFI_ReceiveData+0x154>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00a f8e6 	bl	800c05c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff f99a 	bl	80011d8 <AT_ExecuteCommand>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d140      	bne.n	8001f30 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4930      	ldr	r1, [pc, #192]	; (8001f78 <ES_WIFI_ReceiveData+0x158>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00a f8cf 	bl	800c05c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff f983 	bl	80011d8 <AT_ExecuteCommand>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11f      	bne.n	8001f1c <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <ES_WIFI_ReceiveData+0x15c>)
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001eee:	893a      	ldrh	r2, [r7, #8]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fa49 	bl	8001390 <AT_RequestReceiveData>
 8001efe:	4603      	mov	r3, r0
 8001f00:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02e      	beq.n	8001f66 <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8001f08:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001f0c:	491c      	ldr	r1, [pc, #112]	; (8001f80 <ES_WIFI_ReceiveData+0x160>)
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <ES_WIFI_ReceiveData+0x164>)
 8001f10:	f00a f828 	bl	800bf64 <iprintf>
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <ES_WIFI_ReceiveData+0x168>)
 8001f16:	f00a f899 	bl	800c04c <puts>
 8001f1a:	e024      	b.n	8001f66 <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001f1c:	f640 1201 	movw	r2, #2305	; 0x901
 8001f20:	4917      	ldr	r1, [pc, #92]	; (8001f80 <ES_WIFI_ReceiveData+0x160>)
 8001f22:	4818      	ldr	r0, [pc, #96]	; (8001f84 <ES_WIFI_ReceiveData+0x164>)
 8001f24:	f00a f81e 	bl	800bf64 <iprintf>
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <ES_WIFI_ReceiveData+0x16c>)
 8001f2a:	f00a f88f 	bl	800c04c <puts>
 8001f2e:	e01a      	b.n	8001f66 <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8001f30:	f640 1206 	movw	r2, #2310	; 0x906
 8001f34:	4912      	ldr	r1, [pc, #72]	; (8001f80 <ES_WIFI_ReceiveData+0x160>)
 8001f36:	4813      	ldr	r0, [pc, #76]	; (8001f84 <ES_WIFI_ReceiveData+0x164>)
 8001f38:	f00a f814 	bl	800bf64 <iprintf>
 8001f3c:	4814      	ldr	r0, [pc, #80]	; (8001f90 <ES_WIFI_ReceiveData+0x170>)
 8001f3e:	f00a f885 	bl	800c04c <puts>
        *Receivedlen = 0;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	e00d      	b.n	8001f66 <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8001f4a:	f640 120c 	movw	r2, #2316	; 0x90c
 8001f4e:	490c      	ldr	r1, [pc, #48]	; (8001f80 <ES_WIFI_ReceiveData+0x160>)
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <ES_WIFI_ReceiveData+0x164>)
 8001f52:	f00a f807 	bl	800bf64 <iprintf>
 8001f56:	480f      	ldr	r0, [pc, #60]	; (8001f94 <ES_WIFI_ReceiveData+0x174>)
 8001f58:	f00a f878 	bl	800c04c <puts>
      issue15++;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <ES_WIFI_ReceiveData+0x178>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <ES_WIFI_ReceiveData+0x178>)
 8001f64:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800d5a0 	.word	0x0800d5a0
 8001f74:	0800d7e0 	.word	0x0800d7e0
 8001f78:	0800d7e8 	.word	0x0800d7e8
 8001f7c:	0800d7f0 	.word	0x0800d7f0
 8001f80:	0800d630 	.word	0x0800d630
 8001f84:	0800d648 	.word	0x0800d648
 8001f88:	0800d7f4 	.word	0x0800d7f4
 8001f8c:	0800d814 	.word	0x0800d814
 8001f90:	0800d82c 	.word	0x0800d82c
 8001f94:	0800d84c 	.word	0x0800d84c
 8001f98:	20000550 	.word	0x20000550

08001f9c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a49      	ldr	r2, [pc, #292]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <SPI_WIFI_MspInit+0x164>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200a:	483e      	ldr	r0, [pc, #248]	; (8002104 <SPI_WIFI_MspInit+0x168>)
 800200c:	f005 f9fa 	bl	8007404 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4836      	ldr	r0, [pc, #216]	; (8002104 <SPI_WIFI_MspInit+0x168>)
 800202a:	f005 f82b 	bl	8007084 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800202e:	2302      	movs	r3, #2
 8002030:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002032:	4b35      	ldr	r3, [pc, #212]	; (8002108 <SPI_WIFI_MspInit+0x16c>)
 8002034:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4831      	ldr	r0, [pc, #196]	; (800210c <SPI_WIFI_MspInit+0x170>)
 8002046:	f005 f81d 	bl	8007084 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800204a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4829      	ldr	r0, [pc, #164]	; (800210c <SPI_WIFI_MspInit+0x170>)
 8002068:	f005 f80c 	bl	8007084 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	4826      	ldr	r0, [pc, #152]	; (800210c <SPI_WIFI_MspInit+0x170>)
 8002072:	f005 f9c7 	bl	8007404 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002076:	2301      	movs	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002082:	2301      	movs	r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	481f      	ldr	r0, [pc, #124]	; (800210c <SPI_WIFI_MspInit+0x170>)
 800208e:	f004 fff9 	bl	8007084 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80020a4:	2306      	movs	r3, #6
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <SPI_WIFI_MspInit+0x174>)
 80020b0:	f004 ffe8 	bl	8007084 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80020b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80020c6:	2306      	movs	r3, #6
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	480f      	ldr	r0, [pc, #60]	; (8002110 <SPI_WIFI_MspInit+0x174>)
 80020d2:	f004 ffd7 	bl	8007084 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80020d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020da:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80020e8:	2306      	movs	r3, #6
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <SPI_WIFI_MspInit+0x174>)
 80020f4:	f004 ffc6 	bl	8007084 <HAL_GPIO_Init>
}
 80020f8:	bf00      	nop
 80020fa:	3730      	adds	r7, #48	; 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	48000400 	.word	0x48000400
 8002108:	10110000 	.word	0x10110000
 800210c:	48001000 	.word	0x48001000
 8002110:	48000800 	.word	0x48000800

08002114 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d145      	bne.n	80021b4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <SPI_WIFI_Init+0xb8>)
 800212c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800212e:	4826      	ldr	r0, [pc, #152]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002130:	f7ff ff34 	bl	8001f9c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002136:	f44f 7282 	mov.w	r2, #260	; 0x104
 800213a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002144:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002148:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002160:	2210      	movs	r2, #16
 8002162:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 8002178:	2200      	movs	r2, #0
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <SPI_WIFI_Init+0xb4>)
 800217e:	f007 fc47 	bl	8009a10 <HAL_SPI_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e018      	b.n	80021c0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	2007      	movs	r0, #7
 8002194:	f004 feff 	bl	8006f96 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002198:	2007      	movs	r0, #7
 800219a:	f004 ff18 	bl	8006fce <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2033      	movs	r0, #51	; 0x33
 80021a4:	f004 fef7 	bl	8006f96 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80021a8:	2033      	movs	r0, #51	; 0x33
 80021aa:	f004 ff10 	bl	8006fce <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80021ae:	200a      	movs	r0, #10
 80021b0:	f000 f9fe 	bl	80025b0 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80021b4:	f000 f80c 	bl	80021d0 <SPI_WIFI_ResetModule>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]

  return rc;
 80021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20004980 	.word	0x20004980
 80021cc:	40003c00 	.word	0x40003c00

080021d0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80021d6:	f004 fdd5 	bl	8006d84 <HAL_GetTick>
 80021da:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e6:	4830      	ldr	r0, [pc, #192]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 80021e8:	f005 f90c 	bl	8007404 <HAL_GPIO_WritePin>
 80021ec:	200a      	movs	r0, #10
 80021ee:	f004 fdd5 	bl	8006d9c <HAL_Delay>
 80021f2:	2201      	movs	r2, #1
 80021f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f8:	482b      	ldr	r0, [pc, #172]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 80021fa:	f005 f903 	bl	8007404 <HAL_GPIO_WritePin>
 80021fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002202:	f004 fdcb 	bl	8006d9c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8002206:	2200      	movs	r2, #0
 8002208:	2101      	movs	r1, #1
 800220a:	4827      	ldr	r0, [pc, #156]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 800220c:	f005 f8fa 	bl	8007404 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002210:	200f      	movs	r0, #15
 8002212:	f000 f9cd 	bl	80025b0 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8002216:	e020      	b.n	800225a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	463a      	mov	r2, r7
 800221c:	18d1      	adds	r1, r2, r3
 800221e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002222:	2201      	movs	r2, #1
 8002224:	4821      	ldr	r0, [pc, #132]	; (80022ac <SPI_WIFI_ResetModule+0xdc>)
 8002226:	f007 fcb9 	bl	8009b9c <HAL_SPI_Receive>
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3302      	adds	r3, #2
 8002232:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002234:	f004 fda6 	bl	8006d84 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002242:	d202      	bcs.n	800224a <SPI_WIFI_ResetModule+0x7a>
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800224a:	2201      	movs	r2, #1
 800224c:	2101      	movs	r1, #1
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 8002250:	f005 f8d8 	bl	8007404 <HAL_GPIO_WritePin>
      return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	e021      	b.n	800229e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800225a:	2102      	movs	r1, #2
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 800225e:	f005 f8b9 	bl	80073d4 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d0d7      	beq.n	8002218 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8002268:	2201      	movs	r2, #1
 800226a:	2101      	movs	r1, #1
 800226c:	480e      	ldr	r0, [pc, #56]	; (80022a8 <SPI_WIFI_ResetModule+0xd8>)
 800226e:	f005 f8c9 	bl	8007404 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002272:	783b      	ldrb	r3, [r7, #0]
 8002274:	2b15      	cmp	r3, #21
 8002276:	d10e      	bne.n	8002296 <SPI_WIFI_ResetModule+0xc6>
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b15      	cmp	r3, #21
 800227c:	d10b      	bne.n	8002296 <SPI_WIFI_ResetModule+0xc6>
 800227e:	78bb      	ldrb	r3, [r7, #2]
 8002280:	2b0d      	cmp	r3, #13
 8002282:	d108      	bne.n	8002296 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002284:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002286:	2b0a      	cmp	r3, #10
 8002288:	d105      	bne.n	8002296 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800228a:	793b      	ldrb	r3, [r7, #4]
 800228c:	2b3e      	cmp	r3, #62	; 0x3e
 800228e:	d102      	bne.n	8002296 <SPI_WIFI_ResetModule+0xc6>
 8002290:	797b      	ldrb	r3, [r7, #5]
 8002292:	2b20      	cmp	r3, #32
 8002294:	d002      	beq.n	800229c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e000      	b.n	800229e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	48001000 	.word	0x48001000
 80022ac:	20004980 	.word	0x20004980

080022b0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <SPI_WIFI_DeInit+0x10>)
 80022b6:	f007 fc35 	bl	8009b24 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20004980 	.word	0x20004980

080022c4 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80022cc:	f004 fd5a 	bl	8006d84 <HAL_GetTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80022d4:	e00a      	b.n	80022ec <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80022d6:	f004 fd55 	bl	8006d84 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d902      	bls.n	80022ec <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	e007      	b.n	80022fc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80022ec:	2102      	movs	r1, #2
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <wait_cmddata_rdy_high+0x40>)
 80022f0:	f005 f870 	bl	80073d4 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d1ed      	bne.n	80022d6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	48001000 	.word	0x48001000

08002308 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002310:	f004 fd38 	bl	8006d84 <HAL_GetTick>
 8002314:	4603      	mov	r3, r0
 8002316:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8002318:	e00a      	b.n	8002330 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800231a:	f004 fd33 	bl	8006d84 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d902      	bls.n	8002330 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e004      	b.n	800233a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <wait_cmddata_rdy_rising_event+0x3c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d0f0      	beq.n	800231a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002338:	2300      	movs	r3, #0
#endif
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000055c 	.word	0x2000055c

08002348 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002350:	f004 fd18 	bl	8006d84 <HAL_GetTick>
 8002354:	4603      	mov	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8002358:	e00a      	b.n	8002370 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800235a:	f004 fd13 	bl	8006d84 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d902      	bls.n	8002370 <wait_spi_rx_event+0x28>
    {
      return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e004      	b.n	800237a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <wait_spi_rx_event+0x3c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d0f0      	beq.n	800235a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002378:	2300      	movs	r3, #0
#endif
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000554 	.word	0x20000554

08002388 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002390:	f004 fcf8 	bl	8006d84 <HAL_GetTick>
 8002394:	4603      	mov	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8002398:	e00a      	b.n	80023b0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800239a:	f004 fcf3 	bl	8006d84 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d902      	bls.n	80023b0 <wait_spi_tx_event+0x28>
    {
      return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e004      	b.n	80023ba <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <wait_spi_tx_event+0x3c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d0f0      	beq.n	800239a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80023b8:	2300      	movs	r3, #0
#endif
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000558 	.word	0x20000558

080023c8 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	460b      	mov	r3, r1
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80023da:	2201      	movs	r2, #1
 80023dc:	2101      	movs	r1, #1
 80023de:	4834      	ldr	r0, [pc, #208]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 80023e0:	f005 f810 	bl	8007404 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f8e3 	bl	80025b0 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff8b 	bl	8002308 <wait_cmddata_rdy_rising_event>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da02      	bge.n	80023fe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80023f8:	f06f 0302 	mvn.w	r3, #2
 80023fc:	e054      	b.n	80024a8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80023fe:	2200      	movs	r2, #0
 8002400:	2101      	movs	r1, #1
 8002402:	482b      	ldr	r0, [pc, #172]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 8002404:	f004 fffe 	bl	8007404 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002408:	200f      	movs	r0, #15
 800240a:	f000 f8d1 	bl	80025b0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800240e:	e03d      	b.n	800248c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	429a      	cmp	r2, r3
 8002418:	db02      	blt.n	8002420 <SPI_WIFI_ReceiveData+0x58>
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d13c      	bne.n	800249a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <SPI_WIFI_ReceiveData+0xec>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2201      	movs	r2, #1
 800242c:	4619      	mov	r1, r3
 800242e:	4822      	ldr	r0, [pc, #136]	; (80024b8 <SPI_WIFI_ReceiveData+0xf0>)
 8002430:	f007 ff76 	bl	800a320 <HAL_SPI_Receive_IT>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800243a:	2201      	movs	r2, #1
 800243c:	2101      	movs	r1, #1
 800243e:	481c      	ldr	r0, [pc, #112]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 8002440:	f004 ffe0 	bl	8007404 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e02e      	b.n	80024a8 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff7b 	bl	8002348 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002452:	7d3a      	ldrb	r2, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3301      	adds	r3, #1
 800245c:	7d7a      	ldrb	r2, [r7, #21]
 800245e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002460:	8afb      	ldrh	r3, [r7, #22]
 8002462:	3302      	adds	r3, #2
 8002464:	b29b      	uxth	r3, r3
 8002466:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3302      	adds	r3, #2
 800246c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800246e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002472:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002476:	db09      	blt.n	800248c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002478:	2201      	movs	r2, #1
 800247a:	2101      	movs	r1, #1
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 800247e:	f004 ffc1 	bl	8007404 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002482:	f7ff fea5 	bl	80021d0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002486:	f06f 0303 	mvn.w	r3, #3
 800248a:	e00d      	b.n	80024a8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800248c:	2102      	movs	r1, #2
 800248e:	4808      	ldr	r0, [pc, #32]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 8002490:	f004 ffa0 	bl	80073d4 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d0ba      	beq.n	8002410 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800249a:	2201      	movs	r2, #1
 800249c:	2101      	movs	r1, #1
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <SPI_WIFI_ReceiveData+0xe8>)
 80024a0:	f004 ffb0 	bl	8007404 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80024a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	48001000 	.word	0x48001000
 80024b4:	20000554 	.word	0x20000554
 80024b8:	20004980 	.word	0x20004980

080024bc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	460b      	mov	r3, r1
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fef9 	bl	80022c4 <wait_cmddata_rdy_high>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da02      	bge.n	80024de <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	e04f      	b.n	800257e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80024de:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <SPI_WIFI_SendData+0xcc>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4828      	ldr	r0, [pc, #160]	; (800258c <SPI_WIFI_SendData+0xd0>)
 80024ea:	f004 ff8b 	bl	8007404 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80024ee:	200f      	movs	r0, #15
 80024f0:	f000 f85e 	bl	80025b0 <SPI_WIFI_DelayUs>
  if (len > 1)
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d919      	bls.n	800252e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <SPI_WIFI_SendData+0xd4>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8002500:	897b      	ldrh	r3, [r7, #10]
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	4822      	ldr	r0, [pc, #136]	; (8002594 <SPI_WIFI_SendData+0xd8>)
 800250c:	f007 fe82 	bl	800a214 <HAL_SPI_Transmit_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002516:	2201      	movs	r2, #1
 8002518:	2101      	movs	r1, #1
 800251a:	481c      	ldr	r0, [pc, #112]	; (800258c <SPI_WIFI_SendData+0xd0>)
 800251c:	f004 ff72 	bl	8007404 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	e02b      	b.n	800257e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff2d 	bl	8002388 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	3b01      	subs	r3, #1
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002544:	230a      	movs	r3, #10
 8002546:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <SPI_WIFI_SendData+0xd4>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	2201      	movs	r2, #1
 8002554:	4619      	mov	r1, r3
 8002556:	480f      	ldr	r0, [pc, #60]	; (8002594 <SPI_WIFI_SendData+0xd8>)
 8002558:	f007 fe5c 	bl	800a214 <HAL_SPI_Transmit_IT>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002562:	2201      	movs	r2, #1
 8002564:	2101      	movs	r1, #1
 8002566:	4809      	ldr	r0, [pc, #36]	; (800258c <SPI_WIFI_SendData+0xd0>)
 8002568:	f004 ff4c 	bl	8007404 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e005      	b.n	800257e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff07 	bl	8002388 <wait_spi_tx_event>
    
  }
  return len;
 800257a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000055c 	.word	0x2000055c
 800258c:	48001000 	.word	0x48001000
 8002590:	20000558 	.word	0x20000558
 8002594:	20004980 	.word	0x20004980

08002598 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 fbfb 	bl	8006d9c <HAL_Delay>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <SPI_WIFI_DelayUs+0x94>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d122      	bne.n	800260e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <SPI_WIFI_DelayUs+0x98>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <SPI_WIFI_DelayUs+0x9c>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80025de:	f004 fbd1 	bl	8006d84 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80025e4:	e002      	b.n	80025ec <SPI_WIFI_DelayUs+0x3c>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80025f2:	f004 fbc7 	bl	8006d84 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <SPI_WIFI_DelayUs+0x94>)
 80025fe:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <SPI_WIFI_DelayUs+0x94>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <SPI_WIFI_DelayUs+0x5e>
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <SPI_WIFI_DelayUs+0x94>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <SPI_WIFI_DelayUs+0x98>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <SPI_WIFI_DelayUs+0xa0>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9a      	lsrs	r2, r3, #18
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <SPI_WIFI_DelayUs+0x94>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800262e:	e002      	b.n	8002636 <SPI_WIFI_DelayUs+0x86>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3b01      	subs	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <SPI_WIFI_DelayUs+0x80>
  return;
 800263c:	bf00      	nop
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000560 	.word	0x20000560
 8002648:	200001a0 	.word	0x200001a0
 800264c:	10624dd3 	.word	0x10624dd3
 8002650:	431bde83 	.word	0x431bde83

08002654 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_SPI_RxCpltCallback+0x24>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_SPI_RxCpltCallback+0x24>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000554 	.word	0x20000554

0800267c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_SPI_TxCpltCallback+0x24>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_SPI_TxCpltCallback+0x24>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000558 	.word	0x20000558

080026a4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SPI_WIFI_ISR+0x1c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <SPI_WIFI_ISR+0x1c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
   }
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	2000055c 	.word	0x2000055c

080026c4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2120      	movs	r1, #32
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fb8a 	bl	8003df0 <SENSOR_IO_Read>
 80026dc:	4603      	mov	r3, r0
 80026de:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002706:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	2120      	movs	r1, #32
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fb53 	bl	8003dbc <SENSOR_IO_Write>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	b2d8      	uxtb	r0, r3
 800272c:	f107 0208 	add.w	r2, r7, #8
 8002730:	2302      	movs	r3, #2
 8002732:	21b2      	movs	r1, #178	; 0xb2
 8002734:	f001 fb7a 	bl	8003e2c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2135      	movs	r1, #53	; 0x35
 800273e:	4618      	mov	r0, r3
 8002740:	f001 fb56 	bl	8003df0 <SENSOR_IO_Read>
 8002744:	4603      	mov	r3, r0
 8002746:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	b21b      	sxth	r3, r3
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	b21a      	sxth	r2, r3
 8002754:	7a3b      	ldrb	r3, [r7, #8]
 8002756:	b21b      	sxth	r3, r3
 8002758:	4313      	orrs	r3, r2
 800275a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800275c:	7ffb      	ldrb	r3, [r7, #31]
 800275e:	019b      	lsls	r3, r3, #6
 8002760:	b21b      	sxth	r3, r3
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	b21a      	sxth	r2, r3
 8002768:	7a7b      	ldrb	r3, [r7, #9]
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002770:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002774:	10db      	asrs	r3, r3, #3
 8002776:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002778:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800277c:	10db      	asrs	r3, r3, #3
 800277e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	b2d8      	uxtb	r0, r3
 8002784:	f107 0208 	add.w	r2, r7, #8
 8002788:	2304      	movs	r3, #4
 800278a:	21bc      	movs	r1, #188	; 0xbc
 800278c:	f001 fb4e 	bl	8003e2c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002790:	7a7b      	ldrb	r3, [r7, #9]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	7a3b      	ldrb	r3, [r7, #8]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800279e:	7afb      	ldrb	r3, [r7, #11]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	7abb      	ldrb	r3, [r7, #10]
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	f107 0208 	add.w	r2, r7, #8
 80027b4:	2302      	movs	r3, #2
 80027b6:	21aa      	movs	r1, #170	; 0xaa
 80027b8:	f001 fb38 	bl	8003e2c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027bc:	7a7b      	ldrb	r3, [r7, #9]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	7a3b      	ldrb	r3, [r7, #8]
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80027ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002808:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	ee07 3a90 	vmov	s15, r3
}
 8002822:	eeb0 0a67 	vmov.f32	s0, s15
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <main>:
static  int wifi_start(void);
static  int wifi_connect(void);
static  bool WebServerProcess(void);

int main(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002830:	f004 fa3f 	bl	8006cb2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002834:	f000 fdf0 	bl	8003418 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002838:	f000 febe 	bl	80035b8 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 800283c:	f000 fe8c 	bl	8003558 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  VL53L0X_PROXIMITY_Init();
 8002840:	f000 fd88 	bl	8003354 <VL53L0X_PROXIMITY_Init>

  BSP_LED_Init(LED2);
 8002844:	2000      	movs	r0, #0
 8002846:	f001 f979 	bl	8003b3c <BSP_LED_Init>
  //BSP_LED_Init(LED1);
  BSP_TSENSOR_Init();
 800284a:	f001 fb0d 	bl	8003e68 <BSP_TSENSOR_Init>

  MX_TIM16_Init();
 800284e:	f000 fe5b 	bl	8003508 <MX_TIM16_Init>
  HAL_TIM_Base_Start(&htim16);
 8002852:	4809      	ldr	r0, [pc, #36]	; (8002878 <main+0x4c>)
 8002854:	f008 fc00 	bl	800b058 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE );
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <main+0x4c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <main+0x4c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	60da      	str	r2, [r3, #12]
  serialPrint("****** WIFI Web Server Start****** \n\r");
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <main+0x50>)
 800286a:	f001 f8f1 	bl	8003a50 <serialPrint>

  wifi_server();
 800286e:	f000 f8b3 	bl	80029d8 <wifi_server>
 8002872:	2300      	movs	r3, #0

}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20004a64 	.word	0x20004a64
 800287c:	0800d900 	.word	0x0800d900

08002880 <wifi_start>:
* @brief System Clock Configuration
* @retval None
*/

static int wifi_start(void)
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b097      	sub	sp, #92	; 0x5c
 8002884:	af04      	add	r7, sp, #16
uint8_t  MAC_Addr[6];

/*Initialize and use WIFI module */
if(WIFI_Init() ==  WIFI_STATUS_OK)
 8002886:	f001 fce9 	bl	800425c <WIFI_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d135      	bne.n	80028fc <wifi_start+0x7c>
{
  serialPrint("ES-WIFI Initialized.\n\r");
 8002890:	481d      	ldr	r0, [pc, #116]	; (8002908 <wifi_start+0x88>)
 8002892:	f001 f8dd 	bl	8003a50 <serialPrint>
  if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fd2c 	bl	80042f8 <WIFI_GetMAC_Address>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d124      	bne.n	80028f0 <wifi_start+0x70>
  {

    char macAdd[60] = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	223c      	movs	r2, #60	; 0x3c
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f009 fb51 	bl	800bf54 <memset>
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
            MAC_Addr[0],
 80028b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 80028b6:	461d      	mov	r5, r3
            MAC_Addr[1],
 80028b8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 80028bc:	461e      	mov	r6, r3
            MAC_Addr[2],
 80028be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
            MAC_Addr[3],
 80028c2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
            MAC_Addr[4],
 80028c6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
            MAC_Addr[5]);
 80028ca:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 80028ce:	4604      	mov	r4, r0
 80028d0:	1d38      	adds	r0, r7, #4
 80028d2:	9403      	str	r4, [sp, #12]
 80028d4:	9102      	str	r1, [sp, #8]
 80028d6:	9201      	str	r2, [sp, #4]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4633      	mov	r3, r6
 80028dc:	462a      	mov	r2, r5
 80028de:	490b      	ldr	r1, [pc, #44]	; (800290c <wifi_start+0x8c>)
 80028e0:	f009 fbbc 	bl	800c05c <siprintf>

    serialPrint(macAdd);
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 f8b2 	bl	8003a50 <serialPrint>
}
else
{
  return -1;
}
return 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e007      	b.n	8002900 <wifi_start+0x80>
    serialPrint("> ERROR : CANNOT get MAC address\n\r");
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <wifi_start+0x90>)
 80028f2:	f001 f8ad 	bl	8003a50 <serialPrint>
    return -1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e001      	b.n	8002900 <wifi_start+0x80>
  return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002900:	4618      	mov	r0, r3
 8002902:	374c      	adds	r7, #76	; 0x4c
 8002904:	46bd      	mov	sp, r7
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	0800d928 	.word	0x0800d928
 800290c:	0800d940 	.word	0x0800d940
 8002910:	0800d974 	.word	0x0800d974

08002914 <wifi_connect>:


int wifi_connect(void)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b0b5      	sub	sp, #212	; 0xd4
 8002918:	af02      	add	r7, sp, #8

wifi_start();
 800291a:	f7ff ffb1 	bl	8002880 <wifi_start>

char connecting[100] = {0};
 800291e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002922:	2264      	movs	r2, #100	; 0x64
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f009 fb14 	bl	800bf54 <memset>
sprintf(connecting,"\nConnecting to %s , %s\n\r",SSID,PASSWORD);
 800292c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <wifi_connect+0xa8>)
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <wifi_connect+0xac>)
 8002934:	4923      	ldr	r1, [pc, #140]	; (80029c4 <wifi_connect+0xb0>)
 8002936:	f009 fb91 	bl	800c05c <siprintf>


serialPrint(connecting);
 800293a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f886 	bl	8003a50 <serialPrint>
if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8002944:	2203      	movs	r2, #3
 8002946:	491d      	ldr	r1, [pc, #116]	; (80029bc <wifi_connect+0xa8>)
 8002948:	481d      	ldr	r0, [pc, #116]	; (80029c0 <wifi_connect+0xac>)
 800294a:	f001 fcb3 	bl	80042b4 <WIFI_Connect>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d12a      	bne.n	80029aa <wifi_connect+0x96>
{
  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8002954:	481c      	ldr	r0, [pc, #112]	; (80029c8 <wifi_connect+0xb4>)
 8002956:	f001 fce5 	bl	8004324 <WIFI_GetIP_Address>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11e      	bne.n	800299e <wifi_connect+0x8a>
  {

    char connectMes[100] = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2264      	movs	r2, #100	; 0x64
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f009 faf4 	bl	800bf54 <memset>
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
            IP_Addr[0],
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <wifi_connect+0xb4>)
 800296e:	781b      	ldrb	r3, [r3, #0]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 8002970:	4619      	mov	r1, r3
            IP_Addr[1],
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <wifi_connect+0xb4>)
 8002974:	785b      	ldrb	r3, [r3, #1]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 8002976:	461c      	mov	r4, r3
            IP_Addr[2],
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <wifi_connect+0xb4>)
 800297a:	789b      	ldrb	r3, [r3, #2]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 800297c:	461a      	mov	r2, r3
            IP_Addr[3]);
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <wifi_connect+0xb4>)
 8002980:	78db      	ldrb	r3, [r3, #3]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 8002982:	4638      	mov	r0, r7
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	9200      	str	r2, [sp, #0]
 8002988:	4623      	mov	r3, r4
 800298a:	460a      	mov	r2, r1
 800298c:	490f      	ldr	r1, [pc, #60]	; (80029cc <wifi_connect+0xb8>)
 800298e:	f009 fb65 	bl	800c05c <siprintf>

    serialPrint(connectMes);
 8002992:	463b      	mov	r3, r7
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f85b 	bl	8003a50 <serialPrint>
else
{
		 serialPrint("ERROR : es-wifi module NOT connected\n\r");
   return -1;
}
return 0;
 800299a:	2300      	movs	r3, #0
 800299c:	e00a      	b.n	80029b4 <wifi_connect+0xa0>
		  serialPrint(" ERROR : es-wifi module CANNOT get IP address\n\r");
 800299e:	480c      	ldr	r0, [pc, #48]	; (80029d0 <wifi_connect+0xbc>)
 80029a0:	f001 f856 	bl	8003a50 <serialPrint>
    return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	e004      	b.n	80029b4 <wifi_connect+0xa0>
		 serialPrint("ERROR : es-wifi module NOT connected\n\r");
 80029aa:	480a      	ldr	r0, [pc, #40]	; (80029d4 <wifi_connect+0xc0>)
 80029ac:	f001 f850 	bl	8003a50 <serialPrint>
   return -1;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	37cc      	adds	r7, #204	; 0xcc
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	0800d998 	.word	0x0800d998
 80029c0:	0800d9b0 	.word	0x0800d9b0
 80029c4:	0800d9c0 	.word	0x0800d9c0
 80029c8:	20004564 	.word	0x20004564
 80029cc:	0800d9dc 	.word	0x0800d9dc
 80029d0:	0800da18 	.word	0x0800da18
 80029d4:	0800da48 	.word	0x0800da48

080029d8 <wifi_server>:


int wifi_server(void)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b0ba      	sub	sp, #232	; 0xe8
 80029dc:	af04      	add	r7, sp, #16
bool StopServer = false;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

serialPrint("\nRunning HTML Server test\n\r");
 80029e4:	4856      	ldr	r0, [pc, #344]	; (8002b40 <wifi_server+0x168>)
 80029e6:	f001 f833 	bl	8003a50 <serialPrint>
if (wifi_connect()!=0) return -1;
 80029ea:	f7ff ff93 	bl	8002914 <wifi_connect>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <wifi_server+0x22>
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	e09d      	b.n	8002b36 <wifi_server+0x15e>


if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 80029fa:	2350      	movs	r3, #80	; 0x50
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <wifi_server+0x16c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	2100      	movs	r1, #0
 8002a04:	2000      	movs	r0, #0
 8002a06:	f001 fca9 	bl	800435c <WIFI_StartServer>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <wifi_server+0x3e>
{
  serialPrint("ERROR: Cannot start server.\n\r");
 8002a10:	484d      	ldr	r0, [pc, #308]	; (8002b48 <wifi_server+0x170>)
 8002a12:	f001 f81d 	bl	8003a50 <serialPrint>
}

char logMes[100] = {0};
 8002a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a1a:	2264      	movs	r2, #100	; 0x64
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f009 fa98 	bl	800bf54 <memset>
sprintf(logMes,"Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]);
 8002a24:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <wifi_server+0x174>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4b48      	ldr	r3, [pc, #288]	; (8002b4c <wifi_server+0x174>)
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	461c      	mov	r4, r3
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <wifi_server+0x174>)
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <wifi_server+0x174>)
 8002a38:	78db      	ldrb	r3, [r3, #3]
 8002a3a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	4623      	mov	r3, r4
 8002a44:	460a      	mov	r2, r1
 8002a46:	4942      	ldr	r1, [pc, #264]	; (8002b50 <wifi_server+0x178>)
 8002a48:	f009 fb08 	bl	800c05c <siprintf>
serialPrint(logMes);
 8002a4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fffd 	bl	8003a50 <serialPrint>
{
  uint8_t RemoteIP[4];
  uint16_t RemotePort;


  while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8002a56:	e01e      	b.n	8002a96 <wifi_server+0xbe>
  {

  	char waitMes[100] = {0};
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2264      	movs	r2, #100	; 0x64
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f009 fa78 	bl	800bf54 <memset>
  	sprintf(waitMes,"Waiting for a connection to  %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]);
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <wifi_server+0x174>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <wifi_server+0x174>)
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	461c      	mov	r4, r3
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <wifi_server+0x174>)
 8002a72:	789b      	ldrb	r3, [r3, #2]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <wifi_server+0x174>)
 8002a78:	78db      	ldrb	r3, [r3, #3]
 8002a7a:	1d38      	adds	r0, r7, #4
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	9200      	str	r2, [sp, #0]
 8002a80:	4623      	mov	r3, r4
 8002a82:	460a      	mov	r2, r1
 8002a84:	4933      	ldr	r1, [pc, #204]	; (8002b54 <wifi_server+0x17c>)
 8002a86:	f009 fae9 	bl	800c05c <siprintf>
  	serialPrint(waitMes);
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 ffdf 	bl	8003a50 <serialPrint>
  	checkSensors();
 8002a92:	f000 fff5 	bl	8003a80 <checkSensors>
  while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8002a96:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8002a9a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f001 fc8a 	bl	80043bc <WIFI_WaitServerConnection>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1d4      	bne.n	8002a58 <wifi_server+0x80>

  }

  char conMes[100] = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2264      	movs	r2, #100	; 0x64
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f009 fa4d 	bl	800bf54 <memset>
  sprintf(conMes,"Client connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort);
 8002aba:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002abe:	461c      	mov	r4, r3
 8002ac0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002aca:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002ace:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8002ad2:	1d38      	adds	r0, r7, #4
 8002ad4:	9102      	str	r1, [sp, #8]
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	462b      	mov	r3, r5
 8002adc:	4622      	mov	r2, r4
 8002ade:	491e      	ldr	r1, [pc, #120]	; (8002b58 <wifi_server+0x180>)
 8002ae0:	f009 fabc 	bl	800c05c <siprintf>
  serialPrint(conMes);
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ffb2 	bl	8003a50 <serialPrint>

  StopServer=WebServerProcess();
 8002aec:	f000 f83c 	bl	8002b68 <WebServerProcess>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

  if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8002af6:	2000      	movs	r0, #0
 8002af8:	f001 fca4 	bl	8004444 <WIFI_CloseServerConnection>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <wifi_server+0x136>
  {
    serialPrint("ERROR: failed to close current Server connection\n\r");
 8002b02:	4816      	ldr	r0, [pc, #88]	; (8002b5c <wifi_server+0x184>)
 8002b04:	f000 ffa4 	bl	8003a50 <serialPrint>
    return -1;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	e013      	b.n	8002b36 <wifi_server+0x15e>
  }
}
while(StopServer == false);
 8002b0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002b12:	f083 0301 	eor.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1bc      	bne.n	8002a96 <wifi_server+0xbe>

if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f001 fca7 	bl	8004470 <WIFI_StopServer>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <wifi_server+0x156>
{
  serialPrint("ERROR: Cannot stop server.\n\r");
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <wifi_server+0x188>)
 8002b2a:	f000 ff91 	bl	8003a50 <serialPrint>
}

serialPrint("Server is stop\n\r");
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <wifi_server+0x18c>)
 8002b30:	f000 ff8e 	bl	8003a50 <serialPrint>
return 0;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	37d8      	adds	r7, #216	; 0xd8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0800da70 	.word	0x0800da70
 8002b44:	0800da8c 	.word	0x0800da8c
 8002b48:	0800da90 	.word	0x0800da90
 8002b4c:	20004564 	.word	0x20004564
 8002b50:	0800dab0 	.word	0x0800dab0
 8002b54:	0800db00 	.word	0x0800db00
 8002b58:	0800db2c 	.word	0x0800db2c
 8002b5c:	0800db50 	.word	0x0800db50
 8002b60:	0800db84 	.word	0x0800db84
 8002b64:	0800dba4 	.word	0x0800dba4

08002b68 <WebServerProcess>:

static bool WebServerProcess(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b092      	sub	sp, #72	; 0x48
 8002b6c:	af02      	add	r7, sp, #8

uint16_t  respLen;

static   uint8_t resp[1024];
bool    stopserver=false;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8002b74:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8002b78:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b84:	4976      	ldr	r1, [pc, #472]	; (8002d60 <WebServerProcess+0x1f8>)
 8002b86:	2000      	movs	r0, #0
 8002b88:	f001 fcac 	bl	80044e4 <WIFI_ReceiveData>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80dc 	bne.w	8002d4c <WebServerProcess+0x1e4>
{

 char getByte[40] = {0};
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	2228      	movs	r2, #40	; 0x28
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f009 f9da 	bl	800bf54 <memset>
 sprintf(getByte, "get %d byte(s) from server\n\r",respLen);
 8002ba0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	496f      	ldr	r1, [pc, #444]	; (8002d64 <WebServerProcess+0x1fc>)
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f009 fa57 	bl	800c05c <siprintf>


 if( respLen > 0)
 8002bae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80ce 	beq.w	8002d52 <WebServerProcess+0x1ea>
 {
    if(strstr((char *)resp, "GET")) /* GET: put web page */
 8002bb6:	496c      	ldr	r1, [pc, #432]	; (8002d68 <WebServerProcess+0x200>)
 8002bb8:	4869      	ldr	r0, [pc, #420]	; (8002d60 <WebServerProcess+0x1f8>)
 8002bba:	f009 faa5 	bl	800c108 <strstr>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <WebServerProcess+0x82>
    {

      if(SendWebPage( currentTemp, currentDist) != WIFI_STATUS_OK)
 8002bc4:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <WebServerProcess+0x204>)
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <WebServerProcess+0x208>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 f8e6 	bl	8002da0 <SendWebPage>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <WebServerProcess+0x7a>
      {
        serialPrint("> ERROR : Cannot send web page\n\r");
 8002bda:	4866      	ldr	r0, [pc, #408]	; (8002d74 <WebServerProcess+0x20c>)
 8002bdc:	f000 ff38 	bl	8003a50 <serialPrint>
 8002be0:	e0b7      	b.n	8002d52 <WebServerProcess+0x1ea>
      }
      else
      {
        serialPrint("Send page after  GET command\n\r");
 8002be2:	4865      	ldr	r0, [pc, #404]	; (8002d78 <WebServerProcess+0x210>)
 8002be4:	f000 ff34 	bl	8003a50 <serialPrint>
 8002be8:	e0b3      	b.n	8002d52 <WebServerProcess+0x1ea>
      }
     }
     else if(strstr((char *)resp, "POST"))/* POST: received info */
 8002bea:	4964      	ldr	r1, [pc, #400]	; (8002d7c <WebServerProcess+0x214>)
 8002bec:	485c      	ldr	r0, [pc, #368]	; (8002d60 <WebServerProcess+0x1f8>)
 8002bee:	f009 fa8b 	bl	800c108 <strstr>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80ac 	beq.w	8002d52 <WebServerProcess+0x1ea>
     {
       serialPrint("Post request\n\r");
 8002bfa:	4861      	ldr	r0, [pc, #388]	; (8002d80 <WebServerProcess+0x218>)
 8002bfc:	f000 ff28 	bl	8003a50 <serialPrint>

       int numEqs = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38

       char fenceNum[3] = "000";
 8002c04:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <WebServerProcess+0x21c>)
 8002c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	8019      	strh	r1, [r3, #0]
 8002c10:	3302      	adds	r3, #2
 8002c12:	0c12      	lsrs	r2, r2, #16
 8002c14:	701a      	strb	r2, [r3, #0]
       //
       // To fix this, if the 3rd digit is a number, the loop stores it and then replaces that value with an
       // asterisk. If a 2 digit input follows a 3 digit input, the asterisk will not be overwritten,
       // and so if this happens, we know for sure that a 2-digit input was entered, and the loop accounts for this.

      for (int i=0; i<1024; i++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1a:	e05c      	b.n	8002cd6 <WebServerProcess+0x16e>

    	  // Searching and counting the '='
    	  if (resp[i] == '=') {
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b3d      	cmp	r3, #61	; 0x3d
 8002c26:	d102      	bne.n	8002c2e <WebServerProcess+0xc6>

    		  numEqs++;
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38

    	  }

    	  // If the 7th '=' was found, the next few entries are the new fence input
    	  if (numEqs == 7) {
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d14d      	bne.n	8002cd0 <WebServerProcess+0x168>
    		  // 3-digit input is entered this will get overwritten, and if a
    		  // 2-digit number gets entered, this if statement will not get executed,
    		  // as the condition simply checks that the 3rd digit is actually a number
    		  // (remember since the response is in char form, and so we check for numbers
    		  // based on their ASCII representation
    		  if ((resp[i+3] >= 48) && (resp[i+3] <= 57)) {
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	3303      	adds	r3, #3
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c3e:	d935      	bls.n	8002cac <WebServerProcess+0x144>
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	3303      	adds	r3, #3
 8002c44:	4a46      	ldr	r2, [pc, #280]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b39      	cmp	r3, #57	; 0x39
 8002c4a:	d82f      	bhi.n	8002cac <WebServerProcess+0x144>

    			  // Store the 3rd digit, it's important
    		      fenceNum[2] = resp[i+3];
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	3303      	adds	r3, #3
 8002c50:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    		      resp[i+3] = '*';
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	3303      	adds	r3, #3
 8002c5c:	4a40      	ldr	r2, [pc, #256]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c5e:	212a      	movs	r1, #42	; 0x2a
 8002c60:	54d1      	strb	r1, [r2, r3]

    		      // Check if the first digit is a number and
    		      // store it if it is.
    		      if ((resp[i+1] >= 48) && (resp[i+1]<= 57)) {
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8002c6c:	d90b      	bls.n	8002c86 <WebServerProcess+0x11e>
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	2b39      	cmp	r3, #57	; 0x39
 8002c78:	d805      	bhi.n	8002c86 <WebServerProcess+0x11e>

    		          fenceNum[0] = resp[i+1];
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    		      }

    		      // Same for the 2nd digit
    		      if ((resp[i+2] >= 48) && (resp[i+2]<= 57)) {
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	3302      	adds	r3, #2
 8002c8a:	4a35      	ldr	r2, [pc, #212]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8002c90:	d91c      	bls.n	8002ccc <WebServerProcess+0x164>
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	3302      	adds	r3, #2
 8002c96:	4a32      	ldr	r2, [pc, #200]	; (8002d60 <WebServerProcess+0x1f8>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	2b39      	cmp	r3, #57	; 0x39
 8002c9c:	d816      	bhi.n	8002ccc <WebServerProcess+0x164>

    		          fenceNum[1] = resp[i+2];
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <WebServerProcess+0x1f8>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    		      if ((resp[i+2] >= 48) && (resp[i+2]<= 57)) {
 8002caa:	e00f      	b.n	8002ccc <WebServerProcess+0x164>
    		  else {

    			  // If the above condition fails, the input is clearly  a 2-digit number,
    			  // and so we adjust the placement of the digits to include a leading 0,
    			  // which won't affect the conversion we will run later
    		      fenceNum[0] = '0';
 8002cac:	2330      	movs	r3, #48	; 0x30
 8002cae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    		      fenceNum[1] = resp[i+1];
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <WebServerProcess+0x1f8>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    		      fenceNum[2] = resp[i+2];
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <WebServerProcess+0x1f8>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    		      break;
 8002cca:	e008      	b.n	8002cde <WebServerProcess+0x176>
    		      if ((resp[i+2] >= 48) && (resp[i+2]<= 57)) {
 8002ccc:	bf00      	nop

    		  }

    		  // Break out of the loop, we're done!
    		  break;
 8002cce:	e006      	b.n	8002cde <WebServerProcess+0x176>
      for (int i=0; i<1024; i++) {
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cdc:	db9e      	blt.n	8002c1c <WebServerProcess+0xb4>
    	  }

      }

      // Sets the new alarm distance by converting a string to a number
      alarmDist = atoi(fenceNum);
 8002cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f009 f8ee 	bl	800bec4 <atoi>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <WebServerProcess+0x220>)
 8002cec:	601a      	str	r2, [r3, #0]

       if(strstr((char *)resp, "stop_server"))
 8002cee:	4927      	ldr	r1, [pc, #156]	; (8002d8c <WebServerProcess+0x224>)
 8002cf0:	481b      	ldr	r0, [pc, #108]	; (8002d60 <WebServerProcess+0x1f8>)
 8002cf2:	f009 fa09 	bl	800c108 <strstr>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d014      	beq.n	8002d26 <WebServerProcess+0x1be>
       {
         if(strstr((char *)resp, "stop_server=0"))
 8002cfc:	4924      	ldr	r1, [pc, #144]	; (8002d90 <WebServerProcess+0x228>)
 8002cfe:	4818      	ldr	r0, [pc, #96]	; (8002d60 <WebServerProcess+0x1f8>)
 8002d00:	f009 fa02 	bl	800c108 <strstr>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <WebServerProcess+0x1aa>
         {
           stopserver = false;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002d10:	e009      	b.n	8002d26 <WebServerProcess+0x1be>
         }
         else if(strstr((char *)resp, "stop_server=1"))
 8002d12:	4920      	ldr	r1, [pc, #128]	; (8002d94 <WebServerProcess+0x22c>)
 8002d14:	4812      	ldr	r0, [pc, #72]	; (8002d60 <WebServerProcess+0x1f8>)
 8002d16:	f009 f9f7 	bl	800c108 <strstr>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <WebServerProcess+0x1be>
         {
           stopserver = true;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
         }
       }

       if(SendWebPage( currentTemp, currentDist) != WIFI_STATUS_OK)
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <WebServerProcess+0x204>)
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <WebServerProcess+0x208>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 f835 	bl	8002da0 <SendWebPage>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <WebServerProcess+0x1dc>
       {
         serialPrint("> ERROR : Cannot send web page\n\r");
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <WebServerProcess+0x20c>)
 8002d3e:	f000 fe87 	bl	8003a50 <serialPrint>
 8002d42:	e006      	b.n	8002d52 <WebServerProcess+0x1ea>
       }
       else
       {
         serialPrint("Send Page after POST command\n\r");
 8002d44:	4814      	ldr	r0, [pc, #80]	; (8002d98 <WebServerProcess+0x230>)
 8002d46:	f000 fe83 	bl	8003a50 <serialPrint>
 8002d4a:	e002      	b.n	8002d52 <WebServerProcess+0x1ea>
     }
   }
}
else
{
  serialPrint("Client close connection\n\r");
 8002d4c:	4813      	ldr	r0, [pc, #76]	; (8002d9c <WebServerProcess+0x234>)
 8002d4e:	f000 fe7f 	bl	8003a50 <serialPrint>
}
return stopserver;
 8002d52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3740      	adds	r7, #64	; 0x40
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20004570 	.word	0x20004570
 8002d64:	0800dbb8 	.word	0x0800dbb8
 8002d68:	0800dbd8 	.word	0x0800dbd8
 8002d6c:	20004568 	.word	0x20004568
 8002d70:	2000456a 	.word	0x2000456a
 8002d74:	0800dbdc 	.word	0x0800dbdc
 8002d78:	0800dc00 	.word	0x0800dc00
 8002d7c:	0800dc20 	.word	0x0800dc20
 8002d80:	0800dc28 	.word	0x0800dc28
 8002d84:	0800dca0 	.word	0x0800dca0
 8002d88:	20000198 	.word	0x20000198
 8002d8c:	0800dc38 	.word	0x0800dc38
 8002d90:	0800dc44 	.word	0x0800dc44
 8002d94:	0800dc54 	.word	0x0800dc54
 8002d98:	0800dc64 	.word	0x0800dc64
 8002d9c:	0800dc84 	.word	0x0800dc84

08002da0 <SendWebPage>:

static WIFI_Status_t SendWebPage( uint8_t temperature, uint16_t proxData)
{
 8002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da2:	b0ad      	sub	sp, #180	; 0xb4
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	4603      	mov	r3, r0
 8002da8:	460a      	mov	r2, r1
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80bb      	strh	r3, [r7, #4]
uint8_t  temp[50];
char proxMes[50] = {0};
 8002db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002db4:	2232      	movs	r2, #50	; 0x32
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f009 f8cb 	bl	800bf54 <memset>
char fenceMes[50] = {0};
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	2232      	movs	r2, #50	; 0x32
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f009 f8c4 	bl	800bf54 <memset>
uint16_t SentDataLength;
WIFI_Status_t ret;


// construct web page content
strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8002dcc:	4abc      	ldr	r2, [pc, #752]	; (80030c0 <SendWebPage+0x320>)
 8002dce:	4bbd      	ldr	r3, [pc, #756]	; (80030c4 <SendWebPage+0x324>)
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002de4:	c407      	stmia	r4!, {r0, r1, r2}
 8002de6:	8023      	strh	r3, [r4, #0]
 8002de8:	3402      	adds	r4, #2
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	7023      	strb	r3, [r4, #0]
strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8002dee:	48b4      	ldr	r0, [pc, #720]	; (80030c0 <SendWebPage+0x320>)
 8002df0:	f7fd f9ee 	bl	80001d0 <strlen>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4bb1      	ldr	r3, [pc, #708]	; (80030c0 <SendWebPage+0x320>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4ab2      	ldr	r2, [pc, #712]	; (80030c8 <SendWebPage+0x328>)
 8002dfe:	461d      	mov	r5, r3
 8002e00:	4614      	mov	r4, r2
 8002e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e04:	6028      	str	r0, [r5, #0]
 8002e06:	6069      	str	r1, [r5, #4]
 8002e08:	60aa      	str	r2, [r5, #8]
 8002e0a:	60eb      	str	r3, [r5, #12]
 8002e0c:	7823      	ldrb	r3, [r4, #0]
 8002e0e:	742b      	strb	r3, [r5, #16]

// Set up automatic refresh. This is so the newest values for temperature and
// proximity are (at least somewhat) recent
strcat((char *)http, (char *)"<meta http-equiv=\"refresh\" content=\"5\">");
 8002e10:	48ab      	ldr	r0, [pc, #684]	; (80030c0 <SendWebPage+0x320>)
 8002e12:	f7fd f9dd 	bl	80001d0 <strlen>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4ba9      	ldr	r3, [pc, #676]	; (80030c0 <SendWebPage+0x320>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4aab      	ldr	r2, [pc, #684]	; (80030cc <SendWebPage+0x32c>)
 8002e20:	4614      	mov	r4, r2
 8002e22:	469c      	mov	ip, r3
 8002e24:	f104 0e20 	add.w	lr, r4, #32
 8002e28:	4665      	mov	r5, ip
 8002e2a:	4626      	mov	r6, r4
 8002e2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e2e:	6028      	str	r0, [r5, #0]
 8002e30:	6069      	str	r1, [r5, #4]
 8002e32:	60aa      	str	r2, [r5, #8]
 8002e34:	60eb      	str	r3, [r5, #12]
 8002e36:	3410      	adds	r4, #16
 8002e38:	f10c 0c10 	add.w	ip, ip, #16
 8002e3c:	4574      	cmp	r4, lr
 8002e3e:	d1f3      	bne.n	8002e28 <SendWebPage+0x88>
 8002e40:	4662      	mov	r2, ip
 8002e42:	4623      	mov	r3, r4
 8002e44:	cb03      	ldmia	r3!, {r0, r1}
 8002e46:	6010      	str	r0, [r2, #0]
 8002e48:	6051      	str	r1, [r2, #4]

// Center the text for heading 2 (h2) and 3 (h3)
strcat((char *)http, (char *)"<style>");
 8002e4a:	489d      	ldr	r0, [pc, #628]	; (80030c0 <SendWebPage+0x320>)
 8002e4c:	f7fd f9c0 	bl	80001d0 <strlen>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b9a      	ldr	r3, [pc, #616]	; (80030c0 <SendWebPage+0x320>)
 8002e56:	4413      	add	r3, r2
 8002e58:	499d      	ldr	r1, [pc, #628]	; (80030d0 <SendWebPage+0x330>)
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	cb03      	ldmia	r3!, {r0, r1}
 8002e60:	6010      	str	r0, [r2, #0]
 8002e62:	6051      	str	r1, [r2, #4]
strcat((char *)http, (char *)"h2 {text-align: center;}");
 8002e64:	4896      	ldr	r0, [pc, #600]	; (80030c0 <SendWebPage+0x320>)
 8002e66:	f7fd f9b3 	bl	80001d0 <strlen>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b94      	ldr	r3, [pc, #592]	; (80030c0 <SendWebPage+0x320>)
 8002e70:	4413      	add	r3, r2
 8002e72:	4a98      	ldr	r2, [pc, #608]	; (80030d4 <SendWebPage+0x334>)
 8002e74:	461d      	mov	r5, r3
 8002e76:	4614      	mov	r4, r2
 8002e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7a:	6028      	str	r0, [r5, #0]
 8002e7c:	6069      	str	r1, [r5, #4]
 8002e7e:	60aa      	str	r2, [r5, #8]
 8002e80:	60eb      	str	r3, [r5, #12]
 8002e82:	cc03      	ldmia	r4!, {r0, r1}
 8002e84:	6128      	str	r0, [r5, #16]
 8002e86:	6169      	str	r1, [r5, #20]
 8002e88:	7823      	ldrb	r3, [r4, #0]
 8002e8a:	762b      	strb	r3, [r5, #24]
strcat((char *)http, (char *)"h3 {text-align: center;}");
 8002e8c:	488c      	ldr	r0, [pc, #560]	; (80030c0 <SendWebPage+0x320>)
 8002e8e:	f7fd f99f 	bl	80001d0 <strlen>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <SendWebPage+0x320>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a8f      	ldr	r2, [pc, #572]	; (80030d8 <SendWebPage+0x338>)
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea2:	6028      	str	r0, [r5, #0]
 8002ea4:	6069      	str	r1, [r5, #4]
 8002ea6:	60aa      	str	r2, [r5, #8]
 8002ea8:	60eb      	str	r3, [r5, #12]
 8002eaa:	cc03      	ldmia	r4!, {r0, r1}
 8002eac:	6128      	str	r0, [r5, #16]
 8002eae:	6169      	str	r1, [r5, #20]
 8002eb0:	7823      	ldrb	r3, [r4, #0]
 8002eb2:	762b      	strb	r3, [r5, #24]
strcat((char *)http, (char *)"</style>");
 8002eb4:	4882      	ldr	r0, [pc, #520]	; (80030c0 <SendWebPage+0x320>)
 8002eb6:	f7fd f98b 	bl	80001d0 <strlen>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b80      	ldr	r3, [pc, #512]	; (80030c0 <SendWebPage+0x320>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4986      	ldr	r1, [pc, #536]	; (80030dc <SendWebPage+0x33c>)
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	cb03      	ldmia	r3!, {r0, r1}
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	6051      	str	r1, [r2, #4]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	7213      	strb	r3, [r2, #8]

// The title of the webpage and a nice strong header
strcat((char *)http, (char *)"<title>Proximity Security System</title>\r\n");
 8002ed2:	487b      	ldr	r0, [pc, #492]	; (80030c0 <SendWebPage+0x320>)
 8002ed4:	f7fd f97c 	bl	80001d0 <strlen>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <SendWebPage+0x320>)
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a7f      	ldr	r2, [pc, #508]	; (80030e0 <SendWebPage+0x340>)
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	469c      	mov	ip, r3
 8002ee6:	f104 0e20 	add.w	lr, r4, #32
 8002eea:	4665      	mov	r5, ip
 8002eec:	4626      	mov	r6, r4
 8002eee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ef0:	6028      	str	r0, [r5, #0]
 8002ef2:	6069      	str	r1, [r5, #4]
 8002ef4:	60aa      	str	r2, [r5, #8]
 8002ef6:	60eb      	str	r3, [r5, #12]
 8002ef8:	3410      	adds	r4, #16
 8002efa:	f10c 0c10 	add.w	ip, ip, #16
 8002efe:	4574      	cmp	r4, lr
 8002f00:	d1f3      	bne.n	8002eea <SendWebPage+0x14a>
 8002f02:	4662      	mov	r2, ip
 8002f04:	4623      	mov	r3, r4
 8002f06:	cb03      	ldmia	r3!, {r0, r1}
 8002f08:	6010      	str	r0, [r2, #0]
 8002f0a:	6051      	str	r1, [r2, #4]
 8002f0c:	8819      	ldrh	r1, [r3, #0]
 8002f0e:	789b      	ldrb	r3, [r3, #2]
 8002f10:	8111      	strh	r1, [r2, #8]
 8002f12:	7293      	strb	r3, [r2, #10]
strcat((char *)http, (char *)"<h2>STM32 Proximity Security System Control Panel</h2>\r\n");
 8002f14:	486a      	ldr	r0, [pc, #424]	; (80030c0 <SendWebPage+0x320>)
 8002f16:	f7fd f95b 	bl	80001d0 <strlen>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <SendWebPage+0x320>)
 8002f20:	4413      	add	r3, r2
 8002f22:	4a70      	ldr	r2, [pc, #448]	; (80030e4 <SendWebPage+0x344>)
 8002f24:	4614      	mov	r4, r2
 8002f26:	469c      	mov	ip, r3
 8002f28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002f2c:	4665      	mov	r5, ip
 8002f2e:	4626      	mov	r6, r4
 8002f30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	6069      	str	r1, [r5, #4]
 8002f36:	60aa      	str	r2, [r5, #8]
 8002f38:	60eb      	str	r3, [r5, #12]
 8002f3a:	3410      	adds	r4, #16
 8002f3c:	f10c 0c10 	add.w	ip, ip, #16
 8002f40:	4574      	cmp	r4, lr
 8002f42:	d1f3      	bne.n	8002f2c <SendWebPage+0x18c>
 8002f44:	4662      	mov	r2, ip
 8002f46:	4623      	mov	r3, r4
 8002f48:	cb03      	ldmia	r3!, {r0, r1}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	6051      	str	r1, [r2, #4]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	7213      	strb	r3, [r2, #8]
// that alerts the user about the triggered alarm
//
// Also changes the background to a scary-looking red
//
// If this check fails, set the  background to a professional-gray
if (alarm == true) {
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <SendWebPage+0x348>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <SendWebPage+0x228>

	strcat((char *)http, (char *)"<h3>WARNING!!! ALARM HAS BEEN TRIGGERED!</h3>\r\n");
 8002f5a:	4859      	ldr	r0, [pc, #356]	; (80030c0 <SendWebPage+0x320>)
 8002f5c:	f7fd f938 	bl	80001d0 <strlen>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <SendWebPage+0x320>)
 8002f66:	4413      	add	r3, r2
 8002f68:	4a60      	ldr	r2, [pc, #384]	; (80030ec <SendWebPage+0x34c>)
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	469c      	mov	ip, r3
 8002f6e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002f72:	4665      	mov	r5, ip
 8002f74:	4626      	mov	r6, r4
 8002f76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f78:	6028      	str	r0, [r5, #0]
 8002f7a:	6069      	str	r1, [r5, #4]
 8002f7c:	60aa      	str	r2, [r5, #8]
 8002f7e:	60eb      	str	r3, [r5, #12]
 8002f80:	3410      	adds	r4, #16
 8002f82:	f10c 0c10 	add.w	ip, ip, #16
 8002f86:	4574      	cmp	r4, lr
 8002f88:	d1f3      	bne.n	8002f72 <SendWebPage+0x1d2>
	strcat((char *)http, (char *)"<body style=\"background-color:red;\">");
 8002f8a:	484d      	ldr	r0, [pc, #308]	; (80030c0 <SendWebPage+0x320>)
 8002f8c:	f7fd f920 	bl	80001d0 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <SendWebPage+0x320>)
 8002f96:	4413      	add	r3, r2
 8002f98:	4a55      	ldr	r2, [pc, #340]	; (80030f0 <SendWebPage+0x350>)
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	469c      	mov	ip, r3
 8002f9e:	f104 0e20 	add.w	lr, r4, #32
 8002fa2:	4665      	mov	r5, ip
 8002fa4:	4626      	mov	r6, r4
 8002fa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fa8:	6028      	str	r0, [r5, #0]
 8002faa:	6069      	str	r1, [r5, #4]
 8002fac:	60aa      	str	r2, [r5, #8]
 8002fae:	60eb      	str	r3, [r5, #12]
 8002fb0:	3410      	adds	r4, #16
 8002fb2:	f10c 0c10 	add.w	ip, ip, #16
 8002fb6:	4574      	cmp	r4, lr
 8002fb8:	d1f3      	bne.n	8002fa2 <SendWebPage+0x202>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6810      	ldr	r0, [r2, #0]
 8002fc0:	6018      	str	r0, [r3, #0]
 8002fc2:	7912      	ldrb	r2, [r2, #4]
 8002fc4:	711a      	strb	r2, [r3, #4]
 8002fc6:	e01d      	b.n	8003004 <SendWebPage+0x264>
}

else {

	strcat((char *)http, (char *)"<body style=\"background-color:grey;\">");
 8002fc8:	483d      	ldr	r0, [pc, #244]	; (80030c0 <SendWebPage+0x320>)
 8002fca:	f7fd f901 	bl	80001d0 <strlen>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <SendWebPage+0x320>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a47      	ldr	r2, [pc, #284]	; (80030f4 <SendWebPage+0x354>)
 8002fd8:	4614      	mov	r4, r2
 8002fda:	469c      	mov	ip, r3
 8002fdc:	f104 0e20 	add.w	lr, r4, #32
 8002fe0:	4665      	mov	r5, ip
 8002fe2:	4626      	mov	r6, r4
 8002fe4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fe6:	6028      	str	r0, [r5, #0]
 8002fe8:	6069      	str	r1, [r5, #4]
 8002fea:	60aa      	str	r2, [r5, #8]
 8002fec:	60eb      	str	r3, [r5, #12]
 8002fee:	3410      	adds	r4, #16
 8002ff0:	f10c 0c10 	add.w	ip, ip, #16
 8002ff4:	4574      	cmp	r4, lr
 8002ff6:	d1f3      	bne.n	8002fe0 <SendWebPage+0x240>
 8002ff8:	4663      	mov	r3, ip
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	6810      	ldr	r0, [r2, #0]
 8002ffe:	6018      	str	r0, [r3, #0]
 8003000:	8892      	ldrh	r2, [r2, #4]
 8003002:	809a      	strh	r2, [r3, #4]

}


strcat((char *)http, (char *)"<br /><hr>\r\n");
 8003004:	482e      	ldr	r0, [pc, #184]	; (80030c0 <SendWebPage+0x320>)
 8003006:	f7fd f8e3 	bl	80001d0 <strlen>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <SendWebPage+0x320>)
 8003010:	4413      	add	r3, r2
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <SendWebPage+0x358>)
 8003014:	461c      	mov	r4, r3
 8003016:	4613      	mov	r3, r2
 8003018:	cb07      	ldmia	r3!, {r0, r1, r2}
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	6061      	str	r1, [r4, #4]
 800301e:	60a2      	str	r2, [r4, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	7323      	strb	r3, [r4, #12]

// Nice header for the live readings
strcat((char *)http, (char *)"<p style=\"text-decoration: underline;\"><strong>Live Readings</strong></p>");
 8003024:	4826      	ldr	r0, [pc, #152]	; (80030c0 <SendWebPage+0x320>)
 8003026:	f7fd f8d3 	bl	80001d0 <strlen>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <SendWebPage+0x320>)
 8003030:	4413      	add	r3, r2
 8003032:	4a32      	ldr	r2, [pc, #200]	; (80030fc <SendWebPage+0x35c>)
 8003034:	4618      	mov	r0, r3
 8003036:	4611      	mov	r1, r2
 8003038:	234a      	movs	r3, #74	; 0x4a
 800303a:	461a      	mov	r2, r3
 800303c:	f008 ff7f 	bl	800bf3e <memcpy>

*/

// Printing the temperature, use an input form for the text display as it ensures a white background for the
// readings, which won't be affected by background color changes
strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Current Temperature: <input type=\"text\" value=\"");
 8003040:	481f      	ldr	r0, [pc, #124]	; (80030c0 <SendWebPage+0x320>)
 8003042:	f7fd f8c5 	bl	80001d0 <strlen>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <SendWebPage+0x320>)
 800304c:	4413      	add	r3, r2
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <SendWebPage+0x360>)
 8003050:	4618      	mov	r0, r3
 8003052:	4611      	mov	r1, r2
 8003054:	234f      	movs	r3, #79	; 0x4f
 8003056:	461a      	mov	r2, r3
 8003058:	f008 ff71 	bl	800bf3e <memcpy>
sprintf((char *)temp, "%d", temperature);
 800305c:	79fa      	ldrb	r2, [r7, #7]
 800305e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003062:	4928      	ldr	r1, [pc, #160]	; (8003104 <SendWebPage+0x364>)
 8003064:	4618      	mov	r0, r3
 8003066:	f008 fff9 	bl	800c05c <siprintf>
strcat((char *)http, (char *)temp);
 800306a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800306e:	4619      	mov	r1, r3
 8003070:	4813      	ldr	r0, [pc, #76]	; (80030c0 <SendWebPage+0x320>)
 8003072:	f009 f813 	bl	800c09c <strcat>
strcat((char *)http, (char *)"\"> <sup>O</sup>F");
 8003076:	4812      	ldr	r0, [pc, #72]	; (80030c0 <SendWebPage+0x320>)
 8003078:	f7fd f8aa 	bl	80001d0 <strlen>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <SendWebPage+0x320>)
 8003082:	4413      	add	r3, r2
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <SendWebPage+0x368>)
 8003086:	461d      	mov	r5, r3
 8003088:	4614      	mov	r4, r2
 800308a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308c:	6028      	str	r0, [r5, #0]
 800308e:	6069      	str	r1, [r5, #4]
 8003090:	60aa      	str	r2, [r5, #8]
 8003092:	60eb      	str	r3, [r5, #12]
 8003094:	7823      	ldrb	r3, [r4, #0]
 8003096:	742b      	strb	r3, [r5, #16]

// Object too far to measure accurately, say that there is no object
if (proxData > 2000) {
 8003098:	88bb      	ldrh	r3, [r7, #4]
 800309a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800309e:	d937      	bls.n	8003110 <SendWebPage+0x370>

	  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Object Distance: <input type=\"text\" value=\"No Object Detected!\"");
 80030a0:	4807      	ldr	r0, [pc, #28]	; (80030c0 <SendWebPage+0x320>)
 80030a2:	f7fd f895 	bl	80001d0 <strlen>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <SendWebPage+0x320>)
 80030ac:	4413      	add	r3, r2
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <SendWebPage+0x36c>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	4611      	mov	r1, r2
 80030b4:	235f      	movs	r3, #95	; 0x5f
 80030b6:	461a      	mov	r2, r3
 80030b8:	f008 ff41 	bl	800bf3e <memcpy>
 80030bc:	e04f      	b.n	800315e <SendWebPage+0x3be>
 80030be:	bf00      	nop
 80030c0:	20000564 	.word	0x20000564
 80030c4:	0800dca4 	.word	0x0800dca4
 80030c8:	0800dce4 	.word	0x0800dce4
 80030cc:	0800dcf8 	.word	0x0800dcf8
 80030d0:	0800dd20 	.word	0x0800dd20
 80030d4:	0800dd28 	.word	0x0800dd28
 80030d8:	0800dd44 	.word	0x0800dd44
 80030dc:	0800dd60 	.word	0x0800dd60
 80030e0:	0800dd6c 	.word	0x0800dd6c
 80030e4:	0800dd98 	.word	0x0800dd98
 80030e8:	2000456c 	.word	0x2000456c
 80030ec:	0800ddd4 	.word	0x0800ddd4
 80030f0:	0800de04 	.word	0x0800de04
 80030f4:	0800de2c 	.word	0x0800de2c
 80030f8:	0800de54 	.word	0x0800de54
 80030fc:	0800de64 	.word	0x0800de64
 8003100:	0800deb0 	.word	0x0800deb0
 8003104:	0800df00 	.word	0x0800df00
 8003108:	0800df04 	.word	0x0800df04
 800310c:	0800df18 	.word	0x0800df18
}

else {

	  // Otherwise, display the current proximity data
	  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Object Distance: <input type=\"text\" value=\"");
 8003110:	4884      	ldr	r0, [pc, #528]	; (8003324 <SendWebPage+0x584>)
 8003112:	f7fd f85d 	bl	80001d0 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4b82      	ldr	r3, [pc, #520]	; (8003324 <SendWebPage+0x584>)
 800311c:	4413      	add	r3, r2
 800311e:	4a82      	ldr	r2, [pc, #520]	; (8003328 <SendWebPage+0x588>)
 8003120:	4618      	mov	r0, r3
 8003122:	4611      	mov	r1, r2
 8003124:	234b      	movs	r3, #75	; 0x4b
 8003126:	461a      	mov	r2, r3
 8003128:	f008 ff09 	bl	800bf3e <memcpy>
	  sprintf((char *)proxMes, "%d", proxData);
 800312c:	88ba      	ldrh	r2, [r7, #4]
 800312e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003132:	497e      	ldr	r1, [pc, #504]	; (800332c <SendWebPage+0x58c>)
 8003134:	4618      	mov	r0, r3
 8003136:	f008 ff91 	bl	800c05c <siprintf>
	  strcat((char *)http, (char *)proxMes);
 800313a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800313e:	4619      	mov	r1, r3
 8003140:	4878      	ldr	r0, [pc, #480]	; (8003324 <SendWebPage+0x584>)
 8003142:	f008 ffab 	bl	800c09c <strcat>
	  strcat((char *)http, (char *)"\"> mm");
 8003146:	4877      	ldr	r0, [pc, #476]	; (8003324 <SendWebPage+0x584>)
 8003148:	f7fd f842 	bl	80001d0 <strlen>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <SendWebPage+0x584>)
 8003152:	4413      	add	r3, r2
 8003154:	4a76      	ldr	r2, [pc, #472]	; (8003330 <SendWebPage+0x590>)
 8003156:	6810      	ldr	r0, [r2, #0]
 8003158:	6018      	str	r0, [r3, #0]
 800315a:	8892      	ldrh	r2, [r2, #4]
 800315c:	809a      	strh	r2, [r3, #4]

}

// Nice header for the security settings
strcat((char *)http, (char *)"<p> </p>");
 800315e:	4871      	ldr	r0, [pc, #452]	; (8003324 <SendWebPage+0x584>)
 8003160:	f7fd f836 	bl	80001d0 <strlen>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b6e      	ldr	r3, [pc, #440]	; (8003324 <SendWebPage+0x584>)
 800316a:	4413      	add	r3, r2
 800316c:	4971      	ldr	r1, [pc, #452]	; (8003334 <SendWebPage+0x594>)
 800316e:	461a      	mov	r2, r3
 8003170:	460b      	mov	r3, r1
 8003172:	cb03      	ldmia	r3!, {r0, r1}
 8003174:	6010      	str	r0, [r2, #0]
 8003176:	6051      	str	r1, [r2, #4]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	7213      	strb	r3, [r2, #8]
strcat((char *)http, (char *)"<p style=\"text-decoration: underline;\"><strong>Security Settings</strong></p>");
 800317c:	4869      	ldr	r0, [pc, #420]	; (8003324 <SendWebPage+0x584>)
 800317e:	f7fd f827 	bl	80001d0 <strlen>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <SendWebPage+0x584>)
 8003188:	4413      	add	r3, r2
 800318a:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <SendWebPage+0x598>)
 800318c:	4618      	mov	r0, r3
 800318e:	4611      	mov	r1, r2
 8003190:	234e      	movs	r3, #78	; 0x4e
 8003192:	461a      	mov	r2, r3
 8003194:	f008 fed3 	bl	800bf3e <memcpy>
strcat((char *)http, (char *)"<p> </p>");
 8003198:	4862      	ldr	r0, [pc, #392]	; (8003324 <SendWebPage+0x584>)
 800319a:	f7fd f819 	bl	80001d0 <strlen>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <SendWebPage+0x584>)
 80031a4:	4413      	add	r3, r2
 80031a6:	4963      	ldr	r1, [pc, #396]	; (8003334 <SendWebPage+0x594>)
 80031a8:	461a      	mov	r2, r3
 80031aa:	460b      	mov	r3, r1
 80031ac:	cb03      	ldmia	r3!, {r0, r1}
 80031ae:	6010      	str	r0, [r2, #0]
 80031b0:	6051      	str	r1, [r2, #4]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	7213      	strb	r3, [r2, #8]

// Input form for the new proximity distance
strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Current Proximity Fence: <input type=\"text\" value=\"");
 80031b6:	485b      	ldr	r0, [pc, #364]	; (8003324 <SendWebPage+0x584>)
 80031b8:	f7fd f80a 	bl	80001d0 <strlen>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <SendWebPage+0x584>)
 80031c2:	4413      	add	r3, r2
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <SendWebPage+0x59c>)
 80031c6:	4618      	mov	r0, r3
 80031c8:	4611      	mov	r1, r2
 80031ca:	2353      	movs	r3, #83	; 0x53
 80031cc:	461a      	mov	r2, r3
 80031ce:	f008 feb6 	bl	800bf3e <memcpy>
sprintf((char *)fenceMes, "%d", alarmDist);
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <SendWebPage+0x5a0>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4954      	ldr	r1, [pc, #336]	; (800332c <SendWebPage+0x58c>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f008 ff3d 	bl	800c05c <siprintf>
strcat((char *)http, (char *)fenceMes);
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	4619      	mov	r1, r3
 80031e8:	484e      	ldr	r0, [pc, #312]	; (8003324 <SendWebPage+0x584>)
 80031ea:	f008 ff57 	bl	800c09c <strcat>
strcat((char *)http, (char *)"\"> mm");
 80031ee:	484d      	ldr	r0, [pc, #308]	; (8003324 <SendWebPage+0x584>)
 80031f0:	f7fc ffee 	bl	80001d0 <strlen>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <SendWebPage+0x584>)
 80031fa:	4413      	add	r3, r2
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <SendWebPage+0x590>)
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	6018      	str	r0, [r3, #0]
 8003202:	8892      	ldrh	r2, [r2, #4]
 8003204:	809a      	strh	r2, [r3, #4]

// Just a nice separator
strcat((char *)http, (char *)"<p> </p>");
 8003206:	4847      	ldr	r0, [pc, #284]	; (8003324 <SendWebPage+0x584>)
 8003208:	f7fc ffe2 	bl	80001d0 <strlen>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	4b44      	ldr	r3, [pc, #272]	; (8003324 <SendWebPage+0x584>)
 8003212:	4413      	add	r3, r2
 8003214:	4947      	ldr	r1, [pc, #284]	; (8003334 <SendWebPage+0x594>)
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	cb03      	ldmia	r3!, {r0, r1}
 800321c:	6010      	str	r0, [r2, #0]
 800321e:	6051      	str	r1, [r2, #4]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	7213      	strb	r3, [r2, #8]

// Input for the new fence number
strcat((char *)http, (char *)"<label for=\"fenceNum\"><strong>New Proximity Fence: </strong></label>");
 8003224:	483f      	ldr	r0, [pc, #252]	; (8003324 <SendWebPage+0x584>)
 8003226:	f7fc ffd3 	bl	80001d0 <strlen>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <SendWebPage+0x584>)
 8003230:	4413      	add	r3, r2
 8003232:	4a44      	ldr	r2, [pc, #272]	; (8003344 <SendWebPage+0x5a4>)
 8003234:	4618      	mov	r0, r3
 8003236:	4611      	mov	r1, r2
 8003238:	2345      	movs	r3, #69	; 0x45
 800323a:	461a      	mov	r2, r3
 800323c:	f008 fe7f 	bl	800bf3e <memcpy>
strcat((char *)http, (char *)"<input type=\"text\" id=\"fenceNum\" name=\"fenceNum\"><br><br>");
 8003240:	4838      	ldr	r0, [pc, #224]	; (8003324 <SendWebPage+0x584>)
 8003242:	f7fc ffc5 	bl	80001d0 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <SendWebPage+0x584>)
 800324c:	4413      	add	r3, r2
 800324e:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <SendWebPage+0x5a8>)
 8003250:	4614      	mov	r4, r2
 8003252:	469c      	mov	ip, r3
 8003254:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003258:	4665      	mov	r5, ip
 800325a:	4626      	mov	r6, r4
 800325c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6069      	str	r1, [r5, #4]
 8003262:	60aa      	str	r2, [r5, #8]
 8003264:	60eb      	str	r3, [r5, #12]
 8003266:	3410      	adds	r4, #16
 8003268:	f10c 0c10 	add.w	ip, ip, #16
 800326c:	4574      	cmp	r4, lr
 800326e:	d1f3      	bne.n	8003258 <SendWebPage+0x4b8>
 8003270:	4662      	mov	r2, ip
 8003272:	4623      	mov	r3, r4
 8003274:	cb03      	ldmia	r3!, {r0, r1}
 8003276:	6010      	str	r0, [r2, #0]
 8003278:	6051      	str	r1, [r2, #4]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	8113      	strh	r3, [r2, #8]

// Submit button
strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 800327e:	4829      	ldr	r0, [pc, #164]	; (8003324 <SendWebPage+0x584>)
 8003280:	f7fc ffa6 	bl	80001d0 <strlen>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <SendWebPage+0x584>)
 800328a:	4413      	add	r3, r2
 800328c:	4a2f      	ldr	r2, [pc, #188]	; (800334c <SendWebPage+0x5ac>)
 800328e:	4614      	mov	r4, r2
 8003290:	469c      	mov	ip, r3
 8003292:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003296:	4665      	mov	r5, ip
 8003298:	4626      	mov	r6, r4
 800329a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800329c:	6028      	str	r0, [r5, #0]
 800329e:	6069      	str	r1, [r5, #4]
 80032a0:	60aa      	str	r2, [r5, #8]
 80032a2:	60eb      	str	r3, [r5, #12]
 80032a4:	3410      	adds	r4, #16
 80032a6:	f10c 0c10 	add.w	ip, ip, #16
 80032aa:	4574      	cmp	r4, lr
 80032ac:	d1f3      	bne.n	8003296 <SendWebPage+0x4f6>

// End the page
strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 80032ae:	481d      	ldr	r0, [pc, #116]	; (8003324 <SendWebPage+0x584>)
 80032b0:	f7fc ff8e 	bl	80001d0 <strlen>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <SendWebPage+0x584>)
 80032ba:	4413      	add	r3, r2
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <SendWebPage+0x5b0>)
 80032be:	461d      	mov	r5, r3
 80032c0:	4614      	mov	r4, r2
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	6028      	str	r0, [r5, #0]
 80032c6:	6069      	str	r1, [r5, #4]
 80032c8:	60aa      	str	r2, [r5, #8]
 80032ca:	60eb      	str	r3, [r5, #12]
 80032cc:	8823      	ldrh	r3, [r4, #0]
 80032ce:	78a2      	ldrb	r2, [r4, #2]
 80032d0:	822b      	strh	r3, [r5, #16]
 80032d2:	4613      	mov	r3, r2
 80032d4:	74ab      	strb	r3, [r5, #18]

// Send the page off
ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 80032d6:	4813      	ldr	r0, [pc, #76]	; (8003324 <SendWebPage+0x584>)
 80032d8:	f7fc ff7a 	bl	80001d0 <strlen>
 80032dc:	4603      	mov	r3, r0
 80032de:	b29a      	uxth	r2, r3
 80032e0:	f107 010a 	add.w	r1, r7, #10
 80032e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	460b      	mov	r3, r1
 80032ec:	490d      	ldr	r1, [pc, #52]	; (8003324 <SendWebPage+0x584>)
 80032ee:	2000      	movs	r0, #0
 80032f0:	f001 f8d6 	bl	80044a0 <WIFI_SendData>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 80032fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <SendWebPage+0x578>
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	461c      	mov	r4, r3
 8003306:	4807      	ldr	r0, [pc, #28]	; (8003324 <SendWebPage+0x584>)
 8003308:	f7fc ff62 	bl	80001d0 <strlen>
 800330c:	4603      	mov	r3, r0
 800330e:	429c      	cmp	r4, r3
 8003310:	d002      	beq.n	8003318 <SendWebPage+0x578>
{
  ret = WIFI_STATUS_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
}

return ret;
 8003318:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800331c:	4618      	mov	r0, r3
 800331e:	37ac      	adds	r7, #172	; 0xac
 8003320:	46bd      	mov	sp, r7
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003324:	20000564 	.word	0x20000564
 8003328:	0800df78 	.word	0x0800df78
 800332c:	0800df00 	.word	0x0800df00
 8003330:	0800dfc4 	.word	0x0800dfc4
 8003334:	0800dfcc 	.word	0x0800dfcc
 8003338:	0800dfd8 	.word	0x0800dfd8
 800333c:	0800e028 	.word	0x0800e028
 8003340:	20000198 	.word	0x20000198
 8003344:	0800e07c 	.word	0x0800e07c
 8003348:	0800e0c4 	.word	0x0800e0c4
 800334c:	0800e100 	.word	0x0800e100
 8003350:	0800e130 	.word	0x0800e130

08003354 <VL53L0X_PROXIMITY_Init>:

static void VL53L0X_PROXIMITY_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0

// Initialize I2C interface
SENSOR_IO_Init();
 8003358:	f000 fd26 	bl	8003da8 <SENSOR_IO_Init>

	// Initialize pins for TOF
VL53L0X_PROXIMITY_MspInit();
 800335c:	f000 f818 	bl	8003390 <VL53L0X_PROXIMITY_MspInit>

// One-time TOF device initialization
VL53L0X_DataInit(&Dev);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <VL53L0X_PROXIMITY_Init+0x18>)
 8003362:	f001 f8f5 	bl	8004550 <VL53L0X_DataInit>

}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000010 	.word	0x20000010

08003370 <VL53L0X_PROXIMITY_GetDistance>:


static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
VL53L0X_RangingMeasurementData_t RangingMeasurementData;

VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4804      	ldr	r0, [pc, #16]	; (800338c <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 800337c:	f002 f88a 	bl	8005494 <VL53L0X_PerformSingleRangingMeasurement>

return RangingMeasurementData.RangeMilliMeter;
 8003380:	89bb      	ldrh	r3, [r7, #12]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000010 	.word	0x20000010

08003390 <VL53L0X_PROXIMITY_MspInit>:

/**
* @brief  VL53L0X proximity sensor Msp Initialization.
*/
static void VL53L0X_PROXIMITY_MspInit(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct;

// Configure GPIO pin : VL53L0X_XSHUT_Pin
GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	607b      	str	r3, [r7, #4]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339e:	2301      	movs	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a2:	2302      	movs	r3, #2
 80033a4:	613b      	str	r3, [r7, #16]
HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4808      	ldr	r0, [pc, #32]	; (80033cc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 80033ac:	f003 fe6a 	bl	8007084 <HAL_GPIO_Init>

HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80033b0:	2201      	movs	r2, #1
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	4805      	ldr	r0, [pc, #20]	; (80033cc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 80033b6:	f004 f825 	bl	8007404 <HAL_GPIO_WritePin>

HAL_Delay(1000);
 80033ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033be:	f003 fced 	bl	8006d9c <HAL_Delay>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	48000800 	.word	0x48000800

080033d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
switch (GPIO_Pin)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_EXTI_Callback+0x18>
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_EXTI_Callback+0x1e>
      	alarm = false;

  	}
  default:
  {
    break;
 80033e6:	e005      	b.n	80033f4 <HAL_GPIO_EXTI_Callback+0x24>
    SPI_WIFI_ISR();
 80033e8:	f7ff f95c 	bl	80026a4 <SPI_WIFI_ISR>
    break;
 80033ec:	e003      	b.n	80033f6 <HAL_GPIO_EXTI_Callback+0x26>
      	alarm = false;
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_GPIO_EXTI_Callback+0x30>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
    break;
 80033f4:	bf00      	nop
  }
}
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000456c 	.word	0x2000456c

08003404 <SPI3_IRQHandler>:
* @brief  SPI3 line detection callback.
* @param  None
* @retval None
*/
void SPI3_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
HAL_SPI_IRQHandler(&hspi);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <SPI3_IRQHandler+0x10>)
 800340a:	f007 f8e1 	bl	800a5d0 <HAL_SPI_IRQHandler>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20004980 	.word	0x20004980

08003418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0b8      	sub	sp, #224	; 0xe0
 800341c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003422:	2244      	movs	r2, #68	; 0x44
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f008 fd94 	bl	800bf54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800342c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800343c:	463b      	mov	r3, r7
 800343e:	2288      	movs	r2, #136	; 0x88
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f008 fd86 	bl	800bf54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003448:	2310      	movs	r3, #16
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800344e:	2301      	movs	r3, #1
 8003450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800345a:	2360      	movs	r3, #96	; 0x60
 800345c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003460:	2302      	movs	r3, #2
 8003462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003466:	2301      	movs	r3, #1
 8003468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800346c:	2301      	movs	r3, #1
 800346e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003472:	2328      	movs	r3, #40	; 0x28
 8003474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003478:	2307      	movs	r3, #7
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800348a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800348e:	4618      	mov	r0, r3
 8003490:	f005 f824 	bl	80084dc <HAL_RCC_OscConfig>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800349a:	f000 fb47 	bl	8003b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800349e:	230f      	movs	r3, #15
 80034a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034a4:	2303      	movs	r3, #3
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80034c0:	2104      	movs	r1, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 fbf0 	bl	8008ca8 <HAL_RCC_ClockConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80034ce:	f000 fb2d 	bl	8003b2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034d6:	2300      	movs	r3, #0
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034da:	463b      	mov	r3, r7
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 fde7 	bl	80090b0 <HAL_RCCEx_PeriphCLKConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80034e8:	f000 fb20 	bl	8003b2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80034ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034f0:	f004 ff9e 	bl	8008430 <HAL_PWREx_ControlVoltageScaling>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80034fa:	f000 fb17 	bl	8003b2c <Error_Handler>
  }
}
 80034fe:	bf00      	nop
 8003500:	37e0      	adds	r7, #224	; 0xe0
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_TIM16_Init+0x48>)
 800350e:	4a11      	ldr	r2, [pc, #68]	; (8003554 <MX_TIM16_Init+0x4c>)
 8003510:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <MX_TIM16_Init+0x48>)
 8003514:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003518:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <MX_TIM16_Init+0x48>)
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_TIM16_Init+0x48>)
 8003522:	f242 720f 	movw	r2, #9999	; 0x270f
 8003526:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_TIM16_Init+0x48>)
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_TIM16_Init+0x48>)
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_TIM16_Init+0x48>)
 8003536:	2200      	movs	r2, #0
 8003538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_TIM16_Init+0x48>)
 800353c:	f007 fd35 	bl	800afaa <HAL_TIM_Base_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003546:	f000 faf1 	bl	8003b2c <Error_Handler>
  }

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20004a64 	.word	0x20004a64
 8003554:	40014400 	.word	0x40014400

08003558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <MX_USART1_UART_Init+0x5c>)
 8003560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 800357e:	220c      	movs	r2, #12
 8003580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_USART1_UART_Init+0x58>)
 800359c:	f007 ffc4 	bl	800b528 <HAL_UART_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80035a6:	f000 fac1 	bl	8003b2c <Error_Handler>
  }

}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200049e4 	.word	0x200049e4
 80035b4:	40013800 	.word	0x40013800

080035b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ce:	4bba      	ldr	r3, [pc, #744]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	4ab9      	ldr	r2, [pc, #740]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035da:	4bb7      	ldr	r3, [pc, #732]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4bb4      	ldr	r3, [pc, #720]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	4ab3      	ldr	r2, [pc, #716]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f2:	4bb1      	ldr	r3, [pc, #708]	; (80038b8 <MX_GPIO_Init+0x300>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	4bae      	ldr	r3, [pc, #696]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	4aad      	ldr	r2, [pc, #692]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800360a:	4bab      	ldr	r3, [pc, #684]	; (80038b8 <MX_GPIO_Init+0x300>)
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4ba8      	ldr	r3, [pc, #672]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	4aa7      	ldr	r2, [pc, #668]	; (80038b8 <MX_GPIO_Init+0x300>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003622:	4ba5      	ldr	r3, [pc, #660]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800362e:	4ba2      	ldr	r3, [pc, #648]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4aa1      	ldr	r2, [pc, #644]	; (80038b8 <MX_GPIO_Init+0x300>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363a:	4b9f      	ldr	r3, [pc, #636]	; (80038b8 <MX_GPIO_Init+0x300>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
 8003648:	f44f 718a 	mov.w	r1, #276	; 0x114
 800364c:	489b      	ldr	r0, [pc, #620]	; (80038bc <MX_GPIO_Init+0x304>)
 800364e:	f003 fed9 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003652:	2200      	movs	r2, #0
 8003654:	f248 1104 	movw	r1, #33028	; 0x8104
 8003658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365c:	f003 fed2 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003660:	2200      	movs	r2, #0
 8003662:	f24f 0114 	movw	r1, #61460	; 0xf014
 8003666:	4896      	ldr	r0, [pc, #600]	; (80038c0 <MX_GPIO_Init+0x308>)
 8003668:	f003 fecc 	bl	8007404 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800366c:	2200      	movs	r2, #0
 800366e:	f241 0181 	movw	r1, #4225	; 0x1081
 8003672:	4894      	ldr	r0, [pc, #592]	; (80038c4 <MX_GPIO_Init+0x30c>)
 8003674:	f003 fec6 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800367e:	4891      	ldr	r0, [pc, #580]	; (80038c4 <MX_GPIO_Init+0x30c>)
 8003680:	f003 fec0 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 7110 	mov.w	r1, #576	; 0x240
 800368a:	488f      	ldr	r0, [pc, #572]	; (80038c8 <MX_GPIO_Init+0x310>)
 800368c:	f003 feba 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	2120      	movs	r1, #32
 8003694:	488a      	ldr	r0, [pc, #552]	; (80038c0 <MX_GPIO_Init+0x308>)
 8003696:	f003 feb5 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800369a:	2201      	movs	r2, #1
 800369c:	2101      	movs	r1, #1
 800369e:	4887      	ldr	r0, [pc, #540]	; (80038bc <MX_GPIO_Init+0x304>)
 80036a0:	f003 feb0 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80036a4:	f240 1315 	movw	r3, #277	; 0x115
 80036a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	487f      	ldr	r0, [pc, #508]	; (80038bc <MX_GPIO_Init+0x304>)
 80036be:	f003 fce1 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80036c2:	236a      	movs	r3, #106	; 0x6a
 80036c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036c6:	4b81      	ldr	r3, [pc, #516]	; (80038cc <MX_GPIO_Init+0x314>)
 80036c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	4879      	ldr	r0, [pc, #484]	; (80038bc <MX_GPIO_Init+0x304>)
 80036d6:	f003 fcd5 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80036da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036e0:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <MX_GPIO_Init+0x318>)
 80036e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4619      	mov	r1, r3
 80036ee:	4876      	ldr	r0, [pc, #472]	; (80038c8 <MX_GPIO_Init+0x310>)
 80036f0:	f003 fcc8 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80036f4:	233f      	movs	r3, #63	; 0x3f
 80036f6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036f8:	230b      	movs	r3, #11
 80036fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	4870      	ldr	r0, [pc, #448]	; (80038c8 <MX_GPIO_Init+0x310>)
 8003708:	f003 fcbc 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800370c:	2303      	movs	r3, #3
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800371c:	2308      	movs	r3, #8
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800372a:	f003 fcab 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800372e:	f248 1304 	movw	r3, #33028	; 0x8104
 8003732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f003 fc9b 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800374e:	2308      	movs	r3, #8
 8003750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800375e:	2301      	movs	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	4619      	mov	r1, r3
 8003768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376c:	f003 fc8a 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003770:	2310      	movs	r3, #16
 8003772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003774:	230b      	movs	r3, #11
 8003776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003786:	f003 fc7d 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800378a:	23e0      	movs	r3, #224	; 0xe0
 800378c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800379a:	2305      	movs	r3, #5
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f003 fc6c 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80037ac:	2301      	movs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037b0:	4b46      	ldr	r3, [pc, #280]	; (80038cc <MX_GPIO_Init+0x314>)
 80037b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4840      	ldr	r0, [pc, #256]	; (80038c0 <MX_GPIO_Init+0x308>)
 80037c0:	f003 fc60 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80037c4:	2302      	movs	r3, #2
 80037c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80037c8:	230b      	movs	r3, #11
 80037ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	483a      	ldr	r0, [pc, #232]	; (80038c0 <MX_GPIO_Init+0x308>)
 80037d8:	f003 fc54 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80037dc:	f24f 0334 	movw	r3, #61492	; 0xf034
 80037e0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4832      	ldr	r0, [pc, #200]	; (80038c0 <MX_GPIO_Init+0x308>)
 80037f6:	f003 fc45 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80037fa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80037fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800380c:	2306      	movs	r3, #6
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4619      	mov	r1, r3
 8003816:	4829      	ldr	r0, [pc, #164]	; (80038bc <MX_GPIO_Init+0x304>)
 8003818:	f003 fc34 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800381c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003820:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382a:	2303      	movs	r3, #3
 800382c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800382e:	230a      	movs	r3, #10
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	4619      	mov	r1, r3
 8003838:	4820      	ldr	r0, [pc, #128]	; (80038bc <MX_GPIO_Init+0x304>)
 800383a:	f003 fc23 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800383e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003844:	2312      	movs	r3, #18
 8003846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003848:	2301      	movs	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003850:	2304      	movs	r3, #4
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4619      	mov	r1, r3
 800385a:	4819      	ldr	r0, [pc, #100]	; (80038c0 <MX_GPIO_Init+0x308>)
 800385c:	f003 fc12 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003872:	2307      	movs	r3, #7
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	4619      	mov	r1, r3
 800387c:	4811      	ldr	r0, [pc, #68]	; (80038c4 <MX_GPIO_Init+0x30c>)
 800387e:	f003 fc01 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003882:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8003886:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <MX_GPIO_Init+0x314>)
 800388a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	4619      	mov	r1, r3
 8003896:	480b      	ldr	r0, [pc, #44]	; (80038c4 <MX_GPIO_Init+0x30c>)
 8003898:	f003 fbf4 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800389c:	f243 0381 	movw	r3, #12417	; 0x3081
 80038a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4619      	mov	r1, r3
 80038b4:	e00e      	b.n	80038d4 <MX_GPIO_Init+0x31c>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	48001000 	.word	0x48001000
 80038c0:	48000400 	.word	0x48000400
 80038c4:	48000c00 	.word	0x48000c00
 80038c8:	48000800 	.word	0x48000800
 80038cc:	10110000 	.word	0x10110000
 80038d0:	10210000 	.word	0x10210000
 80038d4:	484a      	ldr	r0, [pc, #296]	; (8003a00 <MX_GPIO_Init+0x448>)
 80038d6:	f003 fbd5 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80038da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80038de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4619      	mov	r1, r3
 80038f2:	4844      	ldr	r0, [pc, #272]	; (8003a04 <MX_GPIO_Init+0x44c>)
 80038f4:	f003 fbc6 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80038f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038fe:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <MX_GPIO_Init+0x450>)
 8003900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	483d      	ldr	r0, [pc, #244]	; (8003a04 <MX_GPIO_Init+0x44c>)
 800390e:	f003 fbb9 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392a:	f003 fbab 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800392e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003934:	2302      	movs	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393c:	2303      	movs	r3, #3
 800393e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003940:	230a      	movs	r3, #10
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394e:	f003 fb99 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003952:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003964:	2306      	movs	r3, #6
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	4825      	ldr	r0, [pc, #148]	; (8003a04 <MX_GPIO_Init+0x44c>)
 8003970:	f003 fb88 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003974:	2302      	movs	r3, #2
 8003976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003984:	2305      	movs	r3, #5
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	481c      	ldr	r0, [pc, #112]	; (8003a00 <MX_GPIO_Init+0x448>)
 8003990:	f003 fb78 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003994:	2378      	movs	r3, #120	; 0x78
 8003996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039a4:	2307      	movs	r3, #7
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4619      	mov	r1, r3
 80039ae:	4814      	ldr	r0, [pc, #80]	; (8003a00 <MX_GPIO_Init+0x448>)
 80039b0:	f003 fb68 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80039b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ba:	2312      	movs	r3, #18
 80039bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c2:	2303      	movs	r3, #3
 80039c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039c6:	2304      	movs	r3, #4
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	480e      	ldr	r0, [pc, #56]	; (8003a0c <MX_GPIO_Init+0x454>)
 80039d2:	f003 fb57 	bl	8007084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	2017      	movs	r0, #23
 80039dc:	f003 fadb 	bl	8006f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039e0:	2017      	movs	r0, #23
 80039e2:	f003 faf4 	bl	8006fce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2100      	movs	r1, #0
 80039ea:	2028      	movs	r0, #40	; 0x28
 80039ec:	f003 fad3 	bl	8006f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039f0:	2028      	movs	r0, #40	; 0x28
 80039f2:	f003 faec 	bl	8006fce <HAL_NVIC_EnableIRQ>

}
 80039f6:	bf00      	nop
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	48000c00 	.word	0x48000c00
 8003a04:	48000800 	.word	0x48000800
 8003a08:	10110000 	.word	0x10110000
 8003a0c:	48000400 	.word	0x48000400

08003a10 <HAL_TIM_PeriodElapsedCallback>:
// alarm is true and turns it off when not true. This is becasue
// there is no way to garuntee that the last state of the LED is off
//
// Right now the LED blink is set to once per 2 seconds
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  // Check to make sure the correct timer called this interrupt
  if (htim == &htim16 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <HAL_TIM_PeriodElapsedCallback+0x2a>
  {

	  //
	  if (alarm == true) {
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_TIM_PeriodElapsedCallback+0x24>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a2c:	4807      	ldr	r0, [pc, #28]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003a2e:	f003 fd01 	bl	8007434 <HAL_GPIO_TogglePin>

	  }

  }

}
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_PeriodElapsedCallback+0x2a>
		  BSP_LED_Off(LED2);
 8003a34:	2000      	movs	r0, #0
 8003a36:	f000 f8b1 	bl	8003b9c <BSP_LED_Off>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20004a64 	.word	0x20004a64
 8003a48:	2000456c 	.word	0x2000456c
 8003a4c:	48000400 	.word	0x48000400

08003a50 <serialPrint>:

// Made a function for printing over the USART, as I was tired of copy-pasting
// the obscenely long HAL transmit function
void serialPrint(char buffer[]) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*)buffer , strlen(buffer), HAL_MAX_DELAY);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fc fbb9 	bl	80001d0 <strlen>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4803      	ldr	r0, [pc, #12]	; (8003a78 <serialPrint+0x28>)
 8003a6a:	f007 fdab 	bl	800b5c4 <HAL_UART_Transmit>

}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200049e4 	.word	0x200049e4
 8003a7c:	00000000 	.word	0x00000000

08003a80 <checkSensors>:

// This function reads values from the temperature sensor and the
// proximity sensor, converting and calibrating the values as necessary
void checkSensors() {
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0

	// Read and then convert the temperature to farenheit
	currentTemp = BSP_TSENSOR_ReadTemp();
 8003a86:	f000 fa0b 	bl	8003ea0 <BSP_TSENSOR_ReadTemp>
 8003a8a:	eef0 7a40 	vmov.f32	s15, s0
 8003a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a92:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a96:	793b      	ldrb	r3, [r7, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <checkSensors+0x98>)
 8003a9c:	701a      	strb	r2, [r3, #0]
	currentTemp = (currentTemp*1.8)+32;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <checkSensors+0x98>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fd3e 	bl	8000524 <__aeabi_i2d>
 8003aa8:	a319      	add	r3, pc, #100	; (adr r3, 8003b10 <checkSensors+0x90>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f7fc fda3 	bl	80005f8 <__aeabi_dmul>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4621      	mov	r1, r4
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <checkSensors+0x9c>)
 8003ac0:	f7fc fbe4 	bl	800028c <__adddf3>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	4621      	mov	r1, r4
 8003acc:	f7fc ffa6 	bl	8000a1c <__aeabi_d2uiz>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <checkSensors+0x98>)
 8003ad6:	701a      	strb	r2, [r3, #0]


	// Calibrate the ToF sensor with an experimentally-determined value
	currentDist = VL53L0X_PROXIMITY_GetDistance();
 8003ad8:	f7ff fc4a 	bl	8003370 <VL53L0X_PROXIMITY_GetDistance>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <checkSensors+0xa0>)
 8003ae2:	801a      	strh	r2, [r3, #0]
	currentDist = currentDist-calibrationValue;
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <checkSensors+0xa0>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	2232      	movs	r2, #50	; 0x32
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <checkSensors+0xa0>)
 8003af0:	801a      	strh	r2, [r3, #0]

	// Also checks whether the new proximity value violates the established proximity fence
	//
	// If it does, activate the alarm
	if (currentDist <= alarmDist) {
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <checkSensors+0xa0>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <checkSensors+0xa4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dc02      	bgt.n	8003b06 <checkSensors+0x86>

		alarm = true;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <checkSensors+0xa8>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]

	else {

	}

}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	3ffccccc 	.word	0x3ffccccc
 8003b18:	20004568 	.word	0x20004568
 8003b1c:	40400000 	.word	0x40400000
 8003b20:	2000456a 	.word	0x2000456a
 8003b24:	20000198 	.word	0x20000198
 8003b28:	2000456c 	.word	0x2000456c

08003b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <BSP_LED_Init+0x28>
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <BSP_LED_Init+0x58>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <BSP_LED_Init+0x58>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <BSP_LED_Init+0x58>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b68:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b72:	2302      	movs	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <BSP_LED_Init+0x5c>)
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	f107 020c 	add.w	r2, r7, #12
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fa7d 	bl	8007084 <HAL_GPIO_Init>
}
 8003b8a:	bf00      	nop
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	2000019c 	.word	0x2000019c

08003b9c <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <BSP_LED_Off+0x28>)
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb2:	b291      	uxth	r1, r2
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fc24 	bl	8007404 <HAL_GPIO_WritePin>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2000019c 	.word	0x2000019c

08003bc8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003bee:	2312      	movs	r3, #18
 8003bf0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	4619      	mov	r1, r3
 8003c04:	481b      	ldr	r0, [pc, #108]	; (8003c74 <I2Cx_MspInit+0xac>)
 8003c06:	f003 fa3d 	bl	8007084 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4818      	ldr	r0, [pc, #96]	; (8003c74 <I2Cx_MspInit+0xac>)
 8003c12:	f003 fa37 	bl	8007084 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c20:	6593      	str	r3, [r2, #88]	; 0x58
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	4a0f      	ldr	r2, [pc, #60]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c38:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <I2Cx_MspInit+0xa8>)
 8003c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c44:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	210f      	movs	r1, #15
 8003c4a:	2021      	movs	r0, #33	; 0x21
 8003c4c:	f003 f9a3 	bl	8006f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003c50:	2021      	movs	r0, #33	; 0x21
 8003c52:	f003 f9bc 	bl	8006fce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	210f      	movs	r1, #15
 8003c5a:	2022      	movs	r0, #34	; 0x22
 8003c5c:	f003 f99b 	bl	8006f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003c60:	2022      	movs	r0, #34	; 0x22
 8003c62:	f003 f9b4 	bl	8006fce <HAL_NVIC_EnableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	48000400 	.word	0x48000400

08003c78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <I2Cx_Init+0x54>)
 8003c84:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <I2Cx_Init+0x58>)
 8003c8a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff89 	bl	8003bc8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f003 fbee 	bl	8007498 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f004 fb5c 	bl	800837c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40005800 	.word	0x40005800
 8003cd0:	00702681 	.word	0x00702681

08003cd4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af04      	add	r7, sp, #16
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	72fb      	strb	r3, [r7, #11]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	b299      	uxth	r1, r3
 8003cf6:	88f8      	ldrh	r0, [r7, #6]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cfe:	9302      	str	r3, [sp, #8]
 8003d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f003 ff94 	bl	8007c38 <HAL_I2C_Mem_Read>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f832 	bl	8003d88 <I2Cx_Error>
  }
  return status;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08a      	sub	sp, #40	; 0x28
 8003d32:	af04      	add	r7, sp, #16
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	4608      	mov	r0, r1
 8003d38:	4611      	mov	r1, r2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	72fb      	strb	r3, [r7, #11]
 8003d40:	460b      	mov	r3, r1
 8003d42:	813b      	strh	r3, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
 8003d4e:	b299      	uxth	r1, r3
 8003d50:	88f8      	ldrh	r0, [r7, #6]
 8003d52:	893a      	ldrh	r2, [r7, #8]
 8003d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4603      	mov	r3, r0
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f003 fe53 	bl	8007a10 <HAL_I2C_Mem_Write>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	4619      	mov	r1, r3
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f805 	bl	8003d88 <I2Cx_Error>
  }
  return status;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f003 fc0e 	bl	80075b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ff6c 	bl	8003c78 <I2Cx_Init>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <SENSOR_IO_Init+0x10>)
 8003dae:	f7ff ff63 	bl	8003c78 <I2Cx_Init>
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20004b30 	.word	0x20004b30

08003dbc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	71bb      	strb	r3, [r7, #6]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003dce:	79bb      	ldrb	r3, [r7, #6]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	79f9      	ldrb	r1, [r7, #7]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	1d7b      	adds	r3, r7, #5
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4803      	ldr	r0, [pc, #12]	; (8003dec <SENSOR_IO_Write+0x30>)
 8003de0:	f7ff ffa5 	bl	8003d2e <I2Cx_WriteMultiple>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20004b30 	.word	0x20004b30

08003df0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	4603      	mov	r3, r0
 8003df8:	460a      	mov	r2, r1
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003e04:	79bb      	ldrb	r3, [r7, #6]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	79f9      	ldrb	r1, [r7, #7]
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f107 030f 	add.w	r3, r7, #15
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2301      	movs	r3, #1
 8003e16:	4804      	ldr	r0, [pc, #16]	; (8003e28 <SENSOR_IO_Read+0x38>)
 8003e18:	f7ff ff5c 	bl	8003cd4 <I2Cx_ReadMultiple>

  return read_value;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20004b30 	.word	0x20004b30

08003e2c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	603a      	str	r2, [r7, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	71bb      	strb	r3, [r7, #6]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003e42:	79bb      	ldrb	r3, [r7, #6]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	79f9      	ldrb	r1, [r7, #7]
 8003e48:	88bb      	ldrh	r3, [r7, #4]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2301      	movs	r3, #1
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <SENSOR_IO_ReadMultiple+0x38>)
 8003e54:	f7ff ff3e 	bl	8003cd4 <I2Cx_ReadMultiple>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	b29b      	uxth	r3, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20004b30 	.word	0x20004b30

08003e68 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <BSP_TSENSOR_Init+0x30>)
 8003e74:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <BSP_TSENSOR_Init+0x34>)
 8003e76:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003e78:	f7ff ff96 	bl	8003da8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <BSP_TSENSOR_Init+0x30>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2100      	movs	r1, #0
 8003e84:	20be      	movs	r0, #190	; 0xbe
 8003e86:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20004970 	.word	0x20004970
 8003e9c:	20000000 	.word	0x20000000

08003ea0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <BSP_TSENSOR_ReadTemp+0x18>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	20be      	movs	r0, #190	; 0xbe
 8003eac:	4798      	blx	r3
 8003eae:	eef0 7a40 	vmov.f32	s15, s0
}
 8003eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20004970 	.word	0x20004970

08003ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_MspInit+0x44>)
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_MspInit+0x44>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_MspInit+0x44>)
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_MspInit+0x44>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <HAL_MspInit+0x44>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_MspInit+0x44>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <HAL_TIM_Base_MspInit+0x44>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d113      	bne.n	8003f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_TIM_Base_MspInit+0x48>)
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_TIM_Base_MspInit+0x48>)
 8003f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f20:	6613      	str	r3, [r2, #96]	; 0x60
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_TIM_Base_MspInit+0x48>)
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	2019      	movs	r0, #25
 8003f34:	f003 f82f 	bl	8006f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f38:	2019      	movs	r0, #25
 8003f3a:	f003 f848 	bl	8006fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40021000 	.word	0x40021000

08003f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_UART_MspInit+0x7c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d127      	bne.n	8003fc2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f72:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003fa2:	23c0      	movs	r3, #192	; 0xc0
 8003fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fb2:	2307      	movs	r3, #7
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <HAL_UART_MspInit+0x84>)
 8003fbe:	f003 f861 	bl	8007084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	48000400 	.word	0x48000400

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <HardFault_Handler+0x4>

08003fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <MemManage_Handler+0x4>

08003ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <BusFault_Handler+0x4>

08003ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <UsageFault_Handler+0x4>

08003ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402c:	f002 fe96 	bl	8006d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fa15 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}

08004042 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004046:	2020      	movs	r0, #32
 8004048:	f003 fa0e 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800404c:	2040      	movs	r0, #64	; 0x40
 800404e:	f003 fa0b 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004052:	2080      	movs	r0, #128	; 0x80
 8004054:	f003 fa08 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004058:	f44f 7080 	mov.w	r0, #256	; 0x100
 800405c:	f003 fa04 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}

08004064 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800406a:	f007 f85d 	bl	800b128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20004a64 	.word	0x20004a64

08004078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800407c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004080:	f003 f9f2 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004088:	f003 f9ee 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800408c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004090:	f003 f9ea 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004094:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004098:	f003 f9e6 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800409c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80040a0:	f003 f9e2 	bl	8007468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e00a      	b.n	80040d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ba:	f3af 8000 	nop.w
 80040be:	4601      	mov	r1, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	60ba      	str	r2, [r7, #8]
 80040c6:	b2ca      	uxtb	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3301      	adds	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dbf0      	blt.n	80040ba <_read+0x12>
	}

return len;
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e009      	b.n	8004108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	60ba      	str	r2, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3301      	adds	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	dbf1      	blt.n	80040f4 <_write+0x12>
	}
	return len;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_close>:

int _close(int file)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
	return -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004142:	605a      	str	r2, [r3, #4]
	return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <_isatty>:

int _isatty(int file)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
	return 1;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <_sbrk+0x5c>)
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_sbrk+0x60>)
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <_sbrk+0x64>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <_sbrk+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b4:	f007 fe8a 	bl	800becc <__errno>
 80041b8:	4602      	mov	r2, r0
 80041ba:	230c      	movs	r3, #12
 80041bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	e009      	b.n	80041d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <_sbrk+0x64>)
 80041d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20018000 	.word	0x20018000
 80041e4:	00000400 	.word	0x00000400
 80041e8:	20004974 	.word	0x20004974
 80041ec:	200054c8 	.word	0x200054c8

080041f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <SystemInit+0x64>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <SystemInit+0x64>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004204:	4b14      	ldr	r3, [pc, #80]	; (8004258 <SystemInit+0x68>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <SystemInit+0x68>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <SystemInit+0x68>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <SystemInit+0x68>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <SystemInit+0x68>)
 800421c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004220:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004224:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <SystemInit+0x68>)
 8004228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800422c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <SystemInit+0x68>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <SystemInit+0x68>)
 8004234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <SystemInit+0x68>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <SystemInit+0x64>)
 8004242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004246:	609a      	str	r2, [r3, #8]
#endif
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	e000ed00 	.word	0xe000ed00
 8004258:	40021000 	.word	0x40021000

0800425c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <WIFI_Init+0x40>)
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <WIFI_Init+0x44>)
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <WIFI_Init+0x48>)
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <WIFI_Init+0x4c>)
 8004272:	490e      	ldr	r1, [pc, #56]	; (80042ac <WIFI_Init+0x50>)
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <WIFI_Init+0x54>)
 8004276:	f7fd f94f 	bl	8001518 <ES_WIFI_RegisterBusIO>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004280:	480b      	ldr	r0, [pc, #44]	; (80042b0 <WIFI_Init+0x54>)
 8004282:	f7fd f91b 	bl	80014bc <ES_WIFI_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8004290:	79fb      	ldrb	r3, [r7, #7]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	080023c9 	.word	0x080023c9
 80042a0:	080024bd 	.word	0x080024bd
 80042a4:	08002599 	.word	0x08002599
 80042a8:	080022b1 	.word	0x080022b1
 80042ac:	08002115 	.word	0x08002115
 80042b0:	20004b7c 	.word	0x20004b7c

080042b4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	4809      	ldr	r0, [pc, #36]	; (80042f4 <WIFI_Connect+0x40>)
 80042ce:	f7fd f957 	bl	8001580 <ES_WIFI_Connect>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <WIFI_Connect+0x40>)
 80042da:	f7fd f9f3 	bl	80016c4 <ES_WIFI_GetNetworkSettings>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20004b7c 	.word	0x20004b7c

080042f8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <WIFI_GetMAC_Address+0x28>)
 8004308:	f7fd fa06 	bl	8001718 <ES_WIFI_GetMACAddress>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20004b7c 	.word	0x20004b7c

08004324 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004330:	4809      	ldr	r0, [pc, #36]	; (8004358 <WIFI_GetIP_Address+0x34>)
 8004332:	f7fd f99b 	bl	800166c <ES_WIFI_IsConnected>
 8004336:	4603      	mov	r3, r0
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <WIFI_GetIP_Address+0x34>)
 800433e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20004b7c 	.word	0x20004b7c

0800435c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	72fb      	strb	r3, [r7, #11]
 800436a:	4613      	mov	r3, r2
 800436c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 800437a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800437c:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4619      	mov	r1, r3
 800439a:	4807      	ldr	r0, [pc, #28]	; (80043b8 <WIFI_StartServer+0x5c>)
 800439c:	f7fd f9ec 	bl	8001778 <ES_WIFI_StartServerSingleConn>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	; 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20004b7c 	.word	0x20004b7c

080043bc <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	461a      	mov	r2, r3
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4819      	ldr	r0, [pc, #100]	; (8004440 <WIFI_WaitServerConnection+0x84>)
 80043da:	f7fd fa81 	bl	80018e0 <ES_WIFI_WaitServerConnection>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80043e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <WIFI_WaitServerConnection+0x3c>
 80043f2:	8a7a      	ldrh	r2, [r7, #18]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <WIFI_WaitServerConnection+0x4c>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 80043fe:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e014      	b.n	8004436 <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 800440c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004410:	2b03      	cmp	r3, #3
 8004412:	d10f      	bne.n	8004434 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <WIFI_WaitServerConnection+0x64>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8004426:	2204      	movs	r2, #4
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f007 fd92 	bl	800bf54 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8004430:	2305      	movs	r3, #5
 8004432:	e000      	b.n	8004436 <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	3728      	adds	r7, #40	; 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20004b7c 	.word	0x20004b7c

08004444 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4806      	ldr	r0, [pc, #24]	; (800446c <WIFI_CloseServerConnection+0x28>)
 8004454:	f7fd fb64 	bl	8001b20 <ES_WIFI_CloseServerConnection>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20004b7c 	.word	0x20004b7c

08004470 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	4806      	ldr	r0, [pc, #24]	; (800449c <WIFI_StopServer+0x2c>)
 8004482:	f7fd fbaf 	bl	8001be4 <ES_WIFI_StopServerSingleConn>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20004b7c 	.word	0x20004b7c

080044a0 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	4613      	mov	r3, r2
 80044b0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80044b6:	89ba      	ldrh	r2, [r7, #12]
 80044b8:	7bf9      	ldrb	r1, [r7, #15]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4806      	ldr	r0, [pc, #24]	; (80044e0 <WIFI_SendData+0x40>)
 80044c8:	f7fd fbee 	bl	8001ca8 <ES_WIFI_SendData>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20004b7c 	.word	0x20004b7c

080044e4 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	4603      	mov	r3, r0
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	4613      	mov	r3, r2
 80044f4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80044fa:	89ba      	ldrh	r2, [r7, #12]
 80044fc:	7bf9      	ldrb	r1, [r7, #15]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	4613      	mov	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	4806      	ldr	r0, [pc, #24]	; (8004524 <WIFI_ReceiveData+0x40>)
 800450c:	f7fd fc88 	bl	8001e20 <ES_WIFI_ReceiveData>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20004b7c 	.word	0x20004b7c

08004528 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 f873 	bl	8005624 <VL53L0X_get_offset_calibration_data_micro_meter>
 800453e:	4603      	mov	r3, r0
 8004540:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004550:	b5b0      	push	{r4, r5, r7, lr}
 8004552:	b094      	sub	sp, #80	; 0x50
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004558:	2300      	movs	r3, #0
 800455a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800455e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004566:	2200      	movs	r2, #0
 8004568:	2188      	movs	r1, #136	; 0x88
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f002 fae6 	bl	8006b3c <VL53L0X_WrByte>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004584:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800458e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a71      	ldr	r2, [pc, #452]	; (800475c <VL53L0X_DataInit+0x20c>)
 8004596:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a70      	ldr	r2, [pc, #448]	; (8004760 <VL53L0X_DataInit+0x210>)
 800459e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8d8 	bl	8004764 <VL53L0X_GetDeviceParameters>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 80045ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d112      	bne.n	80045e8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80045c2:	2300      	movs	r3, #0
 80045c4:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f103 0410 	add.w	r4, r3, #16
 80045d0:	f107 0508 	add.w	r5, r7, #8
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2264      	movs	r2, #100	; 0x64
 80045ec:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80045f6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004600:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800460a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004616:	2300      	movs	r3, #0
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
 800461a:	e014      	b.n	8004646 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 800461c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	b29b      	uxth	r3, r3
 8004628:	2201      	movs	r2, #1
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fad5 	bl	8004bdc <VL53L0X_SetLimitCheckEnable>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800463a:	4313      	orrs	r3, r2
 800463c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	3301      	adds	r3, #1
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	2b05      	cmp	r3, #5
 800464a:	dde7      	ble.n	800461c <VL53L0X_DataInit+0xcc>
 800464c:	e000      	b.n	8004650 <VL53L0X_DataInit+0x100>
		else
			break;
 800464e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004650:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004658:	2200      	movs	r2, #0
 800465a:	2102      	movs	r1, #2
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fabd 	bl	8004bdc <VL53L0X_SetLimitCheckEnable>
 8004662:	4603      	mov	r3, r0
 8004664:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004668:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004670:	2200      	movs	r2, #0
 8004672:	2103      	movs	r1, #3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fab1 	bl	8004bdc <VL53L0X_SetLimitCheckEnable>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004680:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004688:	2200      	movs	r2, #0
 800468a:	2104      	movs	r1, #4
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 faa5 	bl	8004bdc <VL53L0X_SetLimitCheckEnable>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004698:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80046a0:	2200      	movs	r2, #0
 80046a2:	2105      	movs	r1, #5
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa99 	bl	8004bdc <VL53L0X_SetLimitCheckEnable>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80046b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80046b8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80046bc:	2100      	movs	r1, #0
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb3c 	bl	8004d3c <VL53L0X_SetLimitCheckValue>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80046ca:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80046d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046d6:	2101      	movs	r1, #1
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb2f 	bl	8004d3c <VL53L0X_SetLimitCheckValue>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80046ec:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80046f0:	2102      	movs	r1, #2
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb22 	bl	8004d3c <VL53L0X_SetLimitCheckValue>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046fe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004706:	2200      	movs	r2, #0
 8004708:	2103      	movs	r1, #3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fb16 	bl	8004d3c <VL53L0X_SetLimitCheckValue>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004716:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	22ff      	movs	r2, #255	; 0xff
 8004722:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004726:	22ff      	movs	r2, #255	; 0xff
 8004728:	2101      	movs	r1, #1
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f002 fa06 	bl	8006b3c <VL53L0X_WrByte>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800473e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800474e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004752:	4618      	mov	r0, r3
 8004754:	3750      	adds	r7, #80	; 0x50
 8004756:	46bd      	mov	sp, r7
 8004758:	bdb0      	pop	{r4, r5, r7, pc}
 800475a:	bf00      	nop
 800475c:	00016b85 	.word	0x00016b85
 8004760:	000970a4 	.word	0x000970a4

08004764 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8cc 	bl	8004914 <VL53L0X_GetDeviceMode>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3308      	adds	r3, #8
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9a8 	bl	8004ae4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3310      	adds	r3, #16
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9de 	bl	8004b76 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	3314      	adds	r3, #20
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff feab 	bl	8004528 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80047d2:	4603      	mov	r3, r0
 80047d4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80047d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d134      	bne.n	8004848 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	e02a      	b.n	800483a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80047e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d12a      	bne.n	8004842 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	b299      	uxth	r1, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3308      	adds	r3, #8
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	3304      	adds	r3, #4
 80047fc:	461a      	mov	r2, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fafe 	bl	8004e00 <VL53L0X_GetLimitCheckValue>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	4313      	orrs	r3, r2
 800480c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d117      	bne.n	8004846 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	b299      	uxth	r1, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3318      	adds	r3, #24
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4413      	add	r3, r2
 8004822:	461a      	mov	r2, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa65 	bl	8004cf4 <VL53L0X_GetLimitCheckEnable>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	4313      	orrs	r3, r2
 8004832:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3301      	adds	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	ddd1      	ble.n	80047e4 <VL53L0X_GetDeviceParameters+0x80>
 8004840:	e002      	b.n	8004848 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004846:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	333c      	adds	r3, #60	; 0x3c
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fb60 	bl	8004f1c <VL53L0X_GetWrapAroundCheckEnable>
 800485c:	4603      	mov	r3, r0
 800485e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f863 	bl	800493a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b15      	cmp	r3, #21
 8004898:	d832      	bhi.n	8004900 <VL53L0X_SetDeviceMode+0x7c>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <VL53L0X_SetDeviceMode+0x1c>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	08004901 	.word	0x08004901
 80048ac:	080048f9 	.word	0x080048f9
 80048b0:	08004901 	.word	0x08004901
 80048b4:	08004901 	.word	0x08004901
 80048b8:	08004901 	.word	0x08004901
 80048bc:	08004901 	.word	0x08004901
 80048c0:	08004901 	.word	0x08004901
 80048c4:	08004901 	.word	0x08004901
 80048c8:	08004901 	.word	0x08004901
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004901 	.word	0x08004901
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004901 	.word	0x08004901
 80048e4:	08004901 	.word	0x08004901
 80048e8:	08004901 	.word	0x08004901
 80048ec:	08004901 	.word	0x08004901
 80048f0:	080048f9 	.word	0x080048f9
 80048f4:	080048f9 	.word	0x080048f9
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	741a      	strb	r2, [r3, #16]
		break;
 80048fe:	e001      	b.n	8004904 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004900:	23f8      	movs	r3, #248	; 0xf8
 8004902:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7c1a      	ldrb	r2, [r3, #16]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800492a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f001 f8c0 	bl	8005ad0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	460b      	mov	r3, r1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004972:	7afb      	ldrb	r3, [r7, #11]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 f872 	bl	8005a62 <VL53L0X_get_vcsel_pulse_period>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	72fb      	strb	r3, [r7, #11]
 800499e:	4613      	mov	r3, r2
 80049a0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d836      	bhi.n	8004a20 <sequence_step_enabled+0x90>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <sequence_step_enabled+0x28>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049cd 	.word	0x080049cd
 80049bc:	080049df 	.word	0x080049df
 80049c0:	080049f1 	.word	0x080049f1
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	08004a15 	.word	0x08004a15
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80049cc:	7abb      	ldrb	r3, [r7, #10]
 80049ce:	111b      	asrs	r3, r3, #4
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	701a      	strb	r2, [r3, #0]
		break;
 80049dc:	e022      	b.n	8004a24 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80049de:	7abb      	ldrb	r3, [r7, #10]
 80049e0:	10db      	asrs	r3, r3, #3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	701a      	strb	r2, [r3, #0]
		break;
 80049ee:	e019      	b.n	8004a24 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80049f0:	7abb      	ldrb	r3, [r7, #10]
 80049f2:	109b      	asrs	r3, r3, #2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	701a      	strb	r2, [r3, #0]
		break;
 8004a00:	e010      	b.n	8004a24 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004a02:	7abb      	ldrb	r3, [r7, #10]
 8004a04:	119b      	asrs	r3, r3, #6
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	701a      	strb	r2, [r3, #0]
		break;
 8004a12:	e007      	b.n	8004a24 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004a14:	7abb      	ldrb	r3, [r7, #10]
 8004a16:	09db      	lsrs	r3, r3, #7
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	701a      	strb	r2, [r3, #0]
		break;
 8004a1e:	e001      	b.n	8004a24 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a20:	23fc      	movs	r3, #252	; 0xfc
 8004a22:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004a46:	f107 030e 	add.w	r3, r7, #14
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 ff7a 	bl	8006948 <VL53L0X_RdByte>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004a60:	7bba      	ldrb	r2, [r7, #14]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff92 	bl	8004990 <sequence_step_enabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d108      	bne.n	8004a8a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004a78:	7bba      	ldrb	r2, [r7, #14]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	2101      	movs	r1, #1
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff85 	bl	8004990 <sequence_step_enabled>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004a92:	7bba      	ldrb	r2, [r7, #14]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	2102      	movs	r1, #2
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ff78 	bl	8004990 <sequence_step_enabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004aac:	7bba      	ldrb	r2, [r7, #14]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3303      	adds	r3, #3
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff6b 	bl	8004990 <sequence_step_enabled>
 8004aba:	4603      	mov	r3, r0
 8004abc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004ac6:	7bba      	ldrb	r2, [r7, #14]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2104      	movs	r1, #4
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ff5e 	bl	8004990 <sequence_step_enabled>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	461a      	mov	r2, r3
 8004af8:	21f8      	movs	r1, #248	; 0xf8
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 ffaa 	bl	8006a54 <VL53L0X_RdWord>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	461a      	mov	r2, r3
 8004b12:	2104      	movs	r1, #4
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 ffd5 	bl	8006ac4 <VL53L0X_RdDWord>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004b26:	89bb      	ldrh	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	89ba      	ldrh	r2, [r7, #12]
 8004b30:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7f1b      	ldrb	r3, [r3, #28]
 8004b5e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	7bba      	ldrb	r2, [r7, #14]
 8004b64:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004b84:	f107 030e 	add.w	r3, r7, #14
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2120      	movs	r1, #32
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f001 ff61 	bl	8006a54 <VL53L0X_RdWord>
 8004b92:	4603      	mov	r3, r0
 8004b94:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	771a      	strb	r2, [r3, #28]
 8004bb6:	e00b      	b.n	8004bd0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
 8004be8:	4613      	mov	r3, r2
 8004bea:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	d902      	bls.n	8004c08 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c02:	23fc      	movs	r3, #252	; 0xfc
 8004c04:	75fb      	strb	r3, [r7, #23]
 8004c06:	e05b      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73bb      	strb	r3, [r7, #14]
 8004c1a:	e00a      	b.n	8004c32 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	330c      	adds	r3, #12
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d841      	bhi.n	8004cbc <VL53L0X_SetLimitCheckEnable+0xe0>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c59 	.word	0x08004c59
 8004c44:	08004c63 	.word	0x08004c63
 8004c48:	08004c79 	.word	0x08004c79
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004c8d 	.word	0x08004c8d
 8004c54:	08004ca5 	.word	0x08004ca5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7bfa      	ldrb	r2, [r7, #15]
 8004c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004c60:	e02e      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2144      	movs	r1, #68	; 0x44
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 ff89 	bl	8006b84 <VL53L0X_WrWord>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]

			break;
 8004c76:	e023      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004c80:	e01e      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7bfa      	ldrb	r2, [r7, #15]
 8004c86:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004c8a:	e019      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004c92:	7b7b      	ldrb	r3, [r7, #13]
 8004c94:	22fe      	movs	r2, #254	; 0xfe
 8004c96:	2160      	movs	r1, #96	; 0x60
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 ff9d 	bl	8006bd8 <VL53L0X_UpdateByte>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004ca2:	e00d      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004caa:	7b7b      	ldrb	r3, [r7, #13]
 8004cac:	22ef      	movs	r2, #239	; 0xef
 8004cae:	2160      	movs	r1, #96	; 0x60
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f001 ff91 	bl	8006bd8 <VL53L0X_UpdateByte>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004cba:	e001      	b.n	8004cc0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cbc:	23fc      	movs	r3, #252	; 0xfc
 8004cbe:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004cda:	e005      	b.n	8004ce8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d905      	bls.n	8004d18 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d0c:	23fc      	movs	r3, #252	; 0xfc
 8004d0e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e008      	b.n	8004d2a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d18:	897b      	ldrh	r3, [r7, #10]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d22:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7dba      	ldrb	r2, [r7, #22]
 8004d28:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	460b      	mov	r3, r1
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d58:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	330c      	adds	r3, #12
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e040      	b.n	8004df2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004d70:	897b      	ldrh	r3, [r7, #10]
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d830      	bhi.n	8004dd8 <VL53L0X_SetLimitCheckValue+0x9c>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <VL53L0X_SetLimitCheckValue+0x40>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004dbb 	.word	0x08004dbb
 8004d8c:	08004dc3 	.word	0x08004dc3
 8004d90:	08004dc3 	.word	0x08004dc3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004d9a:	e01f      	b.n	8004ddc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	2144      	movs	r1, #68	; 0x44
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f001 feec 	bl	8006b84 <VL53L0X_WrWord>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004db0:	e014      	b.n	8004ddc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004db8:	e010      	b.n	8004ddc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004dc0:	e00c      	b.n	8004ddc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2164      	movs	r1, #100	; 0x64
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f001 fed9 	bl	8006b84 <VL53L0X_WrWord>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004dd6:	e001      	b.n	8004ddc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004dd8:	23fc      	movs	r3, #252	; 0xfc
 8004dda:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	330c      	adds	r3, #12
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop

08004e00 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	2b05      	cmp	r3, #5
 8004e1a:	d847      	bhi.n	8004eac <VL53L0X_GetLimitCheckValue+0xac>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <VL53L0X_GetLimitCheckValue+0x24>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e3d 	.word	0x08004e3d
 8004e28:	08004e49 	.word	0x08004e49
 8004e2c:	08004e6f 	.word	0x08004e6f
 8004e30:	08004e7b 	.word	0x08004e7b
 8004e34:	08004e87 	.word	0x08004e87
 8004e38:	08004e87 	.word	0x08004e87

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	77bb      	strb	r3, [r7, #30]
		break;
 8004e46:	e033      	b.n	8004eb0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004e48:	f107 0316 	add.w	r3, r7, #22
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2144      	movs	r1, #68	; 0x44
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f001 fdff 	bl	8006a54 <VL53L0X_RdWord>
 8004e56:	4603      	mov	r3, r0
 8004e58:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004e5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77bb      	strb	r3, [r7, #30]
		break;
 8004e6c:	e020      	b.n	8004eb0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	77bb      	strb	r3, [r7, #30]
		break;
 8004e78:	e01a      	b.n	8004eb0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	77bb      	strb	r3, [r7, #30]
		break;
 8004e84:	e014      	b.n	8004eb0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004e86:	f107 0316 	add.w	r3, r7, #22
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2164      	movs	r1, #100	; 0x64
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f001 fde0 	bl	8006a54 <VL53L0X_RdWord>
 8004e94:	4603      	mov	r3, r0
 8004e96:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004e98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004ea0:	8afb      	ldrh	r3, [r7, #22]
 8004ea2:	025b      	lsls	r3, r3, #9
 8004ea4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	77bb      	strb	r3, [r7, #30]
		break;
 8004eaa:	e001      	b.n	8004eb0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004eac:	23fc      	movs	r3, #252	; 0xfc
 8004eae:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d12a      	bne.n	8004f0e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004eb8:	7fbb      	ldrb	r3, [r7, #30]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d124      	bne.n	8004f08 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d110      	bne.n	8004ee6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004ec4:	897b      	ldrh	r3, [r7, #10]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004ed8:	897b      	ldrh	r3, [r7, #10]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004ee4:	e013      	b.n	8004f0e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004f06:	e002      	b.n	8004f0e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f0e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop

08004f1c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004f2a:	f107 030e 	add.w	r3, r7, #14
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2101      	movs	r1, #1
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fd08 	bl	8006948 <VL53L0X_RdByte>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10e      	bne.n	8004f62 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004f44:	7bba      	ldrb	r2, [r7, #14]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da03      	bge.n	8004f5c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004f8c:	f107 030e 	add.w	r3, r7, #14
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fcbe 	bl	8004914 <VL53L0X_GetDeviceMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f882 	bl	80050b4 <VL53L0X_StartMeasurement>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fb70 	bl	80056a2 <VL53L0X_measurement_poll_for_completion>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004ffe:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005000:	7dbb      	ldrb	r3, [r7, #22]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d005      	beq.n	8005012 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005006:	7dbb      	ldrb	r3, [r7, #22]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d002      	beq.n	8005012 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800500c:	7dbb      	ldrb	r3, [r7, #22]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d147      	bne.n	80050a2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	f107 0210 	add.w	r2, r7, #16
 800501a:	2101      	movs	r1, #1
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa69 	bl	80054f4 <VL53L0X_GetInterruptThresholds>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800502c:	d803      	bhi.n	8005036 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800502e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005030:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005034:	d935      	bls.n	80050a2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d131      	bne.n	80050a2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005044:	491a      	ldr	r1, [pc, #104]	; (80050b0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fdf4 	bl	8005c34 <VL53L0X_load_tuning_settings>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]
 8005050:	e027      	b.n	80050a2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005052:	2204      	movs	r2, #4
 8005054:	21ff      	movs	r1, #255	; 0xff
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fd70 	bl	8006b3c <VL53L0X_WrByte>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	4313      	orrs	r3, r2
 8005064:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005066:	2200      	movs	r2, #0
 8005068:	2170      	movs	r1, #112	; 0x70
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 fd66 	bl	8006b3c <VL53L0X_WrByte>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	4313      	orrs	r3, r2
 8005078:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800507a:	2200      	movs	r2, #0
 800507c:	21ff      	movs	r1, #255	; 0xff
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fd5c 	bl	8006b3c <VL53L0X_WrByte>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	4313      	orrs	r3, r2
 800508c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800508e:	2200      	movs	r2, #0
 8005090:	2180      	movs	r1, #128	; 0x80
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fd52 	bl	8006b3c <VL53L0X_WrByte>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	7dfb      	ldrb	r3, [r7, #23]
 800509e:	4313      	orrs	r3, r2
 80050a0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80050a2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	200001a4 	.word	0x200001a4

080050b4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050bc:	2300      	movs	r3, #0
 80050be:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80050c4:	f107 030e 	add.w	r3, r7, #14
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff fc22 	bl	8004914 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d035      	beq.n	8005142 <VL53L0X_StartMeasurement+0x8e>
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d04d      	beq.n	8005176 <VL53L0X_StartMeasurement+0xc2>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d165      	bne.n	80051aa <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80050de:	2201      	movs	r2, #1
 80050e0:	2100      	movs	r1, #0
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 fd2a 	bl	8006b3c <VL53L0X_WrByte>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80050f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d15b      	bne.n	80051b0 <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 8005102:	f107 030d 	add.w	r3, r7, #13
 8005106:	461a      	mov	r2, r3
 8005108:	2100      	movs	r1, #0
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fc1c 	bl	8006948 <VL53L0X_RdByte>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3301      	adds	r3, #1
 8005118:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800511a:	7b7a      	ldrb	r2, [r7, #13]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	4013      	ands	r3, r2
 8005120:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	429a      	cmp	r2, r3
 8005126:	d106      	bne.n	8005136 <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 8005128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2bc7      	cmp	r3, #199	; 0xc7
 8005134:	d9e2      	bls.n	80050fc <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2bc7      	cmp	r3, #199	; 0xc7
 800513a:	d939      	bls.n	80051b0 <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 800513c:	23f9      	movs	r3, #249	; 0xf9
 800513e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005140:	e036      	b.n	80051b0 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d105      	bne.n	8005156 <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800514a:	2101      	movs	r1, #1
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff4b 	bl	8004fe8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005156:	2202      	movs	r2, #2
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fcee 	bl	8006b3c <VL53L0X_WrByte>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d123      	bne.n	80051b4 <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2204      	movs	r2, #4
 8005170:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005174:	e01e      	b.n	80051b4 <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005176:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800517e:	2101      	movs	r1, #1
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff31 	bl	8004fe8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800518a:	2204      	movs	r2, #4
 800518c:	2100      	movs	r1, #0
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fcd4 	bl	8006b3c <VL53L0X_WrByte>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2204      	movs	r2, #4
 80051a4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80051a8:	e006      	b.n	80051b8 <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80051aa:	23f8      	movs	r3, #248	; 0xf8
 80051ac:	75fb      	strb	r3, [r7, #23]
 80051ae:	e004      	b.n	80051ba <VL53L0X_StartMeasurement+0x106>
		break;
 80051b0:	bf00      	nop
 80051b2:	e002      	b.n	80051ba <VL53L0X_StartMeasurement+0x106>
		break;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <VL53L0X_StartMeasurement+0x106>
		break;
 80051b8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80051ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80051da:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d112      	bne.n	8005208 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80051e2:	f107 0308 	add.w	r3, r7, #8
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f9f9 	bl	80055e0 <VL53L0X_GetInterruptMaskStatus>
 80051ee:	4603      	mov	r3, r0
 80051f0:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d103      	bne.n	8005200 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e01c      	b.n	800523a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e018      	b.n	800523a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005208:	f107 030d 	add.w	r3, r7, #13
 800520c:	461a      	mov	r2, r3
 800520e:	2114      	movs	r1, #20
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 fb99 	bl	8006948 <VL53L0X_RdByte>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005222:	7b7b      	ldrb	r3, [r7, #13]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e002      	b.n	800523a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b096      	sub	sp, #88	; 0x58
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005258:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800525c:	230c      	movs	r3, #12
 800525e:	2114      	movs	r1, #20
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fbcb 	bl	80069fc <VL53L0X_ReadMulti>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800526c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 80d2 	bne.w	800541a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005282:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005286:	b29b      	uxth	r3, r3
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	b29a      	uxth	r2, r3
 800528c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005290:	b29b      	uxth	r3, r3
 8005292:	4413      	add	r3, r2
 8005294:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800529e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	025b      	lsls	r3, r3, #9
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ba:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80052bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80052d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80052d6:	025b      	lsls	r3, r3, #9
 80052d8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80052de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80052fa:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80052fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800530a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005316:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531c:	d047      	beq.n	80053ae <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800531e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005320:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800532c:	4a58      	ldr	r2, [pc, #352]	; (8005490 <VL53L0X_GetRangingMeasurementData+0x248>)
 800532e:	fb82 1203 	smull	r1, r2, r2, r3
 8005332:	1192      	asrs	r2, r2, #6
 8005334:	17db      	asrs	r3, r3, #31
 8005336:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005338:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	7f1b      	ldrb	r3, [r3, #28]
 8005346:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800534a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800534e:	2b00      	cmp	r3, #0
 8005350:	d02d      	beq.n	80053ae <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005352:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005354:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	121b      	asrs	r3, r3, #8
 800535e:	461a      	mov	r2, r3
				if ((SignalRate
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	4293      	cmp	r3, r2
 8005364:	d10d      	bne.n	8005382 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8005366:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800536e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005372:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005376:	e016      	b.n	80053a6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005378:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800537c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005380:	e011      	b.n	80053a6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005382:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005388:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800538c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800538e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005392:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005396:	121b      	asrs	r3, r3, #8
 8005398:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80053a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80053a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80053ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80053b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80053c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	75da      	strb	r2, [r3, #23]
 80053d0:	e006      	b.n	80053e0 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80053d8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80053e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80053e4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80053e8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 f88a 	bl	8006510 <VL53L0X_get_pal_range_status>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005404:	4313      	orrs	r3, r2
 8005406:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800540a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005412:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800541a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800541e:	2b00      	cmp	r3, #0
 8005420:	d12f      	bne.n	8005482 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f107 040c 	add.w	r4, r7, #12
 8005428:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800542c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800542e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005434:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800543c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800544a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005450:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005456:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800545c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005462:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005468:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005472:	f107 050c 	add.w	r5, r7, #12
 8005476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800547e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005482:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005486:	4618      	mov	r0, r3
 8005488:	3750      	adds	r7, #80	; 0x50
 800548a:	46bd      	mov	sp, r7
 800548c:	bdb0      	pop	{r4, r5, r7, pc}
 800548e:	bf00      	nop
 8005490:	10624dd3 	.word	0x10624dd3

08005494 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff f9ed 	bl	8004884 <VL53L0X_SetDeviceMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80054ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fd62 	bl	8004f80 <VL53L0X_PerformSingleMeasurement>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80054c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff febc 	bl	8005248 <VL53L0X_GetRangingMeasurementData>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80054d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80054dc:	2100      	movs	r1, #0
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f83e 	bl	8005560 <VL53L0X_ClearInterruptMask>
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80054e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	460b      	mov	r3, r1
 8005502:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	461a      	mov	r2, r3
 800550e:	210e      	movs	r1, #14
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fa9f 	bl	8006a54 <VL53L0X_RdWord>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800551a:	8abb      	ldrh	r3, [r7, #20]
 800551c:	045b      	lsls	r3, r3, #17
 800551e:	461a      	mov	r2, r3
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <VL53L0X_GetInterruptThresholds+0x68>)
 8005522:	4013      	ands	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10f      	bne.n	8005550 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	461a      	mov	r2, r3
 8005536:	210c      	movs	r1, #12
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f001 fa8b 	bl	8006a54 <VL53L0X_RdWord>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005542:	8abb      	ldrh	r3, [r7, #20]
 8005544:	045b      	lsls	r3, r3, #17
 8005546:	461a      	mov	r2, r3
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <VL53L0X_GetInterruptThresholds+0x68>)
 800554a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	1ffe0000 	.word	0x1ffe0000

08005560 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005572:	2201      	movs	r2, #1
 8005574:	210b      	movs	r1, #11
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fae0 	bl	8006b3c <VL53L0X_WrByte>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005580:	2200      	movs	r2, #0
 8005582:	210b      	movs	r1, #11
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fad9 	bl	8006b3c <VL53L0X_WrByte>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	4313      	orrs	r3, r2
 8005592:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005594:	f107 030d 	add.w	r3, r7, #13
 8005598:	461a      	mov	r2, r3
 800559a:	2113      	movs	r1, #19
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f9d3 	bl	8006948 <VL53L0X_RdByte>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	3301      	adds	r3, #1
 80055b0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80055b2:	7b7b      	ldrb	r3, [r7, #13]
 80055b4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d803      	bhi.n	80055ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80055c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0d3      	beq.n	8005572 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80055d0:	23f4      	movs	r3, #244	; 0xf4
 80055d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80055d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80055ee:	f107 030e 	add.w	r3, r7, #14
 80055f2:	461a      	mov	r2, r3
 80055f4:	2113      	movs	r1, #19
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 f9a6 	bl	8006948 <VL53L0X_RdByte>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005600:	7bbb      	ldrb	r3, [r7, #14]
 8005602:	f003 0207 	and.w	r2, r3, #7
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	f003 0318 	and.w	r3, r3, #24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005614:	23fa      	movs	r3, #250	; 0xfa
 8005616:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005632:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005636:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800563c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800563e:	f107 0308 	add.w	r3, r7, #8
 8005642:	461a      	mov	r2, r3
 8005644:	2128      	movs	r1, #40	; 0x28
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fa04 	bl	8006a54 <VL53L0X_RdWord>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11e      	bne.n	8005696 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565e:	b29b      	uxth	r3, r3
 8005660:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005662:	893b      	ldrh	r3, [r7, #8]
 8005664:	461a      	mov	r2, r3
 8005666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	dd0b      	ble.n	8005686 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800566e:	893a      	ldrh	r2, [r7, #8]
 8005670:	897b      	ldrh	r3, [r7, #10]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	b29b      	uxth	r3, r3
 8005676:	b21b      	sxth	r3, r3
 8005678:	461a      	mov	r2, r3
					* 250;
 800567a:	23fa      	movs	r3, #250	; 0xfa
 800567c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e007      	b.n	8005696 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	b21b      	sxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	23fa      	movs	r3, #250	; 0xfa
 800568e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005696:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80056b6:	f107 030f 	add.w	r3, r7, #15
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fd82 	bl	80051c6 <VL53L0X_GetMeasurementDataReady>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80056c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d00e      	beq.n	80056f2 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3301      	adds	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2bc7      	cmp	r3, #199	; 0xc7
 80056de:	d902      	bls.n	80056e6 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 80056e0:	23f9      	movs	r3, #249	; 0xf9
 80056e2:	75fb      	strb	r3, [r7, #23]
			break;
 80056e4:	e006      	b.n	80056f4 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 faaa 	bl	8006c40 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80056ec:	e7e3      	b.n	80056b6 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 80056f2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80056f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	3301      	adds	r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005736:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005738:	e002      	b.n	8005740 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d8f8      	bhi.n	800573a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005748:	e017      	b.n	800577a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4413      	add	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d30b      	bcc.n	800576e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4413      	add	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4413      	add	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e002      	b.n	8005774 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e4      	bne.n	800574a <VL53L0X_isqrt+0x24>
	}

	return res;
 8005780:	68fb      	ldr	r3, [r7, #12]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800578e:	b490      	push	{r4, r7}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800579a:	f240 6377 	movw	r3, #1655	; 0x677
 800579e:	f04f 0400 	mov.w	r4, #0
 80057a2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 80057a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80057aa:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80057bc:	68bb      	ldr	r3, [r7, #8]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc90      	pop	{r4, r7}
 80057c6:	4770      	bx	lr

080057c8 <VL53L0X_decode_timeout>:
	return encoded_timeout;

}

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	0a12      	lsrs	r2, r2, #8
 80057de:	b292      	uxth	r2, r2
 80057e0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	4619      	mov	r1, r3
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff ffbf 	bl	800578e <VL53L0X_calc_macro_period_ps>
 8005810:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <VL53L0X_calc_timeout_mclks+0x50>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	099b      	lsrs	r3, r3, #6
 8005820:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005828:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
	timeout_period_mclks =
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	10624dd3 	.word	0x10624dd3

08005848 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff94 	bl	800578e <VL53L0X_calc_macro_period_ps>
 8005866:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800586e:	4a0b      	ldr	r2, [pc, #44]	; (800589c <VL53L0X_calc_timeout_us+0x54>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	099b      	lsrs	r3, r3, #6
 8005876:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	4413      	add	r3, r2
	actual_timeout_period_us =
 8005886:	4a05      	ldr	r2, [pc, #20]	; (800589c <VL53L0X_calc_timeout_us+0x54>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005890:	697b      	ldr	r3, [r7, #20]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	10624dd3 	.word	0x10624dd3

080058a0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	; 0x30
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	460b      	mov	r3, r1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80058c6:	7afb      	ldrb	r3, [r7, #11]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <get_sequence_step_timeout+0x38>
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d002      	beq.n	80058d8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80058d2:	7afb      	ldrb	r3, [r7, #11]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d128      	bne.n	800592a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80058d8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80058dc:	461a      	mov	r2, r3
 80058de:	2100      	movs	r1, #0
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff f83d 	bl	8004960 <VL53L0X_GetVcselPulsePeriod>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80058ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80058f4:	f107 0320 	add.w	r3, r7, #32
 80058f8:	461a      	mov	r2, r3
 80058fa:	2146      	movs	r1, #70	; 0x46
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f001 f823 	bl	8006948 <VL53L0X_RdByte>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005908:	f897 3020 	ldrb.w	r3, [r7, #32]
 800590c:	b29b      	uxth	r3, r3
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ff5a 	bl	80057c8 <VL53L0X_decode_timeout>
 8005914:	4603      	mov	r3, r0
 8005916:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005918:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800591c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff ff91 	bl	8005848 <VL53L0X_calc_timeout_us>
 8005926:	62b8      	str	r0, [r7, #40]	; 0x28
 8005928:	e092      	b.n	8005a50 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d135      	bne.n	800599c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005930:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005934:	461a      	mov	r2, r3
 8005936:	2100      	movs	r1, #0
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff f811 	bl	8004960 <VL53L0X_GetVcselPulsePeriod>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005944:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8081 	bne.w	8005a50 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800594e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005952:	461a      	mov	r2, r3
 8005954:	2100      	movs	r1, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff f802 	bl	8004960 <VL53L0X_GetVcselPulsePeriod>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800596a:	f107 031e 	add.w	r3, r7, #30
 800596e:	461a      	mov	r2, r3
 8005970:	2151      	movs	r1, #81	; 0x51
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f001 f86e 	bl	8006a54 <VL53L0X_RdWord>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff21 	bl	80057c8 <VL53L0X_decode_timeout>
 8005986:	4603      	mov	r3, r0
 8005988:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800598a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800598e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005990:	4619      	mov	r1, r3
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff ff58 	bl	8005848 <VL53L0X_calc_timeout_us>
 8005998:	62b8      	str	r0, [r7, #40]	; 0x28
 800599a:	e059      	b.n	8005a50 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800599c:	7afb      	ldrb	r3, [r7, #11]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d156      	bne.n	8005a50 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff f843 	bl	8004a34 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01d      	beq.n	80059f4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80059b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80059bc:	461a      	mov	r2, r3
 80059be:	2100      	movs	r1, #0
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7fe ffcd 	bl	8004960 <VL53L0X_GetVcselPulsePeriod>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80059cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80059d4:	f107 031e 	add.w	r3, r7, #30
 80059d8:	461a      	mov	r2, r3
 80059da:	2151      	movs	r1, #81	; 0x51
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f001 f839 	bl	8006a54 <VL53L0X_RdWord>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80059e8:	8bfb      	ldrh	r3, [r7, #30]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff feec 	bl	80057c8 <VL53L0X_decode_timeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80059f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80059fc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005a00:	461a      	mov	r2, r3
 8005a02:	2101      	movs	r1, #1
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7fe ffab 	bl	8004960 <VL53L0X_GetVcselPulsePeriod>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005a10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005a18:	f107 031c 	add.w	r3, r7, #28
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2171      	movs	r1, #113	; 0x71
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f001 f817 	bl	8006a54 <VL53L0X_RdWord>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005a2c:	8bbb      	ldrh	r3, [r7, #28]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff feca 	bl	80057c8 <VL53L0X_decode_timeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005a40:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a46:	4619      	mov	r1, r3
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fefd 	bl	8005848 <VL53L0X_calc_timeout_us>
 8005a4e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a54:	601a      	str	r2, [r3, #0]

	return Status;
 8005a56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3730      	adds	r7, #48	; 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b086      	sub	sp, #24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d00a      	beq.n	8005a94 <VL53L0X_get_vcsel_pulse_period+0x32>
 8005a7e:	e013      	b.n	8005aa8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005a80:	f107 0316 	add.w	r3, r7, #22
 8005a84:	461a      	mov	r2, r3
 8005a86:	2150      	movs	r1, #80	; 0x50
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 ff5d 	bl	8006948 <VL53L0X_RdByte>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005a92:	e00b      	b.n	8005aac <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005a94:	f107 0316 	add.w	r3, r7, #22
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2170      	movs	r1, #112	; 0x70
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 ff53 	bl	8006948 <VL53L0X_RdByte>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005aa6:	e001      	b.n	8005aac <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005aa8:	23fc      	movs	r3, #252	; 0xfc
 8005aaa:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d107      	bne.n	8005ac4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005ab4:	7dbb      	ldrb	r3, [r7, #22]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fe22 	bl	8005700 <VL53L0X_decode_vcsel_period>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	701a      	strb	r2, [r3, #0]

	return Status;
 8005ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
	return Status;
}

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b090      	sub	sp, #64	; 0x40
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005ae0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005ae4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005ae6:	f240 7376 	movw	r3, #1910	; 0x776
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005aec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005af2:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005af8:	f240 234e 	movw	r3, #590	; 0x24e
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005afe:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005b04:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005b0a:	f240 2326 	movw	r3, #550	; 0x226
 8005b0e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	441a      	add	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fe ff85 	bl	8004a34 <VL53L0X_GetSequenceStepEnables>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005b30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b3c:	e075      	b.n	8005c2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005b3e:	7e3b      	ldrb	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8005b44:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005b4a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d030      	beq.n	8005bb2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	461a      	mov	r2, r3
 8005b56:	2102      	movs	r1, #2
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fea1 	bl	80058a0 <get_sequence_step_timeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005b64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d122      	bne.n	8005bb2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005b6c:	7e3b      	ldrb	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005b76:	6939      	ldr	r1, [r7, #16]
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b7c:	441a      	add	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005b82:	7ebb      	ldrb	r3, [r7, #26]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	440b      	add	r3, r1
 8005b92:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005b94:	441a      	add	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e00a      	b.n	8005bb2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005b9c:	7e7b      	ldrb	r3, [r7, #25]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005ba6:	6939      	ldr	r1, [r7, #16]
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005bac:	441a      	add	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d114      	bne.n	8005be4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005bba:	7efb      	ldrb	r3, [r7, #27]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005bc0:	f107 030c 	add.w	r3, r7, #12
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2103      	movs	r1, #3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe69 	bl	80058a0 <get_sequence_step_timeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005bde:	441a      	add	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005be4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d114      	bne.n	8005c16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005bec:	7f3b      	ldrb	r3, [r7, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d011      	beq.n	8005c16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe50 	bl	80058a0 <get_sequence_step_timeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005c0a:	6979      	ldr	r1, [r7, #20]
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c10:	441a      	add	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3740      	adds	r7, #64	; 0x40
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005c46:	e0c6      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	3301      	adds	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	2bff      	cmp	r3, #255	; 0xff
 8005c5c:	f040 808d 	bne.w	8005d7a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	4413      	add	r3, r2
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	747b      	strb	r3, [r7, #17]
			Index++;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005c70:	7c7b      	ldrb	r3, [r7, #17]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d87e      	bhi.n	8005d74 <VL53L0X_load_tuning_settings+0x140>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <VL53L0X_load_tuning_settings+0x48>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005cc7 	.word	0x08005cc7
 8005c84:	08005d01 	.word	0x08005d01
 8005c88:	08005d3b 	.word	0x08005d3b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	743b      	strb	r3, [r7, #16]
				Index++;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005cac:	7c3b      	ldrb	r3, [r7, #16]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	89ba      	ldrh	r2, [r7, #12]
 8005cc0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8005cc4:	e087      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	4413      	add	r3, r2
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	743b      	strb	r3, [r7, #16]
				Index++;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	4413      	add	r3, r2
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005ce6:	7c3b      	ldrb	r3, [r7, #16]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	89ba      	ldrh	r2, [r7, #12]
 8005cfa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005cfe:	e06a      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005d20:	7c3b      	ldrb	r3, [r7, #16]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	89ba      	ldrh	r2, [r7, #12]
 8005d34:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005d38:	e04d      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3301      	adds	r3, #1
 8005d48:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3301      	adds	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005d5a:	7c3b      	ldrb	r3, [r7, #16]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	89ba      	ldrh	r2, [r7, #12]
 8005d6e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8005d72:	e030      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d74:	23fc      	movs	r3, #252	; 0xfc
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e02d      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d828      	bhi.n	8005dd2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8005d90:	2300      	movs	r3, #0
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e00f      	b.n	8005db6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	7819      	ldrb	r1, [r3, #0]
 8005d9e:	f107 0208 	add.w	r2, r7, #8
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	4413      	add	r3, r2
 8005da6:	460a      	mov	r2, r1
 8005da8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3301      	adds	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	3301      	adds	r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	dbeb      	blt.n	8005d96 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005dbe:	7cfb      	ldrb	r3, [r7, #19]
 8005dc0:	f107 0208 	add.w	r2, r7, #8
 8005dc4:	7cb9      	ldrb	r1, [r7, #18]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fde8 	bl	800699c <VL53L0X_WriteMulti>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e001      	b.n	8005dd6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dd2:	23fc      	movs	r3, #252	; 0xfc
 8005dd4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4413      	add	r3, r2
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <VL53L0X_load_tuning_settings+0x1b8>
 8005de2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f43f af2e 	beq.w	8005c48 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005e0e:	f107 0313 	add.w	r3, r7, #19
 8005e12:	4619      	mov	r1, r3
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fe fe99 	bl	8004b4c <VL53L0X_GetXTalkCompensationEnable>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005e1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d111      	bne.n	8005e4a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005e26:	7cfb      	ldrb	r3, [r7, #19]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	8a9b      	ldrh	r3, [r3, #20]
 8005e36:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3380      	adds	r3, #128	; 0x80
 8005e44:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	461a      	mov	r2, r3
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff ffbe 	bl	8005df8 <VL53L0X_get_total_xtalk_rate>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	441a      	add	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]

	return Status;
 8005e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b09a      	sub	sp, #104	; 0x68
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005eae:	2312      	movs	r3, #18
 8005eb0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005eb8:	2342      	movs	r3, #66	; 0x42
 8005eba:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005ebc:	2306      	movs	r3, #6
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005ec0:	2307      	movs	r3, #7
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	3380      	adds	r3, #128	; 0x80
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0c:	4413      	add	r3, r2
 8005f0e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005f10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005f1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8005f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	085a      	lsrs	r2, r3, #1
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	441a      	add	r2, r3
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f74:	fb02 f303 	mul.w	r3, r2, r3
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d302      	bcc.n	8005f88 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8005f82:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <VL53L0X_calc_dmax+0x238>)
 8005f84:	663b      	str	r3, [r7, #96]	; 0x60
 8005f86:	e016      	b.n	8005fb6 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	085a      	lsrs	r2, r3, #1
 8005f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8e:	441a      	add	r2, r3
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8005f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8005fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb8:	039b      	lsls	r3, r3, #14
 8005fba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005fbe:	4a47      	ldr	r2, [pc, #284]	; (80060dc <VL53L0X_calc_dmax+0x23c>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	099b      	lsrs	r3, r3, #6
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ffe:	0b9b      	lsrs	r3, r3, #14
 8006000:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006006:	4413      	add	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800600a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	039b      	lsls	r3, r3, #14
 8006022:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	fbb2 f3f3 	udiv	r3, r2, r3
 8006036:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006048:	4a24      	ldr	r2, [pc, #144]	; (80060dc <VL53L0X_calc_dmax+0x23c>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	099b      	lsrs	r3, r3, #6
 8006050:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800605e:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <VL53L0X_calc_dmax+0x23c>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606a:	3380      	adds	r3, #128	; 0x80
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d008      	beq.n	8006088 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	085a      	lsrs	r2, r3, #1
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	441a      	add	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	65bb      	str	r3, [r7, #88]	; 0x58
 8006086:	e001      	b.n	800608c <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800608c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800608e:	f7ff fb4a 	bl	8005726 <VL53L0X_isqrt>
 8006092:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d008      	beq.n	80060ac <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	085a      	lsrs	r2, r3, #1
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	441a      	add	r2, r3
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060aa:	e001      	b.n	80060b0 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80060b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80060b2:	f7ff fb38 	bl	8005726 <VL53L0X_isqrt>
 80060b6:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80060b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d902      	bls.n	80060cc <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80060c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ca:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80060cc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3768      	adds	r7, #104	; 0x68
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	fff00000 	.word	0xfff00000
 80060dc:	10624dd3 	.word	0x10624dd3

080060e0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b0b2      	sub	sp, #200	; 0xc8
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80060ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80060f6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80060fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80060fe:	2342      	movs	r3, #66	; 0x42
 8006100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006104:	f241 235c 	movw	r3, #4700	; 0x125c
 8006108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800610c:	4b6b      	ldr	r3, [pc, #428]	; (80062bc <VL53L0X_calc_sigma_estimate+0x1dc>)
 800610e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006112:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800611a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006128:	4b65      	ldr	r3, [pc, #404]	; (80062c0 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800612a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800612c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006130:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006132:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006136:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8006138:	f240 6377 	movw	r3, #1655	; 0x677
 800613c:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006152:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006160:	f107 0310 	add.w	r3, r7, #16
 8006164:	461a      	mov	r2, r3
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fe74 	bl	8005e56 <VL53L0X_get_total_signal_rate>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006174:	f107 0314 	add.w	r3, r7, #20
 8006178:	461a      	mov	r2, r3
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fe3b 	bl	8005df8 <VL53L0X_get_total_xtalk_rate>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006196:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
 80061a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80061ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80061b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d902      	bls.n	80061bc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80061b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 80061bc:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d164      	bne.n	800628e <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80061d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80061d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80061da:	461a      	mov	r2, r3
 80061dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff fb08 	bl	80057f4 <VL53L0X_calc_timeout_mclks>
 80061e4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061ec:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80061f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80061f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061fc:	461a      	mov	r2, r3
 80061fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff faf7 	bl	80057f4 <VL53L0X_calc_timeout_mclks>
 8006206:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006208:	2303      	movs	r3, #3
 800620a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800620e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006212:	2b08      	cmp	r3, #8
 8006214:	d102      	bne.n	800621c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8006216:	2302      	movs	r3, #2
 8006218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800621c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006220:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006222:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	02db      	lsls	r3, r3, #11
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006234:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	099b      	lsrs	r3, r3, #6
 8006240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8006244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006256:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	099b      	lsrs	r3, r3, #6
 8006262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	3380      	adds	r3, #128	; 0x80
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800627c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006280:	3380      	adds	r3, #128	; 0x80
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800628e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8006296:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800629a:	e12e      	b.n	80064fa <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 800629c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d112      	bne.n	80062c8 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80062a8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80062b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e11c      	b.n	80064f6 <VL53L0X_calc_sigma_estimate+0x416>
 80062bc:	028f87ae 	.word	0x028f87ae
 80062c0:	0006999a 	.word	0x0006999a
 80062c4:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 80062c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80062d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062da:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80062dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062de:	041a      	lsls	r2, r3, #16
 80062e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80062ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80062f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80062fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800630a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fa05 	bl	8005726 <VL53L0X_isqrt>
 800631c:	4603      	mov	r3, r0
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	891b      	ldrh	r3, [r3, #8]
 8006326:	461a      	mov	r2, r3
 8006328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006332:	041a      	lsls	r2, r3, #16
 8006334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006338:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800633a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800633e:	4a71      	ldr	r2, [pc, #452]	; (8006504 <VL53L0X_calc_sigma_estimate+0x424>)
 8006340:	fba2 2303 	umull	r2, r3, r2, r3
 8006344:	099b      	lsrs	r3, r3, #6
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8006348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800634a:	041a      	lsls	r2, r3, #16
 800634c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006350:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8006352:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8006356:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <VL53L0X_calc_sigma_estimate+0x424>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	099b      	lsrs	r3, r3, #6
 800635e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfb8      	it	lt
 8006372:	425b      	neglt	r3, r3
 8006374:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800637c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800637e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639a:	4413      	add	r3, r2
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	0b9b      	lsrs	r3, r3, #14
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 80063dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80063f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	4413      	add	r3, r2
 80063fc:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80063fe:	6a38      	ldr	r0, [r7, #32]
 8006400:	f7ff f991 	bl	8005726 <VL53L0X_isqrt>
 8006404:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3332      	adds	r3, #50	; 0x32
 8006410:	4a3d      	ldr	r2, [pc, #244]	; (8006508 <VL53L0X_calc_sigma_estimate+0x428>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095a      	lsrs	r2, r3, #5
 8006418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006426:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006436:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800643a:	3308      	adds	r3, #8
 800643c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8006440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006444:	4a31      	ldr	r2, [pc, #196]	; (800650c <VL53L0X_calc_sigma_estimate+0x42c>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0b5b      	lsrs	r3, r3, #13
 800644c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006458:	429a      	cmp	r2, r3
 800645a:	d903      	bls.n	8006464 <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800645c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800646c:	fb02 f303 	mul.w	r3, r2, r3
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8006472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	4413      	add	r3, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff f94d 	bl	8005726 <VL53L0X_isqrt>
 800648c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800649c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <VL53L0X_calc_sigma_estimate+0x3d6>
 80064a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <VL53L0X_calc_sigma_estimate+0x3d6>
 80064aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d903      	bls.n	80064be <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80064b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064c4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 80064d0:	6939      	ldr	r1, [r7, #16]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fcd8 	bl	8005ea0 <VL53L0X_calc_dmax>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064f6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	37b8      	adds	r7, #184	; 0xb8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	10624dd3 	.word	0x10624dd3
 8006508:	51eb851f 	.word	0x51eb851f
 800650c:	d1b71759 	.word	0xd1b71759

08006510 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b090      	sub	sp, #64	; 0x40
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	461a      	mov	r2, r3
 800651c:	460b      	mov	r3, r1
 800651e:	72fb      	strb	r3, [r7, #11]
 8006520:	4613      	mov	r3, r2
 8006522:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006524:	2300      	movs	r3, #0
 8006526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	10db      	asrs	r3, r3, #3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006570:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
 8006578:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800657c:	2b05      	cmp	r3, #5
 800657e:	d013      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006580:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006584:	2b07      	cmp	r3, #7
 8006586:	d00f      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006588:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800658c:	2b0c      	cmp	r3, #12
 800658e:	d00b      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006590:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006594:	2b0d      	cmp	r3, #13
 8006596:	d007      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006598:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800659c:	2b0e      	cmp	r3, #14
 800659e:	d003      	beq.n	80065a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80065a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80065a4:	2b0f      	cmp	r3, #15
 80065a6:	d103      	bne.n	80065b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80065ae:	e002      	b.n	80065b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 80065b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d107      	bne.n	80065ce <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065be:	2201      	movs	r2, #1
 80065c0:	21ff      	movs	r1, #255	; 0xff
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 faba 	bl	8006b3c <VL53L0X_WrByte>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 80065ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 80065d6:	f107 0316 	add.w	r3, r7, #22
 80065da:	461a      	mov	r2, r3
 80065dc:	21b6      	movs	r1, #182	; 0xb6
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fa38 	bl	8006a54 <VL53L0X_RdWord>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80065ea:	8afb      	ldrh	r3, [r7, #22]
 80065ec:	025b      	lsls	r3, r3, #9
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 80065f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065f8:	2200      	movs	r2, #0
 80065fa:	21ff      	movs	r1, #255	; 0xff
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fa9d 	bl	8006b3c <VL53L0X_WrByte>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800660c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006610:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006618:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800661c:	461a      	mov	r2, r3
 800661e:	2100      	movs	r1, #0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7fe fb67 	bl	8004cf4 <VL53L0X_GetLimitCheckEnable>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800662c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02e      	beq.n	8006692 <VL53L0X_get_pal_range_status+0x182>
 8006634:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006638:	2b00      	cmp	r3, #0
 800663a:	d12a      	bne.n	8006692 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800663c:	f107 0310 	add.w	r3, r7, #16
 8006640:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006644:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fd4a 	bl	80060e0 <VL53L0X_calc_sigma_estimate>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006652:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	b29a      	uxth	r2, r3
 800665e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006660:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006662:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006666:	2b00      	cmp	r3, #0
 8006668:	d113      	bne.n	8006692 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800666a:	f107 0320 	add.w	r3, r7, #32
 800666e:	461a      	mov	r2, r3
 8006670:	2100      	movs	r1, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7fe fbc4 	bl	8004e00 <VL53L0X_GetLimitCheckValue>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006692:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800669a:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800669e:	461a      	mov	r2, r3
 80066a0:	2102      	movs	r1, #2
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7fe fb26 	bl	8004cf4 <VL53L0X_GetLimitCheckEnable>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80066ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <VL53L0X_get_pal_range_status+0x1d6>
 80066b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d113      	bne.n	80066e6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80066be:	f107 031c 	add.w	r3, r7, #28
 80066c2:	461a      	mov	r2, r3
 80066c4:	2102      	movs	r1, #2
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7fe fb9a 	bl	8004e00 <VL53L0X_GetLimitCheckValue>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80066d8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80066da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d902      	bls.n	80066e6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80066e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80066ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066f2:	461a      	mov	r2, r3
 80066f4:	2103      	movs	r1, #3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7fe fafc 	bl	8004cf4 <VL53L0X_GetLimitCheckEnable>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006702:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d023      	beq.n	8006752 <VL53L0X_get_pal_range_status+0x242>
 800670a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11f      	bne.n	8006752 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	e005      	b.n	800672a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	021a      	lsls	r2, r3, #8
 8006722:	893b      	ldrh	r3, [r7, #8]
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800672a:	f107 0318 	add.w	r3, r7, #24
 800672e:	461a      	mov	r2, r3
 8006730:	2103      	movs	r1, #3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7fe fb64 	bl	8004e00 <VL53L0X_GetLimitCheckValue>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006744:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006748:	429a      	cmp	r2, r3
 800674a:	d202      	bcs.n	8006752 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006752:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006756:	2b00      	cmp	r3, #0
 8006758:	d14a      	bne.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800675a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800675e:	2b01      	cmp	r3, #1
 8006760:	d103      	bne.n	800676a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e042      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800676a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800676e:	2b01      	cmp	r3, #1
 8006770:	d007      	beq.n	8006782 <VL53L0X_get_pal_range_status+0x272>
 8006772:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006776:	2b02      	cmp	r3, #2
 8006778:	d003      	beq.n	8006782 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800677a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800677e:	2b03      	cmp	r3, #3
 8006780:	d103      	bne.n	800678a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	2205      	movs	r2, #5
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e032      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800678a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800678e:	2b06      	cmp	r3, #6
 8006790:	d003      	beq.n	800679a <VL53L0X_get_pal_range_status+0x28a>
 8006792:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006796:	2b09      	cmp	r3, #9
 8006798:	d103      	bne.n	80067a2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	2204      	movs	r2, #4
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	e026      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80067a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d007      	beq.n	80067ba <VL53L0X_get_pal_range_status+0x2aa>
 80067aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d003      	beq.n	80067ba <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80067b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d103      	bne.n	80067c2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80067ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067bc:	2203      	movs	r2, #3
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e016      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80067c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d003      	beq.n	80067d2 <VL53L0X_get_pal_range_status+0x2c2>
 80067ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d103      	bne.n	80067da <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	2202      	movs	r2, #2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e00a      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80067da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d103      	bne.n	80067ea <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80067f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fa:	2200      	movs	r2, #0
 80067fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80067fe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006802:	461a      	mov	r2, r3
 8006804:	2101      	movs	r1, #1
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7fe fa74 	bl	8004cf4 <VL53L0X_GetLimitCheckEnable>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006812:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006816:	2b00      	cmp	r3, #0
 8006818:	d14f      	bne.n	80068ba <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800681a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <VL53L0X_get_pal_range_status+0x31a>
 8006822:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006826:	2b01      	cmp	r3, #1
 8006828:	d103      	bne.n	8006832 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006830:	e002      	b.n	8006838 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800683e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006846:	2b04      	cmp	r3, #4
 8006848:	d003      	beq.n	8006852 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800684a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006858:	e002      	b.n	8006860 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006866:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800686a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <VL53L0X_get_pal_range_status+0x36a>
 8006872:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d103      	bne.n	8006882 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006880:	e002      	b.n	8006888 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800688e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <VL53L0X_get_pal_range_status+0x392>
 800689a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d103      	bne.n	80068aa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a8:	e002      	b.n	80068b0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80068b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80068be:	4618      	mov	r0, r3
 80068c0:	3740      	adds	r7, #64	; 0x40
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af02      	add	r7, sp, #8
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	330a      	adds	r3, #10
 80068d6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80068e4:	b299      	uxth	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	f000 fea3 	bl	800763c <HAL_I2C_Master_Transmit>
 80068f6:	4603      	mov	r3, r0
 80068f8:	613b      	str	r3, [r7, #16]
    
    return status;
 80068fa:	693b      	ldr	r3, [r7, #16]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	330a      	adds	r3, #10
 8006914:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	b299      	uxth	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	b29a      	uxth	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4613      	mov	r3, r2
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	f000 ff75 	bl	8007824 <HAL_I2C_Master_Receive>
 800693a:	4603      	mov	r3, r0
 800693c:	613b      	str	r3, [r7, #16]
    
    return status;
 800693e:	693b      	ldr	r3, [r7, #16]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	460b      	mov	r3, r1
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800695a:	f107 030b 	add.w	r3, r7, #11
 800695e:	2201      	movs	r2, #1
 8006960:	4619      	mov	r1, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff ffaf 	bl	80068c6 <_I2CWrite>
 8006968:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006970:	23ec      	movs	r3, #236	; 0xec
 8006972:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006974:	e00c      	b.n	8006990 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8006976:	2201      	movs	r2, #1
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff ffc2 	bl	8006904 <_I2CRead>
 8006980:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006988:	23ec      	movs	r3, #236	; 0xec
 800698a:	75fb      	strb	r3, [r7, #23]
 800698c:	e000      	b.n	8006990 <VL53L0X_RdByte+0x48>
    }
done:
 800698e:	bf00      	nop
    return Status;
 8006990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	460b      	mov	r3, r1
 80069aa:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b3f      	cmp	r3, #63	; 0x3f
 80069b4:	d902      	bls.n	80069bc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80069b6:	f06f 0303 	mvn.w	r3, #3
 80069ba:	e016      	b.n	80069ea <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <VL53L0X_WriteMulti+0x58>)
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	480c      	ldr	r0, [pc, #48]	; (80069f8 <VL53L0X_WriteMulti+0x5c>)
 80069c8:	f005 fab9 	bl	800bf3e <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	461a      	mov	r2, r3
 80069d2:	4908      	ldr	r1, [pc, #32]	; (80069f4 <VL53L0X_WriteMulti+0x58>)
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff ff76 	bl	80068c6 <_I2CWrite>
 80069da:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80069e2:	23ec      	movs	r3, #236	; 0xec
 80069e4:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 80069e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000547c 	.word	0x2000547c
 80069f8:	2000547d 	.word	0x2000547d

080069fc <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8006a10:	f107 030b 	add.w	r3, r7, #11
 8006a14:	2201      	movs	r2, #1
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff ff54 	bl	80068c6 <_I2CWrite>
 8006a1e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006a26:	23ec      	movs	r3, #236	; 0xec
 8006a28:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006a2a:	e00c      	b.n	8006a46 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff67 	bl	8006904 <_I2CRead>
 8006a36:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006a3e:	23ec      	movs	r3, #236	; 0xec
 8006a40:	75fb      	strb	r3, [r7, #23]
 8006a42:	e000      	b.n	8006a46 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006a44:	bf00      	nop
    return Status;
 8006a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8006a66:	f107 030b 	add.w	r3, r7, #11
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff29 	bl	80068c6 <_I2CWrite>
 8006a74:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006a7c:	23ec      	movs	r3, #236	; 0xec
 8006a7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006a80:	e017      	b.n	8006ab2 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006a82:	2202      	movs	r2, #2
 8006a84:	490e      	ldr	r1, [pc, #56]	; (8006ac0 <VL53L0X_RdWord+0x6c>)
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ff3c 	bl	8006904 <_I2CRead>
 8006a8c:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006a94:	23ec      	movs	r3, #236	; 0xec
 8006a96:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006a98:	e00b      	b.n	8006ab2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <VL53L0X_RdWord+0x6c>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <VL53L0X_RdWord+0x6c>)
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8006ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2000547c 	.word	0x2000547c

08006ac4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8006ad6:	f107 030b 	add.w	r3, r7, #11
 8006ada:	2201      	movs	r2, #1
 8006adc:	4619      	mov	r1, r3
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff fef1 	bl	80068c6 <_I2CWrite>
 8006ae4:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006aec:	23ec      	movs	r3, #236	; 0xec
 8006aee:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006af0:	e01b      	b.n	8006b2a <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8006af2:	2204      	movs	r2, #4
 8006af4:	4910      	ldr	r1, [pc, #64]	; (8006b38 <VL53L0X_RdDWord+0x74>)
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff ff04 	bl	8006904 <_I2CRead>
 8006afc:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006b04:	23ec      	movs	r3, #236	; 0xec
 8006b06:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006b08:	e00f      	b.n	8006b2a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <VL53L0X_RdDWord+0x74>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	061a      	lsls	r2, r3, #24
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <VL53L0X_RdDWord+0x74>)
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	441a      	add	r2, r3
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <VL53L0X_RdDWord+0x74>)
 8006b1a:	789b      	ldrb	r3, [r3, #2]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	4413      	add	r3, r2
 8006b20:	4a05      	ldr	r2, [pc, #20]	; (8006b38 <VL53L0X_RdDWord+0x74>)
 8006b22:	78d2      	ldrb	r2, [r2, #3]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]

done:
    return Status;
 8006b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2000547c 	.word	0x2000547c

08006b3c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006b50:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <VL53L0X_WrByte+0x44>)
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006b56:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <VL53L0X_WrByte+0x44>)
 8006b58:	78bb      	ldrb	r3, [r7, #2]
 8006b5a:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4908      	ldr	r1, [pc, #32]	; (8006b80 <VL53L0X_WrByte+0x44>)
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff feb0 	bl	80068c6 <_I2CWrite>
 8006b66:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006b6e:	23ec      	movs	r3, #236	; 0xec
 8006b70:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	2000547c 	.word	0x2000547c

08006b84 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
 8006b90:	4613      	mov	r3, r2
 8006b92:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006b98:	4a0e      	ldr	r2, [pc, #56]	; (8006bd4 <VL53L0X_WrWord+0x50>)
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006b9e:	883b      	ldrh	r3, [r7, #0]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <VL53L0X_WrWord+0x50>)
 8006ba8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006baa:	883b      	ldrh	r3, [r7, #0]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <VL53L0X_WrWord+0x50>)
 8006bb0:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	4907      	ldr	r1, [pc, #28]	; (8006bd4 <VL53L0X_WrWord+0x50>)
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fe85 	bl	80068c6 <_I2CWrite>
 8006bbc:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006bc4:	23ec      	movs	r3, #236	; 0xec
 8006bc6:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8006bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	2000547c 	.word	0x2000547c

08006bd8 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	461a      	mov	r2, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	70fb      	strb	r3, [r7, #3]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70bb      	strb	r3, [r7, #2]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8006bf6:	f107 020e 	add.w	r2, r7, #14
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fea2 	bl	8006948 <VL53L0X_RdByte>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8006c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d110      	bne.n	8006c32 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8006c10:	7bba      	ldrb	r2, [r7, #14]
 8006c12:	78bb      	ldrb	r3, [r7, #2]
 8006c14:	4013      	ands	r3, r2
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	787b      	ldrb	r3, [r7, #1]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8006c20:	7bba      	ldrb	r2, [r7, #14]
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff ff88 	bl	8006b3c <VL53L0X_WrByte>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e000      	b.n	8006c34 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8006c32:	bf00      	nop
done:
    return Status;
 8006c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8006c4c:	2002      	movs	r0, #2
 8006c4e:	f000 f8a5 	bl	8006d9c <HAL_Delay>
    return status;
 8006c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006c64:	f7fd fac4 	bl	80041f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006c68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006c6a:	e003      	b.n	8006c74 <LoopCopyDataInit>

08006c6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006c6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006c70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006c72:	3104      	adds	r1, #4

08006c74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006c74:	480a      	ldr	r0, [pc, #40]	; (8006ca0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006c78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006c7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006c7c:	d3f6      	bcc.n	8006c6c <CopyDataInit>
	ldr	r2, =_sbss
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006c80:	e002      	b.n	8006c88 <LoopFillZerobss>

08006c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006c82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006c84:	f842 3b04 	str.w	r3, [r2], #4

08006c88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <LoopForever+0x16>)
	cmp	r2, r3
 8006c8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006c8c:	d3f9      	bcc.n	8006c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c8e:	f005 f923 	bl	800bed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c92:	f7fb fdcb 	bl	800282c <main>

08006c96 <LoopForever>:

LoopForever:
    b LoopForever
 8006c96:	e7fe      	b.n	8006c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006c98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006c9c:	0800e340 	.word	0x0800e340
	ldr	r0, =_sdata
 8006ca0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ca4:	20000534 	.word	0x20000534
	ldr	r2, =_sbss
 8006ca8:	20000534 	.word	0x20000534
	ldr	r3, = _ebss
 8006cac:	200054c4 	.word	0x200054c4

08006cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006cb0:	e7fe      	b.n	8006cb0 <ADC1_2_IRQHandler>

08006cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cbc:	2003      	movs	r0, #3
 8006cbe:	f000 f95f 	bl	8006f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f000 f80e 	bl	8006ce4 <HAL_InitTick>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	e001      	b.n	8006cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006cd4:	f7fd f8f2 	bl	8003ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <HAL_InitTick+0x6c>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d023      	beq.n	8006d40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006cf8:	4b16      	ldr	r3, [pc, #88]	; (8006d54 <HAL_InitTick+0x70>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <HAL_InitTick+0x6c>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f96b 	bl	8006fea <HAL_SYSTICK_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10f      	bne.n	8006d3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d809      	bhi.n	8006d34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d20:	2200      	movs	r2, #0
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	f000 f935 	bl	8006f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <HAL_InitTick+0x74>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e007      	b.n	8006d44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
 8006d38:	e004      	b.n	8006d44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	e001      	b.n	8006d44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000360 	.word	0x20000360
 8006d54:	200001a0 	.word	0x200001a0
 8006d58:	2000035c 	.word	0x2000035c

08006d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_IncTick+0x20>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_IncTick+0x24>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <HAL_IncTick+0x24>)
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000360 	.word	0x20000360
 8006d80:	200054bc 	.word	0x200054bc

08006d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return uwTick;
 8006d88:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <HAL_GetTick+0x14>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	200054bc 	.word	0x200054bc

08006d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006da4:	f7ff ffee 	bl	8006d84 <HAL_GetTick>
 8006da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d005      	beq.n	8006dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <HAL_Delay+0x40>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dc2:	bf00      	nop
 8006dc4:	f7ff ffde 	bl	8006d84 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d8f7      	bhi.n	8006dc4 <HAL_Delay+0x28>
  {
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000360 	.word	0x20000360

08006de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <__NVIC_SetPriorityGrouping+0x44>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e12:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <__NVIC_SetPriorityGrouping+0x44>)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	60d3      	str	r3, [r2, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	e000ed00 	.word	0xe000ed00

08006e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <__NVIC_GetPriorityGrouping+0x18>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	f003 0307 	and.w	r3, r3, #7
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	e000ed00 	.word	0xe000ed00

08006e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	db0b      	blt.n	8006e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	f003 021f 	and.w	r2, r3, #31
 8006e5c:	4907      	ldr	r1, [pc, #28]	; (8006e7c <__NVIC_EnableIRQ+0x38>)
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2001      	movs	r0, #1
 8006e66:	fa00 f202 	lsl.w	r2, r0, r2
 8006e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e100 	.word	0xe000e100

08006e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db0a      	blt.n	8006eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	490c      	ldr	r1, [pc, #48]	; (8006ecc <__NVIC_SetPriority+0x4c>)
 8006e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ea8:	e00a      	b.n	8006ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <__NVIC_SetPriority+0x50>)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	3b04      	subs	r3, #4
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	761a      	strb	r2, [r3, #24]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	e000e100 	.word	0xe000e100
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f1c3 0307 	rsb	r3, r3, #7
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	bf28      	it	cs
 8006ef2:	2304      	movcs	r3, #4
 8006ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	2b06      	cmp	r3, #6
 8006efc:	d902      	bls.n	8006f04 <NVIC_EncodePriority+0x30>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3b03      	subs	r3, #3
 8006f02:	e000      	b.n	8006f06 <NVIC_EncodePriority+0x32>
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	401a      	ands	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	fa01 f303 	lsl.w	r3, r1, r3
 8006f26:	43d9      	mvns	r1, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f2c:	4313      	orrs	r3, r2
         );
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3724      	adds	r7, #36	; 0x24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f4c:	d301      	bcc.n	8006f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e00f      	b.n	8006f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <SysTick_Config+0x40>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f5a:	210f      	movs	r1, #15
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	f7ff ff8e 	bl	8006e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <SysTick_Config+0x40>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f6a:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <SysTick_Config+0x40>)
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	e000e010 	.word	0xe000e010

08006f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ff29 	bl	8006de0 <__NVIC_SetPriorityGrouping>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fa8:	f7ff ff3e 	bl	8006e28 <__NVIC_GetPriorityGrouping>
 8006fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	6978      	ldr	r0, [r7, #20]
 8006fb4:	f7ff ff8e 	bl	8006ed4 <NVIC_EncodePriority>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ff5d 	bl	8006e80 <__NVIC_SetPriority>
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff31 	bl	8006e44 <__NVIC_EnableIRQ>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff ffa2 	bl	8006f3c <SysTick_Config>
 8006ff8:	4603      	mov	r3, r0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d005      	beq.n	8007026 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	e029      	b.n	800707a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 020e 	bic.w	r2, r2, #14
 8007034:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	f003 021c 	and.w	r2, r3, #28
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f202 	lsl.w	r2, r1, r2
 8007058:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
    }
  }
  return status;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007092:	e17f      	b.n	8007394 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	2101      	movs	r1, #1
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	fa01 f303 	lsl.w	r3, r1, r3
 80070a0:	4013      	ands	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8171 	beq.w	800738e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d00b      	beq.n	80070cc <HAL_GPIO_Init+0x48>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d007      	beq.n	80070cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070c0:	2b11      	cmp	r3, #17
 80070c2:	d003      	beq.n	80070cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b12      	cmp	r3, #18
 80070ca:	d130      	bne.n	800712e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	2203      	movs	r2, #3
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	43db      	mvns	r3, r3
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4013      	ands	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007102:	2201      	movs	r2, #1
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4013      	ands	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f003 0201 	and.w	r2, r3, #1
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b03      	cmp	r3, #3
 8007138:	d118      	bne.n	800716c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007140:	2201      	movs	r2, #1
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4013      	ands	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0201 	and.w	r2, r3, #1
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	2203      	movs	r2, #3
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	43db      	mvns	r3, r3
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4013      	ands	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d003      	beq.n	80071ac <HAL_GPIO_Init+0x128>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b12      	cmp	r3, #18
 80071aa:	d123      	bne.n	80071f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	08da      	lsrs	r2, r3, #3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3208      	adds	r2, #8
 80071b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	220f      	movs	r2, #15
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	43db      	mvns	r3, r3
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4013      	ands	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	08da      	lsrs	r2, r3, #3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3208      	adds	r2, #8
 80071ee:	6939      	ldr	r1, [r7, #16]
 80071f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	2203      	movs	r2, #3
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4013      	ands	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 0203 	and.w	r2, r3, #3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80ac 	beq.w	800738e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007236:	4b5e      	ldr	r3, [pc, #376]	; (80073b0 <HAL_GPIO_Init+0x32c>)
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	4a5d      	ldr	r2, [pc, #372]	; (80073b0 <HAL_GPIO_Init+0x32c>)
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	6613      	str	r3, [r2, #96]	; 0x60
 8007242:	4b5b      	ldr	r3, [pc, #364]	; (80073b0 <HAL_GPIO_Init+0x32c>)
 8007244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800724e:	4a59      	ldr	r2, [pc, #356]	; (80073b4 <HAL_GPIO_Init+0x330>)
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	089b      	lsrs	r3, r3, #2
 8007254:	3302      	adds	r3, #2
 8007256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	220f      	movs	r2, #15
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43db      	mvns	r3, r3
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4013      	ands	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007278:	d025      	beq.n	80072c6 <HAL_GPIO_Init+0x242>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a4e      	ldr	r2, [pc, #312]	; (80073b8 <HAL_GPIO_Init+0x334>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01f      	beq.n	80072c2 <HAL_GPIO_Init+0x23e>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a4d      	ldr	r2, [pc, #308]	; (80073bc <HAL_GPIO_Init+0x338>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d019      	beq.n	80072be <HAL_GPIO_Init+0x23a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a4c      	ldr	r2, [pc, #304]	; (80073c0 <HAL_GPIO_Init+0x33c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_GPIO_Init+0x236>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a4b      	ldr	r2, [pc, #300]	; (80073c4 <HAL_GPIO_Init+0x340>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00d      	beq.n	80072b6 <HAL_GPIO_Init+0x232>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a4a      	ldr	r2, [pc, #296]	; (80073c8 <HAL_GPIO_Init+0x344>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <HAL_GPIO_Init+0x22e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a49      	ldr	r2, [pc, #292]	; (80073cc <HAL_GPIO_Init+0x348>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_GPIO_Init+0x22a>
 80072aa:	2306      	movs	r3, #6
 80072ac:	e00c      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072ae:	2307      	movs	r3, #7
 80072b0:	e00a      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072b2:	2305      	movs	r3, #5
 80072b4:	e008      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072b6:	2304      	movs	r3, #4
 80072b8:	e006      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072ba:	2303      	movs	r3, #3
 80072bc:	e004      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072be:	2302      	movs	r3, #2
 80072c0:	e002      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_GPIO_Init+0x244>
 80072c6:	2300      	movs	r3, #0
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	f002 0203 	and.w	r2, r2, #3
 80072ce:	0092      	lsls	r2, r2, #2
 80072d0:	4093      	lsls	r3, r2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072d8:	4936      	ldr	r1, [pc, #216]	; (80073b4 <HAL_GPIO_Init+0x330>)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	089b      	lsrs	r3, r3, #2
 80072de:	3302      	adds	r3, #2
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072e6:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	43db      	mvns	r3, r3
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4013      	ands	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800730a:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	43db      	mvns	r3, r3
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4013      	ands	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007334:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800733a:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	43db      	mvns	r3, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4013      	ands	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	43db      	mvns	r3, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4013      	ands	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007388:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	3301      	adds	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	fa22 f303 	lsr.w	r3, r2, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f47f ae78 	bne.w	8007094 <HAL_GPIO_Init+0x10>
  }
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40021000 	.word	0x40021000
 80073b4:	40010000 	.word	0x40010000
 80073b8:	48000400 	.word	0x48000400
 80073bc:	48000800 	.word	0x48000800
 80073c0:	48000c00 	.word	0x48000c00
 80073c4:	48001000 	.word	0x48001000
 80073c8:	48001400 	.word	0x48001400
 80073cc:	48001800 	.word	0x48001800
 80073d0:	40010400 	.word	0x40010400

080073d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e001      	b.n	80073f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
 8007410:	4613      	mov	r3, r2
 8007412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007414:	787b      	ldrb	r3, [r7, #1]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007420:	e002      	b.n	8007428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007422:	887a      	ldrh	r2, [r7, #2]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007446:	887a      	ldrh	r2, [r7, #2]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4013      	ands	r3, r2
 800744c:	041a      	lsls	r2, r3, #16
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	43d9      	mvns	r1, r3
 8007452:	887b      	ldrh	r3, [r7, #2]
 8007454:	400b      	ands	r3, r1
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	619a      	str	r2, [r3, #24]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800747e:	4a05      	ldr	r2, [pc, #20]	; (8007494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fb ffa2 	bl	80033d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40010400 	.word	0x40010400

08007498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e081      	b.n	80075ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8a8 	bl	8007614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2224      	movs	r2, #36	; 0x24
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d107      	bne.n	8007512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	e006      	b.n	8007520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800751e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d104      	bne.n	8007532 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007530:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007544:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	ea42 0103 	orr.w	r1, r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	021a      	lsls	r2, r3, #8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69d9      	ldr	r1, [r3, #28]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e021      	b.n	800760c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f821 	bl	8007628 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	460b      	mov	r3, r1
 800764a:	817b      	strh	r3, [r7, #10]
 800764c:	4613      	mov	r3, r2
 800764e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b20      	cmp	r3, #32
 800765a:	f040 80da 	bne.w	8007812 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_I2C_Master_Transmit+0x30>
 8007668:	2302      	movs	r3, #2
 800766a:	e0d3      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007674:	f7ff fb86 	bl	8006d84 <HAL_GetTick>
 8007678:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2319      	movs	r3, #25
 8007680:	2201      	movs	r2, #1
 8007682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fcbc 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e0be      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2210      	movs	r2, #16
 80076a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	893a      	ldrh	r2, [r7, #8]
 80076b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2bff      	cmp	r3, #255	; 0xff
 80076c6:	d90e      	bls.n	80076e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	22ff      	movs	r2, #255	; 0xff
 80076cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	8979      	ldrh	r1, [r7, #10]
 80076d6:	4b51      	ldr	r3, [pc, #324]	; (800781c <HAL_I2C_Master_Transmit+0x1e0>)
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fe1e 	bl	8008320 <I2C_TransferConfig>
 80076e4:	e06c      	b.n	80077c0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	8979      	ldrh	r1, [r7, #10]
 80076f8:	4b48      	ldr	r3, [pc, #288]	; (800781c <HAL_I2C_Master_Transmit+0x1e0>)
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fe0d 	bl	8008320 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007706:	e05b      	b.n	80077c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	6a39      	ldr	r1, [r7, #32]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fcb9 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e07b      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d034      	beq.n	80077c0 <HAL_I2C_Master_Transmit+0x184>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d130      	bne.n	80077c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	2200      	movs	r2, #0
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fc4b 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e04d      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2bff      	cmp	r3, #255	; 0xff
 8007780:	d90e      	bls.n	80077a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	b2da      	uxtb	r2, r3
 800778e:	8979      	ldrh	r1, [r7, #10]
 8007790:	2300      	movs	r3, #0
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fdc1 	bl	8008320 <I2C_TransferConfig>
 800779e:	e00f      	b.n	80077c0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	8979      	ldrh	r1, [r7, #10]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fdb0 	bl	8008320 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d19e      	bne.n	8007708 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6a39      	ldr	r1, [r7, #32]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fc98 	bl	8008104 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e01a      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2220      	movs	r2, #32
 80077e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <HAL_I2C_Master_Transmit+0x1e4>)
 80077f2:	400b      	ands	r3, r1
 80077f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	80002000 	.word	0x80002000
 8007820:	fe00e800 	.word	0xfe00e800

08007824 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	461a      	mov	r2, r3
 8007830:	460b      	mov	r3, r1
 8007832:	817b      	strh	r3, [r7, #10]
 8007834:	4613      	mov	r3, r2
 8007836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b20      	cmp	r3, #32
 8007842:	f040 80db 	bne.w	80079fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_I2C_Master_Receive+0x30>
 8007850:	2302      	movs	r3, #2
 8007852:	e0d4      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800785c:	f7ff fa92 	bl	8006d84 <HAL_GetTick>
 8007860:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2319      	movs	r3, #25
 8007868:	2201      	movs	r2, #1
 800786a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fbc8 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0bf      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2222      	movs	r2, #34	; 0x22
 8007882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2210      	movs	r2, #16
 800788a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	893a      	ldrh	r2, [r7, #8]
 800789e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2bff      	cmp	r3, #255	; 0xff
 80078ae:	d90e      	bls.n	80078ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	22ff      	movs	r2, #255	; 0xff
 80078b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	8979      	ldrh	r1, [r7, #10]
 80078be:	4b52      	ldr	r3, [pc, #328]	; (8007a08 <HAL_I2C_Master_Receive+0x1e4>)
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fd2a 	bl	8008320 <I2C_TransferConfig>
 80078cc:	e06d      	b.n	80079aa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	8979      	ldrh	r1, [r7, #10]
 80078e0:	4b49      	ldr	r3, [pc, #292]	; (8007a08 <HAL_I2C_Master_Receive+0x1e4>)
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fd19 	bl	8008320 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80078ee:	e05c      	b.n	80079aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	6a39      	ldr	r1, [r7, #32]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fc41 	bl	800817c <I2C_WaitOnRXNEFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e07c      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d034      	beq.n	80079aa <HAL_I2C_Master_Receive+0x186>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	2b00      	cmp	r3, #0
 8007946:	d130      	bne.n	80079aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2200      	movs	r2, #0
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fb56 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e04d      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007966:	b29b      	uxth	r3, r3
 8007968:	2bff      	cmp	r3, #255	; 0xff
 800796a:	d90e      	bls.n	800798a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007976:	b2da      	uxtb	r2, r3
 8007978:	8979      	ldrh	r1, [r7, #10]
 800797a:	2300      	movs	r3, #0
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fccc 	bl	8008320 <I2C_TransferConfig>
 8007988:	e00f      	b.n	80079aa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007998:	b2da      	uxtb	r2, r3
 800799a:	8979      	ldrh	r1, [r7, #10]
 800799c:	2300      	movs	r3, #0
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fcbb 	bl	8008320 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d19d      	bne.n	80078f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	6a39      	ldr	r1, [r7, #32]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 fba3 	bl	8008104 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e01a      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2220      	movs	r2, #32
 80079ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <HAL_I2C_Master_Receive+0x1e8>)
 80079dc:	400b      	ands	r3, r1
 80079de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	e000      	b.n	80079fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80079fc:	2302      	movs	r3, #2
  }
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	80002400 	.word	0x80002400
 8007a0c:	fe00e800 	.word	0xfe00e800

08007a10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	817b      	strh	r3, [r7, #10]
 8007a22:	460b      	mov	r3, r1
 8007a24:	813b      	strh	r3, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f040 80f9 	bne.w	8007c2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_I2C_Mem_Write+0x34>
 8007a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e0ed      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_I2C_Mem_Write+0x4e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0e6      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a66:	f7ff f98d 	bl	8006d84 <HAL_GetTick>
 8007a6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	2319      	movs	r3, #25
 8007a72:	2201      	movs	r2, #1
 8007a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fac3 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0d1      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2221      	movs	r2, #33	; 0x21
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2240      	movs	r2, #64	; 0x40
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a3a      	ldr	r2, [r7, #32]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ab0:	88f8      	ldrh	r0, [r7, #6]
 8007ab2:	893a      	ldrh	r2, [r7, #8]
 8007ab4:	8979      	ldrh	r1, [r7, #10]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4603      	mov	r3, r0
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f9d3 	bl	8007e6c <I2C_RequestMemoryWrite>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0a9      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	d90e      	bls.n	8007b00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	8979      	ldrh	r1, [r7, #10]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fc11 	bl	8008320 <I2C_TransferConfig>
 8007afe:	e00f      	b.n	8007b20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	8979      	ldrh	r1, [r7, #10]
 8007b12:	2300      	movs	r3, #0
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fc00 	bl	8008320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 faad 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e07b      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d034      	beq.n	8007bd8 <HAL_I2C_Mem_Write+0x1c8>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d130      	bne.n	8007bd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2180      	movs	r1, #128	; 0x80
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fa3f 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e04d      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2bff      	cmp	r3, #255	; 0xff
 8007b98:	d90e      	bls.n	8007bb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	8979      	ldrh	r1, [r7, #10]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fbb5 	bl	8008320 <I2C_TransferConfig>
 8007bb6:	e00f      	b.n	8007bd8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	8979      	ldrh	r1, [r7, #10]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fba4 	bl	8008320 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d19e      	bne.n	8007b20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fa8c 	bl	8008104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e01a      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6859      	ldr	r1, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_I2C_Mem_Write+0x224>)
 8007c0a:	400b      	ands	r3, r1
 8007c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	fe00e800 	.word	0xfe00e800

08007c38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	817b      	strh	r3, [r7, #10]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	813b      	strh	r3, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	f040 80fd 	bne.w	8007e5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_I2C_Mem_Read+0x34>
 8007c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d105      	bne.n	8007c78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0f1      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_I2C_Mem_Read+0x4e>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e0ea      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c8e:	f7ff f879 	bl	8006d84 <HAL_GetTick>
 8007c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2319      	movs	r3, #25
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f9af 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0d5      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2222      	movs	r2, #34	; 0x22
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cd8:	88f8      	ldrh	r0, [r7, #6]
 8007cda:	893a      	ldrh	r2, [r7, #8]
 8007cdc:	8979      	ldrh	r1, [r7, #10]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f913 	bl	8007f14 <I2C_RequestMemoryRead>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0ad      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d90e      	bls.n	8007d28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	22ff      	movs	r2, #255	; 0xff
 8007d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	8979      	ldrh	r1, [r7, #10]
 8007d18:	4b52      	ldr	r3, [pc, #328]	; (8007e64 <HAL_I2C_Mem_Read+0x22c>)
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fafd 	bl	8008320 <I2C_TransferConfig>
 8007d26:	e00f      	b.n	8007d48 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	8979      	ldrh	r1, [r7, #10]
 8007d3a:	4b4a      	ldr	r3, [pc, #296]	; (8007e64 <HAL_I2C_Mem_Read+0x22c>)
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 faec 	bl	8008320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2104      	movs	r1, #4
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f956 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e07c      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d034      	beq.n	8007e08 <HAL_I2C_Mem_Read+0x1d0>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d130      	bne.n	8007e08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	2200      	movs	r2, #0
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f927 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e04d      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2bff      	cmp	r3, #255	; 0xff
 8007dc8:	d90e      	bls.n	8007de8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	22ff      	movs	r2, #255	; 0xff
 8007dce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	8979      	ldrh	r1, [r7, #10]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 fa9d 	bl	8008320 <I2C_TransferConfig>
 8007de6:	e00f      	b.n	8007e08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	8979      	ldrh	r1, [r7, #10]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fa8c 	bl	8008320 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d19a      	bne.n	8007d48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f974 	bl	8008104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e01a      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <HAL_I2C_Mem_Read+0x230>)
 8007e3a:	400b      	ands	r3, r1
 8007e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	80002400 	.word	0x80002400
 8007e68:	fe00e800 	.word	0xfe00e800

08007e6c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	4608      	mov	r0, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	461a      	mov	r2, r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	817b      	strh	r3, [r7, #10]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	813b      	strh	r3, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	8979      	ldrh	r1, [r7, #10]
 8007e8c:	4b20      	ldr	r3, [pc, #128]	; (8007f10 <I2C_RequestMemoryWrite+0xa4>)
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fa43 	bl	8008320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f8f0 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e02c      	b.n	8007f08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d105      	bne.n	8007ec0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb4:	893b      	ldrh	r3, [r7, #8]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
 8007ebe:	e015      	b.n	8007eec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec0:	893b      	ldrh	r3, [r7, #8]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	69b9      	ldr	r1, [r7, #24]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f8d6 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e012      	b.n	8007f08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee2:	893b      	ldrh	r3, [r7, #8]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2180      	movs	r1, #128	; 0x80
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f884 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	80002000 	.word	0x80002000

08007f14 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	817b      	strh	r3, [r7, #10]
 8007f26:	460b      	mov	r3, r1
 8007f28:	813b      	strh	r3, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	8979      	ldrh	r1, [r7, #10]
 8007f34:	4b20      	ldr	r3, [pc, #128]	; (8007fb8 <I2C_RequestMemoryRead+0xa4>)
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f9f0 	bl	8008320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	69b9      	ldr	r1, [r7, #24]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f89d 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e02c      	b.n	8007fae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d105      	bne.n	8007f66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f5a:	893b      	ldrh	r3, [r7, #8]
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
 8007f64:	e015      	b.n	8007f92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f66:	893b      	ldrh	r3, [r7, #8]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	69b9      	ldr	r1, [r7, #24]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f883 	bl	8008084 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e012      	b.n	8007fae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2140      	movs	r1, #64	; 0x40
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f831 	bl	8008004 <I2C_WaitOnFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	80002000 	.word	0x80002000

08007fbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d103      	bne.n	8007fda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d007      	beq.n	8007ff8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	619a      	str	r2, [r3, #24]
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008014:	e022      	b.n	800805c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d01e      	beq.n	800805c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801e:	f7fe feb1 	bl	8006d84 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d113      	bne.n	800805c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e00f      	b.n	800807c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699a      	ldr	r2, [r3, #24]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4013      	ands	r3, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	d0cd      	beq.n	8008016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008090:	e02c      	b.n	80080ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f8dc 	bl	8008254 <I2C_IsAcknowledgeFailed>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e02a      	b.n	80080fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d01e      	beq.n	80080ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ae:	f7fe fe69 	bl	8006d84 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d302      	bcc.n	80080c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d113      	bne.n	80080ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e007      	b.n	80080fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d1cb      	bne.n	8008092 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008110:	e028      	b.n	8008164 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f89c 	bl	8008254 <I2C_IsAcknowledgeFailed>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e026      	b.n	8008174 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008126:	f7fe fe2d 	bl	8006d84 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	d302      	bcc.n	800813c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	f043 0220 	orr.w	r2, r3, #32
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e007      	b.n	8008174 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b20      	cmp	r3, #32
 8008170:	d1cf      	bne.n	8008112 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008188:	e055      	b.n	8008236 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f860 	bl	8008254 <I2C_IsAcknowledgeFailed>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e053      	b.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d129      	bne.n	8008200 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d105      	bne.n	80081c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e03f      	b.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2220      	movs	r2, #32
 80081cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6859      	ldr	r1, [r3, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80081da:	400b      	ands	r3, r1
 80081dc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e022      	b.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008200:	f7fe fdc0 	bl	8006d84 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	429a      	cmp	r2, r3
 800820e:	d302      	bcc.n	8008216 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e007      	b.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d1a2      	bne.n	800818a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	fe00e800 	.word	0xfe00e800

08008254 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f003 0310 	and.w	r3, r3, #16
 800826a:	2b10      	cmp	r3, #16
 800826c:	d151      	bne.n	8008312 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800826e:	e022      	b.n	80082b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d01e      	beq.n	80082b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008278:	f7fe fd84 	bl	8006d84 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <I2C_IsAcknowledgeFailed+0x3a>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d113      	bne.n	80082b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e02e      	b.n	8008314 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d1d5      	bne.n	8008270 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2210      	movs	r2, #16
 80082ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2220      	movs	r2, #32
 80082d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff fe71 	bl	8007fbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <I2C_IsAcknowledgeFailed+0xc8>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	f043 0204 	orr.w	r2, r3, #4
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	fe00e800 	.word	0xfe00e800

08008320 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	817b      	strh	r3, [r7, #10]
 800832e:	4613      	mov	r3, r2
 8008330:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	0d5b      	lsrs	r3, r3, #21
 800833c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008340:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <I2C_TransferConfig+0x58>)
 8008342:	430b      	orrs	r3, r1
 8008344:	43db      	mvns	r3, r3
 8008346:	ea02 0103 	and.w	r1, r2, r3
 800834a:	897b      	ldrh	r3, [r7, #10]
 800834c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008350:	7a7b      	ldrb	r3, [r7, #9]
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	431a      	orrs	r2, r3
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	431a      	orrs	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800836a:	bf00      	nop
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	03ff63ff 	.word	0x03ff63ff

0800837c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b20      	cmp	r3, #32
 8008390:	d138      	bne.n	8008404 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800839c:	2302      	movs	r3, #2
 800839e:	e032      	b.n	8008406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008418:	4b04      	ldr	r3, [pc, #16]	; (800842c <HAL_PWREx_GetVoltageRange+0x18>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008420:	4618      	mov	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40007000 	.word	0x40007000

08008430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843e:	d130      	bne.n	80084a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008440:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844c:	d038      	beq.n	80084c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800844e:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800845c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800845e:	4b1d      	ldr	r3, [pc, #116]	; (80084d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2232      	movs	r2, #50	; 0x32
 8008464:	fb02 f303 	mul.w	r3, r2, r3
 8008468:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	0c9b      	lsrs	r3, r3, #18
 8008470:	3301      	adds	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008474:	e002      	b.n	800847c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b01      	subs	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008488:	d102      	bne.n	8008490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f2      	bne.n	8008476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849c:	d110      	bne.n	80084c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e00f      	b.n	80084c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ae:	d007      	beq.n	80084c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	40007000 	.word	0x40007000
 80084d4:	200001a0 	.word	0x200001a0
 80084d8:	431bde83 	.word	0x431bde83

080084dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e3d4      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084ee:	4ba1      	ldr	r3, [pc, #644]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
 80084f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084f8:	4b9e      	ldr	r3, [pc, #632]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 80e4 	beq.w	80086d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <HAL_RCC_OscConfig+0x4a>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b0c      	cmp	r3, #12
 800851a:	f040 808b 	bne.w	8008634 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b01      	cmp	r3, #1
 8008522:	f040 8087 	bne.w	8008634 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008526:	4b93      	ldr	r3, [pc, #588]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <HAL_RCC_OscConfig+0x62>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e3ac      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1a      	ldr	r2, [r3, #32]
 8008542:	4b8c      	ldr	r3, [pc, #560]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_RCC_OscConfig+0x7c>
 800854e:	4b89      	ldr	r3, [pc, #548]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008556:	e005      	b.n	8008564 <HAL_RCC_OscConfig+0x88>
 8008558:	4b86      	ldr	r3, [pc, #536]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800855a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800855e:	091b      	lsrs	r3, r3, #4
 8008560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008564:	4293      	cmp	r3, r2
 8008566:	d223      	bcs.n	80085b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fd3f 	bl	8008ff0 <RCC_SetFlashLatencyFromMSIRange>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e38d      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800857c:	4b7d      	ldr	r3, [pc, #500]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a7c      	ldr	r2, [pc, #496]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008582:	f043 0308 	orr.w	r3, r3, #8
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b7a      	ldr	r3, [pc, #488]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	4977      	ldr	r1, [pc, #476]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008596:	4313      	orrs	r3, r2
 8008598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800859a:	4b76      	ldr	r3, [pc, #472]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	4972      	ldr	r1, [pc, #456]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	604b      	str	r3, [r1, #4]
 80085ae:	e025      	b.n	80085fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085b0:	4b70      	ldr	r3, [pc, #448]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a6f      	ldr	r2, [pc, #444]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085b6:	f043 0308 	orr.w	r3, r3, #8
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b6d      	ldr	r3, [pc, #436]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	496a      	ldr	r1, [pc, #424]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ce:	4b69      	ldr	r3, [pc, #420]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	4965      	ldr	r1, [pc, #404]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fcff 	bl	8008ff0 <RCC_SetFlashLatencyFromMSIRange>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e34d      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085fc:	f000 fc36 	bl	8008e6c <HAL_RCC_GetSysClockFreq>
 8008600:	4601      	mov	r1, r0
 8008602:	4b5c      	ldr	r3, [pc, #368]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	091b      	lsrs	r3, r3, #4
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	4a5a      	ldr	r2, [pc, #360]	; (8008778 <HAL_RCC_OscConfig+0x29c>)
 800860e:	5cd3      	ldrb	r3, [r2, r3]
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	fa21 f303 	lsr.w	r3, r1, r3
 8008618:	4a58      	ldr	r2, [pc, #352]	; (800877c <HAL_RCC_OscConfig+0x2a0>)
 800861a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800861c:	4b58      	ldr	r3, [pc, #352]	; (8008780 <HAL_RCC_OscConfig+0x2a4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fb5f 	bl	8006ce4 <HAL_InitTick>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d052      	beq.n	80086d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	e331      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d032      	beq.n	80086a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800863c:	4b4d      	ldr	r3, [pc, #308]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a4c      	ldr	r2, [pc, #304]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008648:	f7fe fb9c 	bl	8006d84 <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008650:	f7fe fb98 	bl	8006d84 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e31a      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008662:	4b44      	ldr	r3, [pc, #272]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f0      	beq.n	8008650 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800866e:	4b41      	ldr	r3, [pc, #260]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a40      	ldr	r2, [pc, #256]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008674:	f043 0308 	orr.w	r3, r3, #8
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	493b      	ldr	r1, [pc, #236]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008688:	4313      	orrs	r3, r2
 800868a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800868c:	4b39      	ldr	r3, [pc, #228]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	4936      	ldr	r1, [pc, #216]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800869c:	4313      	orrs	r3, r2
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	e01a      	b.n	80086d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80086a2:	4b34      	ldr	r3, [pc, #208]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a33      	ldr	r2, [pc, #204]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086ae:	f7fe fb69 	bl	8006d84 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086b6:	f7fe fb65 	bl	8006d84 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e2e7      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80086c8:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f0      	bne.n	80086b6 <HAL_RCC_OscConfig+0x1da>
 80086d4:	e000      	b.n	80086d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d074      	beq.n	80087ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b08      	cmp	r3, #8
 80086e8:	d005      	beq.n	80086f6 <HAL_RCC_OscConfig+0x21a>
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b0c      	cmp	r3, #12
 80086ee:	d10e      	bne.n	800870e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d10b      	bne.n	800870e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f6:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d064      	beq.n	80087cc <HAL_RCC_OscConfig+0x2f0>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d160      	bne.n	80087cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e2c4      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008716:	d106      	bne.n	8008726 <HAL_RCC_OscConfig+0x24a>
 8008718:	4b16      	ldr	r3, [pc, #88]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800871e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	e01d      	b.n	8008762 <HAL_RCC_OscConfig+0x286>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800872e:	d10c      	bne.n	800874a <HAL_RCC_OscConfig+0x26e>
 8008730:	4b10      	ldr	r3, [pc, #64]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0f      	ldr	r2, [pc, #60]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0c      	ldr	r2, [pc, #48]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	e00b      	b.n	8008762 <HAL_RCC_OscConfig+0x286>
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a06      	ldr	r2, [pc, #24]	; (8008774 <HAL_RCC_OscConfig+0x298>)
 800875c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008760:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01c      	beq.n	80087a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876a:	f7fe fb0b 	bl	8006d84 <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008770:	e011      	b.n	8008796 <HAL_RCC_OscConfig+0x2ba>
 8008772:	bf00      	nop
 8008774:	40021000 	.word	0x40021000
 8008778:	0800e144 	.word	0x0800e144
 800877c:	200001a0 	.word	0x200001a0
 8008780:	2000035c 	.word	0x2000035c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008784:	f7fe fafe 	bl	8006d84 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b64      	cmp	r3, #100	; 0x64
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e280      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008796:	4baf      	ldr	r3, [pc, #700]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0x2a8>
 80087a2:	e014      	b.n	80087ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a4:	f7fe faee 	bl	8006d84 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ac:	f7fe faea 	bl	8006d84 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b64      	cmp	r3, #100	; 0x64
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e26c      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087be:	4ba5      	ldr	r3, [pc, #660]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f0      	bne.n	80087ac <HAL_RCC_OscConfig+0x2d0>
 80087ca:	e000      	b.n	80087ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d060      	beq.n	800889c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d005      	beq.n	80087ec <HAL_RCC_OscConfig+0x310>
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d119      	bne.n	800881a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d116      	bne.n	800881a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ec:	4b99      	ldr	r3, [pc, #612]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_RCC_OscConfig+0x328>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e249      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008804:	4b93      	ldr	r3, [pc, #588]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	061b      	lsls	r3, r3, #24
 8008812:	4990      	ldr	r1, [pc, #576]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008814:	4313      	orrs	r3, r2
 8008816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008818:	e040      	b.n	800889c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d023      	beq.n	800886a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008822:	4b8c      	ldr	r3, [pc, #560]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a8b      	ldr	r2, [pc, #556]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882e:	f7fe faa9 	bl	8006d84 <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008836:	f7fe faa5 	bl	8006d84 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e227      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008848:	4b82      	ldr	r3, [pc, #520]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008854:	4b7f      	ldr	r3, [pc, #508]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	061b      	lsls	r3, r3, #24
 8008862:	497c      	ldr	r1, [pc, #496]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008864:	4313      	orrs	r3, r2
 8008866:	604b      	str	r3, [r1, #4]
 8008868:	e018      	b.n	800889c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800886a:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a79      	ldr	r2, [pc, #484]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008876:	f7fe fa85 	bl	8006d84 <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800887e:	f7fe fa81 	bl	8006d84 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e203      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008890:	4b70      	ldr	r3, [pc, #448]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1f0      	bne.n	800887e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d03c      	beq.n	8008922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01c      	beq.n	80088ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b0:	4b68      	ldr	r3, [pc, #416]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80088b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088b6:	4a67      	ldr	r2, [pc, #412]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fe fa60 	bl	8006d84 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c8:	f7fe fa5c 	bl	8006d84 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e1de      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088da:	4b5e      	ldr	r3, [pc, #376]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80088dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0ef      	beq.n	80088c8 <HAL_RCC_OscConfig+0x3ec>
 80088e8:	e01b      	b.n	8008922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ea:	4b5a      	ldr	r3, [pc, #360]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80088ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088f0:	4a58      	ldr	r2, [pc, #352]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80088f2:	f023 0301 	bic.w	r3, r3, #1
 80088f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088fa:	f7fe fa43 	bl	8006d84 <HAL_GetTick>
 80088fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008902:	f7fe fa3f 	bl	8006d84 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e1c1      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008914:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1ef      	bne.n	8008902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80a6 	beq.w	8008a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008930:	2300      	movs	r3, #0
 8008932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008934:	4b47      	ldr	r3, [pc, #284]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10d      	bne.n	800895c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008940:	4b44      	ldr	r3, [pc, #272]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008944:	4a43      	ldr	r2, [pc, #268]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800894a:	6593      	str	r3, [r2, #88]	; 0x58
 800894c:	4b41      	ldr	r3, [pc, #260]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008958:	2301      	movs	r3, #1
 800895a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800895c:	4b3e      	ldr	r3, [pc, #248]	; (8008a58 <HAL_RCC_OscConfig+0x57c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d118      	bne.n	800899a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008968:	4b3b      	ldr	r3, [pc, #236]	; (8008a58 <HAL_RCC_OscConfig+0x57c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a3a      	ldr	r2, [pc, #232]	; (8008a58 <HAL_RCC_OscConfig+0x57c>)
 800896e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008974:	f7fe fa06 	bl	8006d84 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897c:	f7fe fa02 	bl	8006d84 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e184      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <HAL_RCC_OscConfig+0x57c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f0      	beq.n	800897c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d108      	bne.n	80089b4 <HAL_RCC_OscConfig+0x4d8>
 80089a2:	4b2c      	ldr	r3, [pc, #176]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a8:	4a2a      	ldr	r2, [pc, #168]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089b2:	e024      	b.n	80089fe <HAL_RCC_OscConfig+0x522>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d110      	bne.n	80089de <HAL_RCC_OscConfig+0x502>
 80089bc:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c2:	4a24      	ldr	r2, [pc, #144]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089c4:	f043 0304 	orr.w	r3, r3, #4
 80089c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089cc:	4b21      	ldr	r3, [pc, #132]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d2:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089d4:	f043 0301 	orr.w	r3, r3, #1
 80089d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089dc:	e00f      	b.n	80089fe <HAL_RCC_OscConfig+0x522>
 80089de:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e4:	4a1b      	ldr	r2, [pc, #108]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089ee:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f4:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 80089f6:	f023 0304 	bic.w	r3, r3, #4
 80089fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d016      	beq.n	8008a34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a06:	f7fe f9bd 	bl	8006d84 <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a0c:	e00a      	b.n	8008a24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0e:	f7fe f9b9 	bl	8006d84 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e139      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a24:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_RCC_OscConfig+0x578>)
 8008a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ed      	beq.n	8008a0e <HAL_RCC_OscConfig+0x532>
 8008a32:	e01a      	b.n	8008a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a34:	f7fe f9a6 	bl	8006d84 <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a3a:	e00f      	b.n	8008a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7fe f9a2 	bl	8006d84 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d906      	bls.n	8008a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e122      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
 8008a52:	bf00      	nop
 8008a54:	40021000 	.word	0x40021000
 8008a58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a5c:	4b90      	ldr	r3, [pc, #576]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e8      	bne.n	8008a3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a6a:	7ffb      	ldrb	r3, [r7, #31]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d105      	bne.n	8008a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a70:	4b8b      	ldr	r3, [pc, #556]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	4a8a      	ldr	r2, [pc, #552]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8108 	beq.w	8008c96 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	f040 80d0 	bne.w	8008c30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a90:	4b83      	ldr	r3, [pc, #524]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f003 0203 	and.w	r2, r3, #3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d130      	bne.n	8008b06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d127      	bne.n	8008b06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d11f      	bne.n	8008b06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ad0:	2a07      	cmp	r2, #7
 8008ad2:	bf14      	ite	ne
 8008ad4:	2201      	movne	r2, #1
 8008ad6:	2200      	moveq	r2, #0
 8008ad8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d113      	bne.n	8008b06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae8:	085b      	lsrs	r3, r3, #1
 8008aea:	3b01      	subs	r3, #1
 8008aec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d109      	bne.n	8008b06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	3b01      	subs	r3, #1
 8008b00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d06e      	beq.n	8008be4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	d069      	beq.n	8008be0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008b0c:	4b64      	ldr	r3, [pc, #400]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008b18:	4b61      	ldr	r3, [pc, #388]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0b7      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008b28:	4b5d      	ldr	r3, [pc, #372]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a5c      	ldr	r2, [pc, #368]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b34:	f7fe f926 	bl	8006d84 <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b3a:	e008      	b.n	8008b4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3c:	f7fe f922 	bl	8006d84 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d901      	bls.n	8008b4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e0a4      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b4e:	4b54      	ldr	r3, [pc, #336]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f0      	bne.n	8008b3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b5a:	4b51      	ldr	r3, [pc, #324]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <HAL_RCC_OscConfig+0x7c8>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	0112      	lsls	r2, r2, #4
 8008b6e:	4311      	orrs	r1, r2
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b74:	0212      	lsls	r2, r2, #8
 8008b76:	4311      	orrs	r1, r2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b7c:	0852      	lsrs	r2, r2, #1
 8008b7e:	3a01      	subs	r2, #1
 8008b80:	0552      	lsls	r2, r2, #21
 8008b82:	4311      	orrs	r1, r2
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b88:	0852      	lsrs	r2, r2, #1
 8008b8a:	3a01      	subs	r2, #1
 8008b8c:	0652      	lsls	r2, r2, #25
 8008b8e:	4311      	orrs	r1, r2
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b94:	0912      	lsrs	r2, r2, #4
 8008b96:	0452      	lsls	r2, r2, #17
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	4941      	ldr	r1, [pc, #260]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008ba0:	4b3f      	ldr	r3, [pc, #252]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a3e      	ldr	r2, [pc, #248]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008baa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bac:	4b3c      	ldr	r3, [pc, #240]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a3b      	ldr	r2, [pc, #236]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008bb8:	f7fe f8e4 	bl	8006d84 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fe f8e0 	bl	8006d84 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e062      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bd2:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bde:	e05a      	b.n	8008c96 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e059      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008be4:	4b2e      	ldr	r3, [pc, #184]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d152      	bne.n	8008c96 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008bf0:	4b2b      	ldr	r3, [pc, #172]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2a      	ldr	r2, [pc, #168]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bfc:	4b28      	ldr	r3, [pc, #160]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a27      	ldr	r2, [pc, #156]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c08:	f7fe f8bc 	bl	8006d84 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c10:	f7fe f8b8 	bl	8006d84 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e03a      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c22:	4b1f      	ldr	r3, [pc, #124]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f0      	beq.n	8008c10 <HAL_RCC_OscConfig+0x734>
 8008c2e:	e032      	b.n	8008c96 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b0c      	cmp	r3, #12
 8008c34:	d02d      	beq.n	8008c92 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c36:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a19      	ldr	r2, [pc, #100]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008c42:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008c4e:	4b14      	ldr	r3, [pc, #80]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c54:	f023 0303 	bic.w	r3, r3, #3
 8008c58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	4a10      	ldr	r2, [pc, #64]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c6a:	f7fe f88b 	bl	8006d84 <HAL_GetTick>
 8008c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c70:	e008      	b.n	8008c84 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c72:	f7fe f887 	bl	8006d84 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d901      	bls.n	8008c84 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e009      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <HAL_RCC_OscConfig+0x7c4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1f0      	bne.n	8008c72 <HAL_RCC_OscConfig+0x796>
 8008c90:	e001      	b.n	8008c96 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3720      	adds	r7, #32
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	f99d808c 	.word	0xf99d808c

08008ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0c8      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cbc:	4b66      	ldr	r3, [pc, #408]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d910      	bls.n	8008cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cca:	4b63      	ldr	r3, [pc, #396]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f023 0207 	bic.w	r2, r3, #7
 8008cd2:	4961      	ldr	r1, [pc, #388]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cda:	4b5f      	ldr	r3, [pc, #380]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d001      	beq.n	8008cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0b0      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d04c      	beq.n	8008d92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d00:	4b56      	ldr	r3, [pc, #344]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d121      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e09e      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d107      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d18:	4b50      	ldr	r3, [pc, #320]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d115      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e092      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d30:	4b4a      	ldr	r3, [pc, #296]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e086      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d40:	4b46      	ldr	r3, [pc, #280]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e07e      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d50:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f023 0203 	bic.w	r2, r3, #3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	493f      	ldr	r1, [pc, #252]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7fe f80f 	bl	8006d84 <HAL_GetTick>
 8008d66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6a:	f7fe f80b 	bl	8006d84 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e066      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d80:	4b36      	ldr	r3, [pc, #216]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 020c 	and.w	r2, r3, #12
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d1eb      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d008      	beq.n	8008db0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d9e:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	492c      	ldr	r1, [pc, #176]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008db0:	4b29      	ldr	r3, [pc, #164]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d210      	bcs.n	8008de0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dbe:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f023 0207 	bic.w	r2, r3, #7
 8008dc6:	4924      	ldr	r1, [pc, #144]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dce:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <HAL_RCC_ClockConfig+0x1b0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d001      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e036      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	4918      	ldr	r1, [pc, #96]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4910      	ldr	r1, [pc, #64]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e1e:	f000 f825 	bl	8008e6c <HAL_RCC_GetSysClockFreq>
 8008e22:	4601      	mov	r1, r0
 8008e24:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <HAL_RCC_ClockConfig+0x1b4>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	091b      	lsrs	r3, r3, #4
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	4a0c      	ldr	r2, [pc, #48]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008e30:	5cd3      	ldrb	r3, [r2, r3]
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	fa21 f303 	lsr.w	r3, r1, r3
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <HAL_RCC_ClockConfig+0x1c0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fd ff4e 	bl	8006ce4 <HAL_InitTick>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40022000 	.word	0x40022000
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	0800e144 	.word	0x0800e144
 8008e64:	200001a0 	.word	0x200001a0
 8008e68:	2000035c 	.word	0x2000035c

08008e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b089      	sub	sp, #36	; 0x24
 8008e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e7a:	4b3d      	ldr	r3, [pc, #244]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 030c 	and.w	r3, r3, #12
 8008e82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e84:	4b3a      	ldr	r3, [pc, #232]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0303 	and.w	r3, r3, #3
 8008e8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b0c      	cmp	r3, #12
 8008e98:	d121      	bne.n	8008ede <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d11e      	bne.n	8008ede <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ea0:	4b33      	ldr	r3, [pc, #204]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008eac:	4b30      	ldr	r3, [pc, #192]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e005      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ebc:	4b2c      	ldr	r3, [pc, #176]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ed0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10d      	bne.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008edc:	e00a      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d102      	bne.n	8008eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ee4:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	e004      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008ef2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b0c      	cmp	r3, #12
 8008ef8:	d133      	bne.n	8008f62 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008efa:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d002      	beq.n	8008f10 <HAL_RCC_GetSysClockFreq+0xa4>
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCC_GetSysClockFreq+0xaa>
 8008f0e:	e005      	b.n	8008f1c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008f10:	4b19      	ldr	r3, [pc, #100]	; (8008f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008f12:	617b      	str	r3, [r7, #20]
      break;
 8008f14:	e005      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008f16:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008f18:	617b      	str	r3, [r7, #20]
      break;
 8008f1a:	e002      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	617b      	str	r3, [r7, #20]
      break;
 8008f20:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	fb02 f203 	mul.w	r2, r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f46:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	0e5b      	lsrs	r3, r3, #25
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	3301      	adds	r3, #1
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f60:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f62:	69bb      	ldr	r3, [r7, #24]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3724      	adds	r7, #36	; 0x24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	40021000 	.word	0x40021000
 8008f74:	0800e15c 	.word	0x0800e15c
 8008f78:	00f42400 	.word	0x00f42400
 8008f7c:	007a1200 	.word	0x007a1200

08008f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f84:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f86:	681b      	ldr	r3, [r3, #0]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200001a0 	.word	0x200001a0

08008f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f9c:	f7ff fff0 	bl	8008f80 <HAL_RCC_GetHCLKFreq>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	4a04      	ldr	r2, [pc, #16]	; (8008fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fae:	5cd3      	ldrb	r3, [r2, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	0800e154 	.word	0x0800e154

08008fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fc8:	f7ff ffda 	bl	8008f80 <HAL_RCC_GetHCLKFreq>
 8008fcc:	4601      	mov	r1, r0
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	0adb      	lsrs	r3, r3, #11
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fda:	5cd3      	ldrb	r3, [r2, r3]
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	0800e154 	.word	0x0800e154

08008ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ffc:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009008:	f7ff fa04 	bl	8008414 <HAL_PWREx_GetVoltageRange>
 800900c:	6178      	str	r0, [r7, #20]
 800900e:	e014      	b.n	800903a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009010:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009014:	4a24      	ldr	r2, [pc, #144]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800901a:	6593      	str	r3, [r2, #88]	; 0x58
 800901c:	4b22      	ldr	r3, [pc, #136]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800901e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009028:	f7ff f9f4 	bl	8008414 <HAL_PWREx_GetVoltageRange>
 800902c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009038:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009040:	d10b      	bne.n	800905a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b80      	cmp	r3, #128	; 0x80
 8009046:	d919      	bls.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2ba0      	cmp	r3, #160	; 0xa0
 800904c:	d902      	bls.n	8009054 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800904e:	2302      	movs	r3, #2
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	e013      	b.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009054:	2301      	movs	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	e010      	b.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b80      	cmp	r3, #128	; 0x80
 800905e:	d902      	bls.n	8009066 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009060:	2303      	movs	r3, #3
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	e00a      	b.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d102      	bne.n	8009072 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800906c:	2302      	movs	r3, #2
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e004      	b.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b70      	cmp	r3, #112	; 0x70
 8009076:	d101      	bne.n	800907c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009078:	2301      	movs	r3, #1
 800907a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f023 0207 	bic.w	r2, r3, #7
 8009084:	4909      	ldr	r1, [pc, #36]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	429a      	cmp	r2, r3
 8009098:	d001      	beq.n	800909e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e000      	b.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40022000 	.word	0x40022000

080090b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090b8:	2300      	movs	r3, #0
 80090ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090bc:	2300      	movs	r3, #0
 80090be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d03f      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090d4:	d01c      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80090d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090da:	d802      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00e      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80090e0:	e01f      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80090e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090e6:	d003      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80090e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090ec:	d01c      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80090ee:	e018      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80090f0:	4b85      	ldr	r3, [pc, #532]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	4a84      	ldr	r2, [pc, #528]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090fc:	e015      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fab9 	bl	800967c <RCCEx_PLLSAI1_Config>
 800910a:	4603      	mov	r3, r0
 800910c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800910e:	e00c      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3320      	adds	r3, #32
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fba0 	bl	800985c <RCCEx_PLLSAI2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009120:	e003      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	74fb      	strb	r3, [r7, #19]
      break;
 8009126:	e000      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800912a:	7cfb      	ldrb	r3, [r7, #19]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009130:	4b75      	ldr	r3, [pc, #468]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009136:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800913e:	4972      	ldr	r1, [pc, #456]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009140:	4313      	orrs	r3, r2
 8009142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009146:	e001      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009148:	7cfb      	ldrb	r3, [r7, #19]
 800914a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d03f      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009160:	d01c      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009166:	d802      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00e      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800916c:	e01f      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800916e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009172:	d003      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009174:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009178:	d01c      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800917a:	e018      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800917c:	4b62      	ldr	r3, [pc, #392]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	4a61      	ldr	r2, [pc, #388]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009188:	e015      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3304      	adds	r3, #4
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fa73 	bl	800967c <RCCEx_PLLSAI1_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800919a:	e00c      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3320      	adds	r3, #32
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fb5a 	bl	800985c <RCCEx_PLLSAI2_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091ac:	e003      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	74fb      	strb	r3, [r7, #19]
      break;
 80091b2:	e000      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80091b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b6:	7cfb      	ldrb	r3, [r7, #19]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10b      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091bc:	4b52      	ldr	r3, [pc, #328]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ca:	494f      	ldr	r1, [pc, #316]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80091d2:	e001      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	7cfb      	ldrb	r3, [r7, #19]
 80091d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 80a0 	beq.w	8009326 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091e6:	2300      	movs	r3, #0
 80091e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091ea:	4b47      	ldr	r3, [pc, #284]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80091fa:	2300      	movs	r3, #0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00d      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009200:	4b41      	ldr	r3, [pc, #260]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009204:	4a40      	ldr	r2, [pc, #256]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920a:	6593      	str	r3, [r2, #88]	; 0x58
 800920c:	4b3e      	ldr	r3, [pc, #248]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800920e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009218:	2301      	movs	r3, #1
 800921a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800921c:	4b3b      	ldr	r3, [pc, #236]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a3a      	ldr	r2, [pc, #232]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009228:	f7fd fdac 	bl	8006d84 <HAL_GetTick>
 800922c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800922e:	e009      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009230:	f7fd fda8 	bl	8006d84 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d902      	bls.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	74fb      	strb	r3, [r7, #19]
        break;
 8009242:	e005      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009244:	4b31      	ldr	r3, [pc, #196]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0ef      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009250:	7cfb      	ldrb	r3, [r7, #19]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d15c      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009256:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01f      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	429a      	cmp	r2, r3
 8009272:	d019      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009274:	4b24      	ldr	r3, [pc, #144]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009280:	4b21      	ldr	r3, [pc, #132]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009286:	4a20      	ldr	r2, [pc, #128]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800928c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009290:	4b1d      	ldr	r3, [pc, #116]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009296:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800929c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092a0:	4a19      	ldr	r2, [pc, #100]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d016      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b2:	f7fd fd67 	bl	8006d84 <HAL_GetTick>
 80092b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092b8:	e00b      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ba:	f7fd fd63 	bl	8006d84 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d902      	bls.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	74fb      	strb	r3, [r7, #19]
            break;
 80092d0:	e006      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ec      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80092e0:	7cfb      	ldrb	r3, [r7, #19]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10c      	bne.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092e6:	4b08      	ldr	r3, [pc, #32]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f6:	4904      	ldr	r1, [pc, #16]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80092fe:	e009      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009300:	7cfb      	ldrb	r3, [r7, #19]
 8009302:	74bb      	strb	r3, [r7, #18]
 8009304:	e006      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8009306:	bf00      	nop
 8009308:	40021000 	.word	0x40021000
 800930c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009310:	7cfb      	ldrb	r3, [r7, #19]
 8009312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009314:	7c7b      	ldrb	r3, [r7, #17]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d105      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800931a:	4b9e      	ldr	r3, [pc, #632]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	4a9d      	ldr	r2, [pc, #628]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009332:	4b98      	ldr	r3, [pc, #608]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009338:	f023 0203 	bic.w	r2, r3, #3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	4994      	ldr	r1, [pc, #592]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009354:	4b8f      	ldr	r3, [pc, #572]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935a:	f023 020c 	bic.w	r2, r3, #12
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	498c      	ldr	r1, [pc, #560]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009364:	4313      	orrs	r3, r2
 8009366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009376:	4b87      	ldr	r3, [pc, #540]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800937c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	4983      	ldr	r1, [pc, #524]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009386:	4313      	orrs	r3, r2
 8009388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0308 	and.w	r3, r3, #8
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009398:	4b7e      	ldr	r3, [pc, #504]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800939a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	497b      	ldr	r1, [pc, #492]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093ba:	4b76      	ldr	r3, [pc, #472]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c8:	4972      	ldr	r1, [pc, #456]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093dc:	4b6d      	ldr	r3, [pc, #436]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	496a      	ldr	r1, [pc, #424]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093fe:	4b65      	ldr	r3, [pc, #404]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940c:	4961      	ldr	r1, [pc, #388]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009420:	4b5c      	ldr	r3, [pc, #368]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942e:	4959      	ldr	r1, [pc, #356]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009430:	4313      	orrs	r3, r2
 8009432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009442:	4b54      	ldr	r3, [pc, #336]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009450:	4950      	ldr	r1, [pc, #320]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009452:	4313      	orrs	r3, r2
 8009454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009464:	4b4b      	ldr	r3, [pc, #300]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	4948      	ldr	r1, [pc, #288]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009486:	4b43      	ldr	r3, [pc, #268]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009494:	493f      	ldr	r1, [pc, #252]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d028      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094a8:	4b3a      	ldr	r3, [pc, #232]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b6:	4937      	ldr	r1, [pc, #220]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094c6:	d106      	bne.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094c8:	4b32      	ldr	r3, [pc, #200]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4a31      	ldr	r2, [pc, #196]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094d2:	60d3      	str	r3, [r2, #12]
 80094d4:	e011      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094de:	d10c      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3304      	adds	r3, #4
 80094e4:	2101      	movs	r1, #1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f8c8 	bl	800967c <RCCEx_PLLSAI1_Config>
 80094ec:	4603      	mov	r3, r0
 80094ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80094f0:	7cfb      	ldrb	r3, [r7, #19]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80094f6:	7cfb      	ldrb	r3, [r7, #19]
 80094f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d028      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009514:	491f      	ldr	r1, [pc, #124]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009516:	4313      	orrs	r3, r2
 8009518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009524:	d106      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009526:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	4a1a      	ldr	r2, [pc, #104]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800952c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009530:	60d3      	str	r3, [r2, #12]
 8009532:	e011      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800953c:	d10c      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3304      	adds	r3, #4
 8009542:	2101      	movs	r1, #1
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f899 	bl	800967c <RCCEx_PLLSAI1_Config>
 800954a:	4603      	mov	r3, r0
 800954c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800954e:	7cfb      	ldrb	r3, [r7, #19]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8009554:	7cfb      	ldrb	r3, [r7, #19]
 8009556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d02b      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009572:	4908      	ldr	r1, [pc, #32]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009574:	4313      	orrs	r3, r2
 8009576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009582:	d109      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009584:	4b03      	ldr	r3, [pc, #12]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	4a02      	ldr	r2, [pc, #8]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800958a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800958e:	60d3      	str	r3, [r2, #12]
 8009590:	e014      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8009592:	bf00      	nop
 8009594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800959c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095a0:	d10c      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3304      	adds	r3, #4
 80095a6:	2101      	movs	r1, #1
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f867 	bl	800967c <RCCEx_PLLSAI1_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095b2:	7cfb      	ldrb	r3, [r7, #19]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80095b8:	7cfb      	ldrb	r3, [r7, #19]
 80095ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d02f      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095c8:	4b2b      	ldr	r3, [pc, #172]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095d6:	4928      	ldr	r1, [pc, #160]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e6:	d10d      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	2102      	movs	r1, #2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f844 	bl	800967c <RCCEx_PLLSAI1_Config>
 80095f4:	4603      	mov	r3, r0
 80095f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095f8:	7cfb      	ldrb	r3, [r7, #19]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d014      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80095fe:	7cfb      	ldrb	r3, [r7, #19]
 8009600:	74bb      	strb	r3, [r7, #18]
 8009602:	e011      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960c:	d10c      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3320      	adds	r3, #32
 8009612:	2102      	movs	r1, #2
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f921 	bl	800985c <RCCEx_PLLSAI2_Config>
 800961a:	4603      	mov	r3, r0
 800961c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800961e:	7cfb      	ldrb	r3, [r7, #19]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8009624:	7cfb      	ldrb	r3, [r7, #19]
 8009626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	490d      	ldr	r1, [pc, #52]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009644:	4313      	orrs	r3, r2
 8009646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009656:	4b08      	ldr	r3, [pc, #32]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009666:	4904      	ldr	r1, [pc, #16]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800966e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	40021000 	.word	0x40021000

0800967c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800968a:	4b73      	ldr	r3, [pc, #460]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d018      	beq.n	80096c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009696:	4b70      	ldr	r3, [pc, #448]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f003 0203 	and.w	r2, r3, #3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d10d      	bne.n	80096c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
       ||
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d009      	beq.n	80096c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80096ae:	4b6a      	ldr	r3, [pc, #424]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	091b      	lsrs	r3, r3, #4
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
       ||
 80096be:	429a      	cmp	r2, r3
 80096c0:	d044      	beq.n	800974c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	73fb      	strb	r3, [r7, #15]
 80096c6:	e041      	b.n	800974c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d00c      	beq.n	80096ea <RCCEx_PLLSAI1_Config+0x6e>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d013      	beq.n	80096fc <RCCEx_PLLSAI1_Config+0x80>
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d120      	bne.n	800971a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80096d8:	4b5f      	ldr	r3, [pc, #380]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11d      	bne.n	8009720 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096e8:	e01a      	b.n	8009720 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80096ea:	4b5b      	ldr	r3, [pc, #364]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d116      	bne.n	8009724 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096fa:	e013      	b.n	8009724 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80096fc:	4b56      	ldr	r3, [pc, #344]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10f      	bne.n	8009728 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009708:	4b53      	ldr	r3, [pc, #332]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009718:	e006      	b.n	8009728 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
      break;
 800971e:	e004      	b.n	800972a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009720:	bf00      	nop
 8009722:	e002      	b.n	800972a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009728:	bf00      	nop
    }

    if(status == HAL_OK)
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10d      	bne.n	800974c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009730:	4b49      	ldr	r3, [pc, #292]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6819      	ldr	r1, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	3b01      	subs	r3, #1
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	430b      	orrs	r3, r1
 8009746:	4944      	ldr	r1, [pc, #272]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009748:	4313      	orrs	r3, r2
 800974a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d17d      	bne.n	800984e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009752:	4b41      	ldr	r3, [pc, #260]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a40      	ldr	r2, [pc, #256]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009758:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800975c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800975e:	f7fd fb11 	bl	8006d84 <HAL_GetTick>
 8009762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009764:	e009      	b.n	800977a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009766:	f7fd fb0d 	bl	8006d84 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d902      	bls.n	800977a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	73fb      	strb	r3, [r7, #15]
        break;
 8009778:	e005      	b.n	8009786 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800977a:	4b37      	ldr	r3, [pc, #220]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1ef      	bne.n	8009766 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d160      	bne.n	800984e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d111      	bne.n	80097b6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009792:	4b31      	ldr	r3, [pc, #196]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800979a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6892      	ldr	r2, [r2, #8]
 80097a2:	0211      	lsls	r1, r2, #8
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68d2      	ldr	r2, [r2, #12]
 80097a8:	0912      	lsrs	r2, r2, #4
 80097aa:	0452      	lsls	r2, r2, #17
 80097ac:	430a      	orrs	r2, r1
 80097ae:	492a      	ldr	r1, [pc, #168]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]
 80097b4:	e027      	b.n	8009806 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d112      	bne.n	80097e2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097bc:	4b26      	ldr	r3, [pc, #152]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80097c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6892      	ldr	r2, [r2, #8]
 80097cc:	0211      	lsls	r1, r2, #8
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6912      	ldr	r2, [r2, #16]
 80097d2:	0852      	lsrs	r2, r2, #1
 80097d4:	3a01      	subs	r2, #1
 80097d6:	0552      	lsls	r2, r2, #21
 80097d8:	430a      	orrs	r2, r1
 80097da:	491f      	ldr	r1, [pc, #124]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	610b      	str	r3, [r1, #16]
 80097e0:	e011      	b.n	8009806 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097e2:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80097ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6892      	ldr	r2, [r2, #8]
 80097f2:	0211      	lsls	r1, r2, #8
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6952      	ldr	r2, [r2, #20]
 80097f8:	0852      	lsrs	r2, r2, #1
 80097fa:	3a01      	subs	r2, #1
 80097fc:	0652      	lsls	r2, r2, #25
 80097fe:	430a      	orrs	r2, r1
 8009800:	4915      	ldr	r1, [pc, #84]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009802:	4313      	orrs	r3, r2
 8009804:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a13      	ldr	r2, [pc, #76]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 800980c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009810:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009812:	f7fd fab7 	bl	8006d84 <HAL_GetTick>
 8009816:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009818:	e009      	b.n	800982e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800981a:	f7fd fab3 	bl	8006d84 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	d902      	bls.n	800982e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	73fb      	strb	r3, [r7, #15]
          break;
 800982c:	e005      	b.n	800983a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0ef      	beq.n	800981a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	4903      	ldr	r1, [pc, #12]	; (8009858 <RCCEx_PLLSAI1_Config+0x1dc>)
 800984a:	4313      	orrs	r3, r2
 800984c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40021000 	.word	0x40021000

0800985c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800986a:	4b68      	ldr	r3, [pc, #416]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d018      	beq.n	80098a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009876:	4b65      	ldr	r3, [pc, #404]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f003 0203 	and.w	r2, r3, #3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d10d      	bne.n	80098a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
       ||
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800988e:	4b5f      	ldr	r3, [pc, #380]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	091b      	lsrs	r3, r3, #4
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
       ||
 800989e:	429a      	cmp	r2, r3
 80098a0:	d044      	beq.n	800992c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	e041      	b.n	800992c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d00c      	beq.n	80098ca <RCCEx_PLLSAI2_Config+0x6e>
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d013      	beq.n	80098dc <RCCEx_PLLSAI2_Config+0x80>
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d120      	bne.n	80098fa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098b8:	4b54      	ldr	r3, [pc, #336]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11d      	bne.n	8009900 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c8:	e01a      	b.n	8009900 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80098ca:	4b50      	ldr	r3, [pc, #320]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d116      	bne.n	8009904 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098da:	e013      	b.n	8009904 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80098dc:	4b4b      	ldr	r3, [pc, #300]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10f      	bne.n	8009908 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80098e8:	4b48      	ldr	r3, [pc, #288]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098f8:	e006      	b.n	8009908 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	73fb      	strb	r3, [r7, #15]
      break;
 80098fe:	e004      	b.n	800990a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009900:	bf00      	nop
 8009902:	e002      	b.n	800990a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009908:	bf00      	nop
    }

    if(status == HAL_OK)
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10d      	bne.n	800992c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009910:	4b3e      	ldr	r3, [pc, #248]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6819      	ldr	r1, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	3b01      	subs	r3, #1
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	430b      	orrs	r3, r1
 8009926:	4939      	ldr	r1, [pc, #228]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009928:	4313      	orrs	r3, r2
 800992a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d167      	bne.n	8009a02 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009932:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a35      	ldr	r2, [pc, #212]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800993c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800993e:	f7fd fa21 	bl	8006d84 <HAL_GetTick>
 8009942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009944:	e009      	b.n	800995a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009946:	f7fd fa1d 	bl	8006d84 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d902      	bls.n	800995a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	73fb      	strb	r3, [r7, #15]
        break;
 8009958:	e005      	b.n	8009966 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800995a:	4b2c      	ldr	r3, [pc, #176]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1ef      	bne.n	8009946 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d14a      	bne.n	8009a02 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d111      	bne.n	8009996 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009972:	4b26      	ldr	r3, [pc, #152]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800997a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6892      	ldr	r2, [r2, #8]
 8009982:	0211      	lsls	r1, r2, #8
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	68d2      	ldr	r2, [r2, #12]
 8009988:	0912      	lsrs	r2, r2, #4
 800998a:	0452      	lsls	r2, r2, #17
 800998c:	430a      	orrs	r2, r1
 800998e:	491f      	ldr	r1, [pc, #124]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009990:	4313      	orrs	r3, r2
 8009992:	614b      	str	r3, [r1, #20]
 8009994:	e011      	b.n	80099ba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009996:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800999e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6892      	ldr	r2, [r2, #8]
 80099a6:	0211      	lsls	r1, r2, #8
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6912      	ldr	r2, [r2, #16]
 80099ac:	0852      	lsrs	r2, r2, #1
 80099ae:	3a01      	subs	r2, #1
 80099b0:	0652      	lsls	r2, r2, #25
 80099b2:	430a      	orrs	r2, r1
 80099b4:	4915      	ldr	r1, [pc, #84]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80099ba:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a13      	ldr	r2, [pc, #76]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c6:	f7fd f9dd 	bl	8006d84 <HAL_GetTick>
 80099ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80099cc:	e009      	b.n	80099e2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80099ce:	f7fd f9d9 	bl	8006d84 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d902      	bls.n	80099e2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	73fb      	strb	r3, [r7, #15]
          break;
 80099e0:	e005      	b.n	80099ee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0ef      	beq.n	80099ce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099f6:	695a      	ldr	r2, [r3, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	4903      	ldr	r1, [pc, #12]	; (8009a0c <RCCEx_PLLSAI2_Config+0x1b0>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	40021000 	.word	0x40021000

08009a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e07c      	b.n	8009b1c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f899 	bl	8009b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2202      	movs	r2, #2
 8009a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a62:	d902      	bls.n	8009a6a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	e002      	b.n	8009a70 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009a78:	d007      	beq.n	8009a8a <HAL_SPI_Init+0x7a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a82:	d002      	beq.n	8009a8a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10b      	bne.n	8009aaa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a9a:	d903      	bls.n	8009aa4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8009aa2:	e002      	b.n	8009aaa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	ea42 0103 	orr.w	r1, r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	f003 0204 	and.w	r2, r3, #4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	ea42 0103 	orr.w	r1, r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e01a      	b.n	8009b6c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2202      	movs	r2, #2
 8009b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f81a 	bl	8009b88 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb8:	d112      	bne.n	8009be0 <HAL_SPI_Receive+0x44>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10e      	bne.n	8009be0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009bca:	88fa      	ldrh	r2, [r7, #6]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f908 	bl	8009dec <HAL_SPI_TransmitReceive>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	e101      	b.n	8009de4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_SPI_Receive+0x52>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e0fa      	b.n	8009de4 <HAL_SPI_Receive+0x248>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bf6:	f7fd f8c5 	bl	8006d84 <HAL_GetTick>
 8009bfa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d002      	beq.n	8009c0e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c0c:	e0e1      	b.n	8009dd2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <HAL_SPI_Receive+0x7e>
 8009c14:	88fb      	ldrh	r3, [r7, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c1e:	e0d8      	b.n	8009dd2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2204      	movs	r2, #4
 8009c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	88fa      	ldrh	r2, [r7, #6]
 8009c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c6a:	d908      	bls.n	8009c7e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c7a:	605a      	str	r2, [r3, #4]
 8009c7c:	e007      	b.n	8009c8e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c8c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c96:	d107      	bne.n	8009ca8 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ca6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb2:	2b40      	cmp	r3, #64	; 0x40
 8009cb4:	d007      	beq.n	8009cc6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cce:	d867      	bhi.n	8009da0 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009cd0:	e030      	b.n	8009d34 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d117      	bne.n	8009d10 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f103 020c 	add.w	r2, r3, #12
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009d0e:	e011      	b.n	8009d34 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d10:	f7fd f838 	bl	8006d84 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d803      	bhi.n	8009d28 <HAL_SPI_Receive+0x18c>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d102      	bne.n	8009d2e <HAL_SPI_Receive+0x192>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d32:	e04e      	b.n	8009dd2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1c8      	bne.n	8009cd2 <HAL_SPI_Receive+0x136>
 8009d40:	e034      	b.n	8009dac <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d115      	bne.n	8009d7c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	b292      	uxth	r2, r2
 8009d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	1c9a      	adds	r2, r3, #2
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009d7a:	e011      	b.n	8009da0 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7c:	f7fd f802 	bl	8006d84 <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d803      	bhi.n	8009d94 <HAL_SPI_Receive+0x1f8>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d102      	bne.n	8009d9a <HAL_SPI_Receive+0x1fe>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d9e:	e018      	b.n	8009dd2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1ca      	bne.n	8009d42 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 ffab 	bl	800ad0c <SPI_EndRxTransaction>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	75fb      	strb	r3, [r7, #23]
 8009dce:	e000      	b.n	8009dd2 <HAL_SPI_Receive+0x236>
  }

error :
 8009dd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_SPI_TransmitReceive+0x26>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e1fb      	b.n	800a20a <HAL_SPI_TransmitReceive+0x41e>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e1a:	f7fc ffb3 	bl	8006d84 <HAL_GetTick>
 8009e1e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e26:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009e2e:	887b      	ldrh	r3, [r7, #2]
 8009e30:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009e32:	887b      	ldrh	r3, [r7, #2]
 8009e34:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e36:	7efb      	ldrb	r3, [r7, #27]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d00e      	beq.n	8009e5a <HAL_SPI_TransmitReceive+0x6e>
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e42:	d106      	bne.n	8009e52 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <HAL_SPI_TransmitReceive+0x66>
 8009e4c:	7efb      	ldrb	r3, [r7, #27]
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d003      	beq.n	8009e5a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009e52:	2302      	movs	r3, #2
 8009e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009e58:	e1cd      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <HAL_SPI_TransmitReceive+0x80>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_SPI_TransmitReceive+0x80>
 8009e66:	887b      	ldrh	r3, [r7, #2]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009e72:	e1c0      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d003      	beq.n	8009e88 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2205      	movs	r2, #5
 8009e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	887a      	ldrh	r2, [r7, #2]
 8009e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	887a      	ldrh	r2, [r7, #2]
 8009ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	887a      	ldrh	r2, [r7, #2]
 8009eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	887a      	ldrh	r2, [r7, #2]
 8009eb4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009eca:	d802      	bhi.n	8009ed2 <HAL_SPI_TransmitReceive+0xe6>
 8009ecc:	8a3b      	ldrh	r3, [r7, #16]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d908      	bls.n	8009ee4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ee0:	605a      	str	r2, [r3, #4]
 8009ee2:	e007      	b.n	8009ef4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ef2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	d007      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f1a:	d97c      	bls.n	800a016 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_SPI_TransmitReceive+0x13e>
 8009f24:	8a7b      	ldrh	r3, [r7, #18]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d169      	bne.n	8009ffe <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	881a      	ldrh	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	1c9a      	adds	r2, r3, #2
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f4e:	e056      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d11b      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x1aa>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d016      	beq.n	8009f96 <HAL_SPI_TransmitReceive+0x1aa>
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d113      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	881a      	ldrh	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	1c9a      	adds	r2, r3, #2
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d11c      	bne.n	8009fde <HAL_SPI_TransmitReceive+0x1f2>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d016      	beq.n	8009fde <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	b292      	uxth	r2, r2
 8009fbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	1c9a      	adds	r2, r3, #2
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009fde:	f7fc fed1 	bl	8006d84 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d807      	bhi.n	8009ffe <HAL_SPI_TransmitReceive+0x212>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d003      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009ffc:	e0fb      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a002:	b29b      	uxth	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1a3      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x164>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a00e:	b29b      	uxth	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d19d      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x164>
 800a014:	e0df      	b.n	800a1d6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_SPI_TransmitReceive+0x23a>
 800a01e:	8a7b      	ldrh	r3, [r7, #18]
 800a020:	2b01      	cmp	r3, #1
 800a022:	f040 80cb 	bne.w	800a1bc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d912      	bls.n	800a056 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a034:	881a      	ldrh	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	1c9a      	adds	r2, r3, #2
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	3b02      	subs	r3, #2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a054:	e0b2      	b.n	800a1bc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	7812      	ldrb	r2, [r2, #0]
 800a062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a072:	b29b      	uxth	r3, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a07c:	e09e      	b.n	800a1bc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d134      	bne.n	800a0f6 <HAL_SPI_TransmitReceive+0x30a>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d02f      	beq.n	800a0f6 <HAL_SPI_TransmitReceive+0x30a>
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d12c      	bne.n	800a0f6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d912      	bls.n	800a0cc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	881a      	ldrh	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	1c9a      	adds	r2, r3, #2
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b02      	subs	r3, #2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0ca:	e012      	b.n	800a0f2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b01      	cmp	r3, #1
 800a102:	d148      	bne.n	800a196 <HAL_SPI_TransmitReceive+0x3aa>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d042      	beq.n	800a196 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a116:	b29b      	uxth	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d923      	bls.n	800a164 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	b292      	uxth	r2, r2
 800a128:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	1c9a      	adds	r2, r3, #2
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b02      	subs	r3, #2
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d81f      	bhi.n	800a192 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	e016      	b.n	800a192 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f103 020c 	add.w	r2, r3, #12
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	7812      	ldrb	r2, [r2, #0]
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a186:	b29b      	uxth	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a192:	2301      	movs	r3, #1
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a196:	f7fc fdf5 	bl	8006d84 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d803      	bhi.n	800a1ae <HAL_SPI_TransmitReceive+0x3c2>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d102      	bne.n	800a1b4 <HAL_SPI_TransmitReceive+0x3c8>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d103      	bne.n	800a1bc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a1ba:	e01c      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f47f af5b 	bne.w	800a07e <HAL_SPI_TransmitReceive+0x292>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f47f af54 	bne.w	800a07e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 fdee 	bl	800adbc <SPI_EndRxTxTransaction>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	661a      	str	r2, [r3, #96]	; 0x60
 800a1f2:	e000      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a1f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3728      	adds	r7, #40	; 0x28
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_SPI_Transmit_IT+0x20>
 800a230:	2302      	movs	r3, #2
 800a232:	e06a      	b.n	800a30a <HAL_SPI_Transmit_IT+0xf6>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <HAL_SPI_Transmit_IT+0x34>
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a24c:	e058      	b.n	800a300 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b01      	cmp	r3, #1
 800a258:	d002      	beq.n	800a260 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800a25a:	2302      	movs	r3, #2
 800a25c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a25e:	e04f      	b.n	800a300 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2203      	movs	r2, #3
 800a264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	88fa      	ldrh	r2, [r7, #6]
 800a278:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	88fa      	ldrh	r2, [r7, #6]
 800a27e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2a4:	d903      	bls.n	800a2ae <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4a1b      	ldr	r2, [pc, #108]	; (800a318 <HAL_SPI_Transmit_IT+0x104>)
 800a2aa:	651a      	str	r2, [r3, #80]	; 0x50
 800a2ac:	e002      	b.n	800a2b4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4a1a      	ldr	r2, [pc, #104]	; (800a31c <HAL_SPI_Transmit_IT+0x108>)
 800a2b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2bc:	d107      	bne.n	800a2ce <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a2dc:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	d008      	beq.n	800a2fe <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	e000      	b.n	800a300 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 800a2fe:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	0800ab1b 	.word	0x0800ab1b
 800a31c:	0800aad5 	.word	0x0800aad5

0800a320 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d110      	bne.n	800a35c <HAL_SPI_Receive_IT+0x3c>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a342:	d10b      	bne.n	800a35c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2204      	movs	r2, #4
 800a348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 f88c 	bl	800a470 <HAL_SPI_TransmitReceive_IT>
 800a358:	4603      	mov	r3, r0
 800a35a:	e081      	b.n	800a460 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <HAL_SPI_Receive_IT+0x4a>
 800a366:	2302      	movs	r3, #2
 800a368:	e07a      	b.n	800a460 <HAL_SPI_Receive_IT+0x140>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d002      	beq.n	800a384 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a37e:	2302      	movs	r3, #2
 800a380:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a382:	e068      	b.n	800a456 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_SPI_Receive_IT+0x70>
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a394:	e05f      	b.n	800a456 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2204      	movs	r2, #4
 800a39a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	88fa      	ldrh	r2, [r7, #6]
 800a3ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	88fa      	ldrh	r2, [r7, #6]
 800a3b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3da:	d90b      	bls.n	800a3f4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3ea:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a1e      	ldr	r2, [pc, #120]	; (800a468 <HAL_SPI_Receive_IT+0x148>)
 800a3f0:	64da      	str	r2, [r3, #76]	; 0x4c
 800a3f2:	e00a      	b.n	800a40a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a402:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4a19      	ldr	r2, [pc, #100]	; (800a46c <HAL_SPI_Receive_IT+0x14c>)
 800a408:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a412:	d107      	bne.n	800a424 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a422:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a432:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43e:	2b40      	cmp	r3, #64	; 0x40
 800a440:	d008      	beq.n	800a454 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	e000      	b.n	800a456 <HAL_SPI_Receive_IT+0x136>
  }

error :
 800a454:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	0800aa89 	.word	0x0800aa89
 800a46c:	0800aa39 	.word	0x0800aa39

0800a470 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_SPI_TransmitReceive_IT+0x20>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e091      	b.n	800a5b4 <HAL_SPI_TransmitReceive_IT+0x144>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a49e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a4a6:	7dbb      	ldrb	r3, [r7, #22]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d00d      	beq.n	800a4c8 <HAL_SPI_TransmitReceive_IT+0x58>
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4b2:	d106      	bne.n	800a4c2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <HAL_SPI_TransmitReceive_IT+0x52>
 800a4bc:	7dbb      	ldrb	r3, [r7, #22]
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d002      	beq.n	800a4c8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a4c6:	e070      	b.n	800a5aa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_SPI_TransmitReceive_IT+0x6a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <HAL_SPI_TransmitReceive_IT+0x6a>
 800a4d4:	887b      	ldrh	r3, [r7, #2]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a4de:	e064      	b.n	800a5aa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d003      	beq.n	800a4f4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2205      	movs	r2, #5
 800a4f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	887a      	ldrh	r2, [r7, #2]
 800a504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	887a      	ldrh	r2, [r7, #2]
 800a50a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	887a      	ldrh	r2, [r7, #2]
 800a516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	887a      	ldrh	r2, [r7, #2]
 800a51e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a52a:	d906      	bls.n	800a53a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4a24      	ldr	r2, [pc, #144]	; (800a5c0 <HAL_SPI_TransmitReceive_IT+0x150>)
 800a530:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4a23      	ldr	r2, [pc, #140]	; (800a5c4 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a536:	651a      	str	r2, [r3, #80]	; 0x50
 800a538:	e005      	b.n	800a546 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4a22      	ldr	r2, [pc, #136]	; (800a5c8 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a53e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a22      	ldr	r2, [pc, #136]	; (800a5cc <HAL_SPI_TransmitReceive_IT+0x15c>)
 800a544:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a54e:	d802      	bhi.n	800a556 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a550:	887b      	ldrh	r3, [r7, #2]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d908      	bls.n	800a568 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	e007      	b.n	800a578 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a576:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a586:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a592:	2b40      	cmp	r3, #64	; 0x40
 800a594:	d008      	beq.n	800a5a8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e000      	b.n	800a5aa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800a5a8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	0800a973 	.word	0x0800a973
 800a5c4:	0800a9d9 	.word	0x0800a9d9
 800a5c8:	0800a823 	.word	0x0800a823
 800a5cc:	0800a8e1 	.word	0x0800a8e1

0800a5d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	099b      	lsrs	r3, r3, #6
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	099b      	lsrs	r3, r3, #6
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
    return;
 800a612:	e0d8      	b.n	800a7c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	085b      	lsrs	r3, r3, #1
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <HAL_SPI_IRQHandler+0x66>
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	09db      	lsrs	r3, r3, #7
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
    return;
 800a634:	e0c7      	b.n	800a7c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10c      	bne.n	800a65c <HAL_SPI_IRQHandler+0x8c>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	099b      	lsrs	r3, r3, #6
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <HAL_SPI_IRQHandler+0x8c>
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	0a1b      	lsrs	r3, r3, #8
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 80b5 	beq.w	800a7c6 <HAL_SPI_IRQHandler+0x1f6>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80ae 	beq.w	800a7c6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	099b      	lsrs	r3, r3, #6
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d023      	beq.n	800a6be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d011      	beq.n	800a6a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a686:	f043 0204 	orr.w	r2, r3, #4
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a68e:	2300      	movs	r3, #0
 800a690:	617b      	str	r3, [r7, #20]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	e00b      	b.n	800a6be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	613b      	str	r3, [r7, #16]
 800a6ba:	693b      	ldr	r3, [r7, #16]
        return;
 800a6bc:	e083      	b.n	800a7c6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	095b      	lsrs	r3, r3, #5
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d014      	beq.n	800a6f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ce:	f043 0201 	orr.w	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00c      	beq.n	800a71a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a704:	f043 0208 	orr.w	r2, r3, #8
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a70c:	2300      	movs	r3, #0
 800a70e:	60bb      	str	r3, [r7, #8]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	60bb      	str	r3, [r7, #8]
 800a718:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d050      	beq.n	800a7c4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a730:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d104      	bne.n	800a74e <HAL_SPI_IRQHandler+0x17e>
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d034      	beq.n	800a7b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0203 	bic.w	r2, r2, #3
 800a75c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a762:	2b00      	cmp	r3, #0
 800a764:	d011      	beq.n	800a78a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76a:	4a18      	ldr	r2, [pc, #96]	; (800a7cc <HAL_SPI_IRQHandler+0x1fc>)
 800a76c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a772:	4618      	mov	r0, r3
 800a774:	f7fc fc45 	bl	8007002 <HAL_DMA_Abort_IT>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d016      	beq.n	800a7c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a796:	4a0d      	ldr	r2, [pc, #52]	; (800a7cc <HAL_SPI_IRQHandler+0x1fc>)
 800a798:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fc fc2f 	bl	8007002 <HAL_DMA_Abort_IT>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a7b6:	e003      	b.n	800a7c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f813 	bl	800a7e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a7be:	e000      	b.n	800a7c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a7c0:	bf00      	nop
    return;
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
  }
}
 800a7c6:	3720      	adds	r7, #32
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	0800a7f9 	.word	0x0800a7f9

0800a7d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f7ff ffe5 	bl	800a7e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a830:	b29b      	uxth	r3, r3
 800a832:	2b01      	cmp	r3, #1
 800a834:	d923      	bls.n	800a87e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a840:	b292      	uxth	r2, r2
 800a842:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	1c9a      	adds	r2, r3, #2
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a854:	b29b      	uxth	r3, r3
 800a856:	3b02      	subs	r3, #2
 800a858:	b29a      	uxth	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a866:	b29b      	uxth	r3, r3
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d11f      	bne.n	800a8ac <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a87a:	605a      	str	r2, [r3, #4]
 800a87c:	e016      	b.n	800a8ac <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f103 020c 	add.w	r2, r3, #12
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	b2d2      	uxtb	r2, r2
 800a88e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10f      	bne.n	800a8d8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a8c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fab8 	bl	800ae48 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d912      	bls.n	800a918 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	881a      	ldrh	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3b02      	subs	r3, #2
 800a910:	b29a      	uxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a916:	e012      	b.n	800a93e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	330c      	adds	r3, #12
 800a922:	7812      	ldrb	r2, [r2, #0]
 800a924:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	b29a      	uxth	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d110      	bne.n	800a96a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a956:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fa6f 	bl	800ae48 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	b292      	uxth	r2, r2
 800a986:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	1c9a      	adds	r2, r3, #2
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a998:	b29b      	uxth	r3, r3
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10f      	bne.n	800a9d0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa3c 	bl	800ae48 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e4:	881a      	ldrh	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	1c9a      	adds	r2, r3, #2
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d110      	bne.n	800aa30 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa1c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d102      	bne.n	800aa30 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa0c 	bl	800ae48 <SPI_CloseRxTx_ISR>
    }
  }
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f103 020c 	add.w	r2, r3, #12
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d102      	bne.n	800aa80 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa26 	bl	800aecc <SPI_CloseRx_ISR>
  }
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	b292      	uxth	r2, r2
 800aa9c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	1c9a      	adds	r2, r3, #2
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa00 	bl	800aecc <SPI_CloseRx_ISR>
  }
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	330c      	adds	r3, #12
 800aae6:	7812      	ldrb	r2, [r2, #0]
 800aae8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaee:	1c5a      	adds	r2, r3, #1
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fa0d 	bl	800af2c <SPI_CloseTx_ISR>
  }
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	881a      	ldrh	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab32:	1c9a      	adds	r2, r3, #2
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f9eb 	bl	800af2c <SPI_CloseTx_ISR>
  }
}
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	603b      	str	r3, [r7, #0]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab6e:	e04c      	b.n	800ac0a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab76:	d048      	beq.n	800ac0a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ab78:	f7fc f904 	bl	8006d84 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d902      	bls.n	800ab8e <SPI_WaitFlagStateUntilTimeout+0x30>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d13d      	bne.n	800ac0a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aba6:	d111      	bne.n	800abcc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb0:	d004      	beq.n	800abbc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abba:	d107      	bne.n	800abcc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd4:	d10f      	bne.n	800abf6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e00f      	b.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689a      	ldr	r2, [r3, #8]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4013      	ands	r3, r2
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	bf0c      	ite	eq
 800ac1a:	2301      	moveq	r3, #1
 800ac1c:	2300      	movne	r3, #0
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d1a3      	bne.n	800ab70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
 800ac3e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ac40:	e057      	b.n	800acf2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ac48:	d106      	bne.n	800ac58 <SPI_WaitFifoStateUntilTimeout+0x26>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	330c      	adds	r3, #12
 800ac56:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d048      	beq.n	800acf2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ac60:	f7fc f890 	bl	8006d84 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d902      	bls.n	800ac76 <SPI_WaitFifoStateUntilTimeout+0x44>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d13d      	bne.n	800acf2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac8e:	d111      	bne.n	800acb4 <SPI_WaitFifoStateUntilTimeout+0x82>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac98:	d004      	beq.n	800aca4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aca2:	d107      	bne.n	800acb4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbc:	d10f      	bne.n	800acde <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e008      	b.n	800ad04 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d19f      	bne.n	800ac42 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad20:	d111      	bne.n	800ad46 <SPI_EndRxTransaction+0x3a>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad2a:	d004      	beq.n	800ad36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad34:	d107      	bne.n	800ad46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2180      	movs	r1, #128	; 0x80
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ff04 	bl	800ab5e <SPI_WaitFlagStateUntilTimeout>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad60:	f043 0220 	orr.w	r2, r3, #32
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e023      	b.n	800adb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad74:	d11d      	bne.n	800adb2 <SPI_EndRxTransaction+0xa6>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad7e:	d004      	beq.n	800ad8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad88:	d113      	bne.n	800adb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff ff4b 	bl	800ac32 <SPI_WaitFifoStateUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d007      	beq.n	800adb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ada6:	f043 0220 	orr.w	r2, r3, #32
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e000      	b.n	800adb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af02      	add	r7, sp, #8
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2200      	movs	r2, #0
 800add0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff ff2c 	bl	800ac32 <SPI_WaitFifoStateUntilTimeout>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d007      	beq.n	800adf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade4:	f043 0220 	orr.w	r2, r3, #32
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e027      	b.n	800ae40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2200      	movs	r2, #0
 800adf8:	2180      	movs	r1, #128	; 0x80
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7ff feaf 	bl	800ab5e <SPI_WaitFlagStateUntilTimeout>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae0a:	f043 0220 	orr.w	r2, r3, #32
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e014      	b.n	800ae40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7ff ff05 	bl	800ac32 <SPI_WaitFifoStateUntilTimeout>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae32:	f043 0220 	orr.w	r2, r3, #32
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e000      	b.n	800ae40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae50:	f7fb ff98 	bl	8006d84 <HAL_GetTick>
 800ae54:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0220 	bic.w	r2, r2, #32
 800ae64:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	2164      	movs	r1, #100	; 0x64
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff ffa6 	bl	800adbc <SPI_EndRxTxTransaction>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7a:	f043 0220 	orr.w	r2, r3, #32
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d115      	bne.n	800aeb6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d107      	bne.n	800aea6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7f7 fbd8 	bl	8002654 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800aea4:	e00e      	b.n	800aec4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fc8e 	bl	800a7d0 <HAL_SPI_TxRxCpltCallback>
}
 800aeb4:	e006      	b.n	800aec4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fc90 	bl	800a7e4 <HAL_SPI_ErrorCallback>
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800aee2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aee4:	f7fb ff4e 	bl	8006d84 <HAL_GetTick>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	2164      	movs	r1, #100	; 0x64
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7ff ff0c 	bl	800ad0c <SPI_EndRxTransaction>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefe:	f043 0220 	orr.w	r2, r3, #32
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af12:	2b00      	cmp	r3, #0
 800af14:	d103      	bne.n	800af1e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7f7 fb9c 	bl	8002654 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800af1c:	e002      	b.n	800af24 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fc60 	bl	800a7e4 <HAL_SPI_ErrorCallback>
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af34:	f7fb ff26 	bl	8006d84 <HAL_GetTick>
 800af38:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af48:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	2164      	movs	r1, #100	; 0x64
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff ff34 	bl	800adbc <SPI_EndRxTxTransaction>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5e:	f043 0220 	orr.w	r2, r3, #32
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af6e:	2300      	movs	r3, #0
 800af70:	60bb      	str	r3, [r7, #8]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	60bb      	str	r3, [r7, #8]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	60bb      	str	r3, [r7, #8]
 800af82:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff fc25 	bl	800a7e4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800af9a:	e002      	b.n	800afa2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7f7 fb6d 	bl	800267c <HAL_SPI_TxCpltCallback>
}
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b082      	sub	sp, #8
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e049      	b.n	800b050 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7f8 ff97 	bl	8003f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2202      	movs	r2, #2
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3304      	adds	r3, #4
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f000 f9e5 	bl	800b3b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d001      	beq.n	800b070 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e047      	b.n	800b100 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2202      	movs	r2, #2
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a23      	ldr	r2, [pc, #140]	; (800b10c <HAL_TIM_Base_Start+0xb4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d01d      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d018      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <HAL_TIM_Base_Start+0xb8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d013      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a1e      	ldr	r2, [pc, #120]	; (800b114 <HAL_TIM_Base_Start+0xbc>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00e      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a1c      	ldr	r2, [pc, #112]	; (800b118 <HAL_TIM_Base_Start+0xc0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d009      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <HAL_TIM_Base_Start+0xc4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d004      	beq.n	800b0be <HAL_TIM_Base_Start+0x66>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <HAL_TIM_Base_Start+0xc8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d115      	bne.n	800b0ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689a      	ldr	r2, [r3, #8]
 800b0c4:	4b17      	ldr	r3, [pc, #92]	; (800b124 <HAL_TIM_Base_Start+0xcc>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b06      	cmp	r3, #6
 800b0ce:	d015      	beq.n	800b0fc <HAL_TIM_Base_Start+0xa4>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0d6:	d011      	beq.n	800b0fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0201 	orr.w	r2, r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e8:	e008      	b.n	800b0fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	e000      	b.n	800b0fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40012c00 	.word	0x40012c00
 800b110:	40000400 	.word	0x40000400
 800b114:	40000800 	.word	0x40000800
 800b118:	40000c00 	.word	0x40000c00
 800b11c:	40013400 	.word	0x40013400
 800b120:	40014000 	.word	0x40014000
 800b124:	00010007 	.word	0x00010007

0800b128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d122      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0202 	mvn.w	r2, #2
 800b154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f905 	bl	800b37a <HAL_TIM_IC_CaptureCallback>
 800b170:	e005      	b.n	800b17e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f8f7 	bl	800b366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f908 	bl	800b38e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0204 	mvn.w	r2, #4
 800b1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f8db 	bl	800b37a <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f8cd 	bl	800b366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f8de 	bl	800b38e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0208 	mvn.w	r2, #8
 800b1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2204      	movs	r2, #4
 800b202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f8b1 	bl	800b37a <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f8a3 	bl	800b366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f8b4 	bl	800b38e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b10      	cmp	r3, #16
 800b238:	d122      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0310 	and.w	r3, r3, #16
 800b244:	2b10      	cmp	r3, #16
 800b246:	d11b      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0210 	mvn.w	r2, #16
 800b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2208      	movs	r2, #8
 800b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f887 	bl	800b37a <HAL_TIM_IC_CaptureCallback>
 800b26c:	e005      	b.n	800b27a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f879 	bl	800b366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f88a 	bl	800b38e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10e      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d107      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0201 	mvn.w	r2, #1
 800b2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7f8 fbb2 	bl	8003a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b6:	2b80      	cmp	r3, #128	; 0x80
 800b2b8:	d10e      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d107      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f914 	bl	800b500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e6:	d10e      	bne.n	800b306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f2:	2b80      	cmp	r3, #128	; 0x80
 800b2f4:	d107      	bne.n	800b306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f907 	bl	800b514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d10e      	bne.n	800b332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d107      	bne.n	800b332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f838 	bl	800b3a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d10e      	bne.n	800b35e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f003 0320 	and.w	r3, r3, #32
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d107      	bne.n	800b35e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f06f 0220 	mvn.w	r2, #32
 800b356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f8c7 	bl	800b4ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a40      	ldr	r2, [pc, #256]	; (800b4cc <TIM_Base_SetConfig+0x114>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d013      	beq.n	800b3f8 <TIM_Base_SetConfig+0x40>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3d6:	d00f      	beq.n	800b3f8 <TIM_Base_SetConfig+0x40>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a3d      	ldr	r2, [pc, #244]	; (800b4d0 <TIM_Base_SetConfig+0x118>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00b      	beq.n	800b3f8 <TIM_Base_SetConfig+0x40>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a3c      	ldr	r2, [pc, #240]	; (800b4d4 <TIM_Base_SetConfig+0x11c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d007      	beq.n	800b3f8 <TIM_Base_SetConfig+0x40>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a3b      	ldr	r2, [pc, #236]	; (800b4d8 <TIM_Base_SetConfig+0x120>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d003      	beq.n	800b3f8 <TIM_Base_SetConfig+0x40>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a3a      	ldr	r2, [pc, #232]	; (800b4dc <TIM_Base_SetConfig+0x124>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d108      	bne.n	800b40a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2f      	ldr	r2, [pc, #188]	; (800b4cc <TIM_Base_SetConfig+0x114>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d01f      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b418:	d01b      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a2c      	ldr	r2, [pc, #176]	; (800b4d0 <TIM_Base_SetConfig+0x118>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d017      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a2b      	ldr	r2, [pc, #172]	; (800b4d4 <TIM_Base_SetConfig+0x11c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d013      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	; (800b4d8 <TIM_Base_SetConfig+0x120>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00f      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a29      	ldr	r2, [pc, #164]	; (800b4dc <TIM_Base_SetConfig+0x124>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d00b      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a28      	ldr	r2, [pc, #160]	; (800b4e0 <TIM_Base_SetConfig+0x128>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d007      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a27      	ldr	r2, [pc, #156]	; (800b4e4 <TIM_Base_SetConfig+0x12c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d003      	beq.n	800b452 <TIM_Base_SetConfig+0x9a>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a26      	ldr	r2, [pc, #152]	; (800b4e8 <TIM_Base_SetConfig+0x130>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d108      	bne.n	800b464 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a10      	ldr	r2, [pc, #64]	; (800b4cc <TIM_Base_SetConfig+0x114>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d00f      	beq.n	800b4b0 <TIM_Base_SetConfig+0xf8>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a12      	ldr	r2, [pc, #72]	; (800b4dc <TIM_Base_SetConfig+0x124>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00b      	beq.n	800b4b0 <TIM_Base_SetConfig+0xf8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a11      	ldr	r2, [pc, #68]	; (800b4e0 <TIM_Base_SetConfig+0x128>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d007      	beq.n	800b4b0 <TIM_Base_SetConfig+0xf8>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a10      	ldr	r2, [pc, #64]	; (800b4e4 <TIM_Base_SetConfig+0x12c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d003      	beq.n	800b4b0 <TIM_Base_SetConfig+0xf8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a0f      	ldr	r2, [pc, #60]	; (800b4e8 <TIM_Base_SetConfig+0x130>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d103      	bne.n	800b4b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	691a      	ldr	r2, [r3, #16]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	615a      	str	r2, [r3, #20]
}
 800b4be:	bf00      	nop
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	40012c00 	.word	0x40012c00
 800b4d0:	40000400 	.word	0x40000400
 800b4d4:	40000800 	.word	0x40000800
 800b4d8:	40000c00 	.word	0x40000c00
 800b4dc:	40013400 	.word	0x40013400
 800b4e0:	40014000 	.word	0x40014000
 800b4e4:	40014400 	.word	0x40014400
 800b4e8:	40014800 	.word	0x40014800

0800b4ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e040      	b.n	800b5bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7f8 fd00 	bl	8003f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2224      	movs	r2, #36	; 0x24
 800b554:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 0201 	bic.w	r2, r2, #1
 800b564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f8c0 	bl	800b6ec <UART_SetConfig>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d101      	bne.n	800b576 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e022      	b.n	800b5bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fb3e 	bl	800bc00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685a      	ldr	r2, [r3, #4]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	689a      	ldr	r2, [r3, #8]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0201 	orr.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fbc5 	bl	800bd44 <UART_CheckIdleState>
 800b5ba:	4603      	mov	r3, r0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08a      	sub	sp, #40	; 0x28
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	603b      	str	r3, [r7, #0]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5d8:	2b20      	cmp	r3, #32
 800b5da:	f040 8081 	bne.w	800b6e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <HAL_UART_Transmit+0x26>
 800b5e4:	88fb      	ldrh	r3, [r7, #6]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e079      	b.n	800b6e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_UART_Transmit+0x38>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e072      	b.n	800b6e2 <HAL_UART_Transmit+0x11e>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2221      	movs	r2, #33	; 0x21
 800b60e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b610:	f7fb fbb8 	bl	8006d84 <HAL_GetTick>
 800b614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	88fa      	ldrh	r2, [r7, #6]
 800b61a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	88fa      	ldrh	r2, [r7, #6]
 800b622:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b62e:	d108      	bne.n	800b642 <HAL_UART_Transmit+0x7e>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d104      	bne.n	800b642 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800b638:	2300      	movs	r3, #0
 800b63a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	61bb      	str	r3, [r7, #24]
 800b640:	e003      	b.n	800b64a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b652:	e02d      	b.n	800b6b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	2180      	movs	r1, #128	; 0x80
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 fbb5 	bl	800bdce <UART_WaitOnFlagUntilTimeout>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e039      	b.n	800b6e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10b      	bne.n	800b68c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	881a      	ldrh	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b680:	b292      	uxth	r2, r2
 800b682:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	3302      	adds	r3, #2
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	e008      	b.n	800b69e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	b292      	uxth	r2, r2
 800b696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	3301      	adds	r3, #1
 800b69c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1cb      	bne.n	800b654 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2140      	movs	r1, #64	; 0x40
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fb81 	bl	800bdce <UART_WaitOnFlagUntilTimeout>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e005      	b.n	800b6e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e000      	b.n	800b6e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b6e0:	2302      	movs	r3, #2
  }
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b6f0:	b088      	sub	sp, #32
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	431a      	orrs	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	4313      	orrs	r3, r2
 800b710:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	4bac      	ldr	r3, [pc, #688]	; (800b9cc <UART_SetConfig+0x2e0>)
 800b71a:	4013      	ands	r3, r2
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	69f9      	ldr	r1, [r7, #28]
 800b722:	430b      	orrs	r3, r1
 800b724:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68da      	ldr	r2, [r3, #12]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	430a      	orrs	r2, r1
 800b73a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4aa2      	ldr	r2, [pc, #648]	; (800b9d0 <UART_SetConfig+0x2e4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d004      	beq.n	800b756 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	4313      	orrs	r3, r2
 800b754:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	69fa      	ldr	r2, [r7, #28]
 800b766:	430a      	orrs	r2, r1
 800b768:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a99      	ldr	r2, [pc, #612]	; (800b9d4 <UART_SetConfig+0x2e8>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d121      	bne.n	800b7b8 <UART_SetConfig+0xcc>
 800b774:	4b98      	ldr	r3, [pc, #608]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d816      	bhi.n	800b7b0 <UART_SetConfig+0xc4>
 800b782:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <UART_SetConfig+0x9c>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b799 	.word	0x0800b799
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b79f 	.word	0x0800b79f
 800b794:	0800b7ab 	.word	0x0800b7ab
 800b798:	2301      	movs	r3, #1
 800b79a:	76fb      	strb	r3, [r7, #27]
 800b79c:	e0e8      	b.n	800b970 <UART_SetConfig+0x284>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	76fb      	strb	r3, [r7, #27]
 800b7a2:	e0e5      	b.n	800b970 <UART_SetConfig+0x284>
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	76fb      	strb	r3, [r7, #27]
 800b7a8:	e0e2      	b.n	800b970 <UART_SetConfig+0x284>
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	76fb      	strb	r3, [r7, #27]
 800b7ae:	e0df      	b.n	800b970 <UART_SetConfig+0x284>
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	76fb      	strb	r3, [r7, #27]
 800b7b4:	bf00      	nop
 800b7b6:	e0db      	b.n	800b970 <UART_SetConfig+0x284>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a87      	ldr	r2, [pc, #540]	; (800b9dc <UART_SetConfig+0x2f0>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d134      	bne.n	800b82c <UART_SetConfig+0x140>
 800b7c2:	4b85      	ldr	r3, [pc, #532]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c8:	f003 030c 	and.w	r3, r3, #12
 800b7cc:	2b0c      	cmp	r3, #12
 800b7ce:	d829      	bhi.n	800b824 <UART_SetConfig+0x138>
 800b7d0:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <UART_SetConfig+0xec>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b80d 	.word	0x0800b80d
 800b7dc:	0800b825 	.word	0x0800b825
 800b7e0:	0800b825 	.word	0x0800b825
 800b7e4:	0800b825 	.word	0x0800b825
 800b7e8:	0800b819 	.word	0x0800b819
 800b7ec:	0800b825 	.word	0x0800b825
 800b7f0:	0800b825 	.word	0x0800b825
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b813 	.word	0x0800b813
 800b7fc:	0800b825 	.word	0x0800b825
 800b800:	0800b825 	.word	0x0800b825
 800b804:	0800b825 	.word	0x0800b825
 800b808:	0800b81f 	.word	0x0800b81f
 800b80c:	2300      	movs	r3, #0
 800b80e:	76fb      	strb	r3, [r7, #27]
 800b810:	e0ae      	b.n	800b970 <UART_SetConfig+0x284>
 800b812:	2302      	movs	r3, #2
 800b814:	76fb      	strb	r3, [r7, #27]
 800b816:	e0ab      	b.n	800b970 <UART_SetConfig+0x284>
 800b818:	2304      	movs	r3, #4
 800b81a:	76fb      	strb	r3, [r7, #27]
 800b81c:	e0a8      	b.n	800b970 <UART_SetConfig+0x284>
 800b81e:	2308      	movs	r3, #8
 800b820:	76fb      	strb	r3, [r7, #27]
 800b822:	e0a5      	b.n	800b970 <UART_SetConfig+0x284>
 800b824:	2310      	movs	r3, #16
 800b826:	76fb      	strb	r3, [r7, #27]
 800b828:	bf00      	nop
 800b82a:	e0a1      	b.n	800b970 <UART_SetConfig+0x284>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a6b      	ldr	r2, [pc, #428]	; (800b9e0 <UART_SetConfig+0x2f4>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d120      	bne.n	800b878 <UART_SetConfig+0x18c>
 800b836:	4b68      	ldr	r3, [pc, #416]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b840:	2b10      	cmp	r3, #16
 800b842:	d00f      	beq.n	800b864 <UART_SetConfig+0x178>
 800b844:	2b10      	cmp	r3, #16
 800b846:	d802      	bhi.n	800b84e <UART_SetConfig+0x162>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <UART_SetConfig+0x16c>
 800b84c:	e010      	b.n	800b870 <UART_SetConfig+0x184>
 800b84e:	2b20      	cmp	r3, #32
 800b850:	d005      	beq.n	800b85e <UART_SetConfig+0x172>
 800b852:	2b30      	cmp	r3, #48	; 0x30
 800b854:	d009      	beq.n	800b86a <UART_SetConfig+0x17e>
 800b856:	e00b      	b.n	800b870 <UART_SetConfig+0x184>
 800b858:	2300      	movs	r3, #0
 800b85a:	76fb      	strb	r3, [r7, #27]
 800b85c:	e088      	b.n	800b970 <UART_SetConfig+0x284>
 800b85e:	2302      	movs	r3, #2
 800b860:	76fb      	strb	r3, [r7, #27]
 800b862:	e085      	b.n	800b970 <UART_SetConfig+0x284>
 800b864:	2304      	movs	r3, #4
 800b866:	76fb      	strb	r3, [r7, #27]
 800b868:	e082      	b.n	800b970 <UART_SetConfig+0x284>
 800b86a:	2308      	movs	r3, #8
 800b86c:	76fb      	strb	r3, [r7, #27]
 800b86e:	e07f      	b.n	800b970 <UART_SetConfig+0x284>
 800b870:	2310      	movs	r3, #16
 800b872:	76fb      	strb	r3, [r7, #27]
 800b874:	bf00      	nop
 800b876:	e07b      	b.n	800b970 <UART_SetConfig+0x284>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a59      	ldr	r2, [pc, #356]	; (800b9e4 <UART_SetConfig+0x2f8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d120      	bne.n	800b8c4 <UART_SetConfig+0x1d8>
 800b882:	4b55      	ldr	r3, [pc, #340]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b88c:	2b40      	cmp	r3, #64	; 0x40
 800b88e:	d00f      	beq.n	800b8b0 <UART_SetConfig+0x1c4>
 800b890:	2b40      	cmp	r3, #64	; 0x40
 800b892:	d802      	bhi.n	800b89a <UART_SetConfig+0x1ae>
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <UART_SetConfig+0x1b8>
 800b898:	e010      	b.n	800b8bc <UART_SetConfig+0x1d0>
 800b89a:	2b80      	cmp	r3, #128	; 0x80
 800b89c:	d005      	beq.n	800b8aa <UART_SetConfig+0x1be>
 800b89e:	2bc0      	cmp	r3, #192	; 0xc0
 800b8a0:	d009      	beq.n	800b8b6 <UART_SetConfig+0x1ca>
 800b8a2:	e00b      	b.n	800b8bc <UART_SetConfig+0x1d0>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	76fb      	strb	r3, [r7, #27]
 800b8a8:	e062      	b.n	800b970 <UART_SetConfig+0x284>
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	76fb      	strb	r3, [r7, #27]
 800b8ae:	e05f      	b.n	800b970 <UART_SetConfig+0x284>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	76fb      	strb	r3, [r7, #27]
 800b8b4:	e05c      	b.n	800b970 <UART_SetConfig+0x284>
 800b8b6:	2308      	movs	r3, #8
 800b8b8:	76fb      	strb	r3, [r7, #27]
 800b8ba:	e059      	b.n	800b970 <UART_SetConfig+0x284>
 800b8bc:	2310      	movs	r3, #16
 800b8be:	76fb      	strb	r3, [r7, #27]
 800b8c0:	bf00      	nop
 800b8c2:	e055      	b.n	800b970 <UART_SetConfig+0x284>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a47      	ldr	r2, [pc, #284]	; (800b9e8 <UART_SetConfig+0x2fc>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d124      	bne.n	800b918 <UART_SetConfig+0x22c>
 800b8ce:	4b42      	ldr	r3, [pc, #264]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8dc:	d012      	beq.n	800b904 <UART_SetConfig+0x218>
 800b8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e2:	d802      	bhi.n	800b8ea <UART_SetConfig+0x1fe>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <UART_SetConfig+0x20c>
 800b8e8:	e012      	b.n	800b910 <UART_SetConfig+0x224>
 800b8ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ee:	d006      	beq.n	800b8fe <UART_SetConfig+0x212>
 800b8f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8f4:	d009      	beq.n	800b90a <UART_SetConfig+0x21e>
 800b8f6:	e00b      	b.n	800b910 <UART_SetConfig+0x224>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	76fb      	strb	r3, [r7, #27]
 800b8fc:	e038      	b.n	800b970 <UART_SetConfig+0x284>
 800b8fe:	2302      	movs	r3, #2
 800b900:	76fb      	strb	r3, [r7, #27]
 800b902:	e035      	b.n	800b970 <UART_SetConfig+0x284>
 800b904:	2304      	movs	r3, #4
 800b906:	76fb      	strb	r3, [r7, #27]
 800b908:	e032      	b.n	800b970 <UART_SetConfig+0x284>
 800b90a:	2308      	movs	r3, #8
 800b90c:	76fb      	strb	r3, [r7, #27]
 800b90e:	e02f      	b.n	800b970 <UART_SetConfig+0x284>
 800b910:	2310      	movs	r3, #16
 800b912:	76fb      	strb	r3, [r7, #27]
 800b914:	bf00      	nop
 800b916:	e02b      	b.n	800b970 <UART_SetConfig+0x284>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a2c      	ldr	r2, [pc, #176]	; (800b9d0 <UART_SetConfig+0x2e4>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d124      	bne.n	800b96c <UART_SetConfig+0x280>
 800b922:	4b2d      	ldr	r3, [pc, #180]	; (800b9d8 <UART_SetConfig+0x2ec>)
 800b924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b930:	d012      	beq.n	800b958 <UART_SetConfig+0x26c>
 800b932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b936:	d802      	bhi.n	800b93e <UART_SetConfig+0x252>
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <UART_SetConfig+0x260>
 800b93c:	e012      	b.n	800b964 <UART_SetConfig+0x278>
 800b93e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b942:	d006      	beq.n	800b952 <UART_SetConfig+0x266>
 800b944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b948:	d009      	beq.n	800b95e <UART_SetConfig+0x272>
 800b94a:	e00b      	b.n	800b964 <UART_SetConfig+0x278>
 800b94c:	2300      	movs	r3, #0
 800b94e:	76fb      	strb	r3, [r7, #27]
 800b950:	e00e      	b.n	800b970 <UART_SetConfig+0x284>
 800b952:	2302      	movs	r3, #2
 800b954:	76fb      	strb	r3, [r7, #27]
 800b956:	e00b      	b.n	800b970 <UART_SetConfig+0x284>
 800b958:	2304      	movs	r3, #4
 800b95a:	76fb      	strb	r3, [r7, #27]
 800b95c:	e008      	b.n	800b970 <UART_SetConfig+0x284>
 800b95e:	2308      	movs	r3, #8
 800b960:	76fb      	strb	r3, [r7, #27]
 800b962:	e005      	b.n	800b970 <UART_SetConfig+0x284>
 800b964:	2310      	movs	r3, #16
 800b966:	76fb      	strb	r3, [r7, #27]
 800b968:	bf00      	nop
 800b96a:	e001      	b.n	800b970 <UART_SetConfig+0x284>
 800b96c:	2310      	movs	r3, #16
 800b96e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a16      	ldr	r2, [pc, #88]	; (800b9d0 <UART_SetConfig+0x2e4>)
 800b976:	4293      	cmp	r3, r2
 800b978:	f040 8087 	bne.w	800ba8a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b97c:	7efb      	ldrb	r3, [r7, #27]
 800b97e:	2b08      	cmp	r3, #8
 800b980:	d836      	bhi.n	800b9f0 <UART_SetConfig+0x304>
 800b982:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <UART_SetConfig+0x29c>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b9ad 	.word	0x0800b9ad
 800b98c:	0800b9f1 	.word	0x0800b9f1
 800b990:	0800b9b5 	.word	0x0800b9b5
 800b994:	0800b9f1 	.word	0x0800b9f1
 800b998:	0800b9bb 	.word	0x0800b9bb
 800b99c:	0800b9f1 	.word	0x0800b9f1
 800b9a0:	0800b9f1 	.word	0x0800b9f1
 800b9a4:	0800b9f1 	.word	0x0800b9f1
 800b9a8:	0800b9c3 	.word	0x0800b9c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9ac:	f7fd faf4 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800b9b0:	6178      	str	r0, [r7, #20]
        break;
 800b9b2:	e022      	b.n	800b9fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9b4:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <UART_SetConfig+0x300>)
 800b9b6:	617b      	str	r3, [r7, #20]
        break;
 800b9b8:	e01f      	b.n	800b9fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9ba:	f7fd fa57 	bl	8008e6c <HAL_RCC_GetSysClockFreq>
 800b9be:	6178      	str	r0, [r7, #20]
        break;
 800b9c0:	e01b      	b.n	800b9fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9c6:	617b      	str	r3, [r7, #20]
        break;
 800b9c8:	e017      	b.n	800b9fa <UART_SetConfig+0x30e>
 800b9ca:	bf00      	nop
 800b9cc:	efff69f3 	.word	0xefff69f3
 800b9d0:	40008000 	.word	0x40008000
 800b9d4:	40013800 	.word	0x40013800
 800b9d8:	40021000 	.word	0x40021000
 800b9dc:	40004400 	.word	0x40004400
 800b9e0:	40004800 	.word	0x40004800
 800b9e4:	40004c00 	.word	0x40004c00
 800b9e8:	40005000 	.word	0x40005000
 800b9ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	76bb      	strb	r3, [r7, #26]
        break;
 800b9f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80f1 	beq.w	800bbe4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	4413      	add	r3, r2
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d305      	bcc.n	800ba1e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d902      	bls.n	800ba24 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	76bb      	strb	r3, [r7, #26]
 800ba22:	e0df      	b.n	800bbe4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	4619      	mov	r1, r3
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	f04f 0400 	mov.w	r4, #0
 800ba34:	0214      	lsls	r4, r2, #8
 800ba36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ba3a:	020b      	lsls	r3, r1, #8
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	0852      	lsrs	r2, r2, #1
 800ba42:	4611      	mov	r1, r2
 800ba44:	f04f 0200 	mov.w	r2, #0
 800ba48:	eb13 0b01 	adds.w	fp, r3, r1
 800ba4c:	eb44 0c02 	adc.w	ip, r4, r2
 800ba50:	4658      	mov	r0, fp
 800ba52:	4661      	mov	r1, ip
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f04f 0400 	mov.w	r4, #0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4623      	mov	r3, r4
 800ba60:	f7f4 fffc 	bl	8000a5c <__aeabi_uldivmod>
 800ba64:	4603      	mov	r3, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba70:	d308      	bcc.n	800ba84 <UART_SetConfig+0x398>
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba78:	d204      	bcs.n	800ba84 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	60da      	str	r2, [r3, #12]
 800ba82:	e0af      	b.n	800bbe4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	76bb      	strb	r3, [r7, #26]
 800ba88:	e0ac      	b.n	800bbe4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba92:	d15b      	bne.n	800bb4c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800ba94:	7efb      	ldrb	r3, [r7, #27]
 800ba96:	2b08      	cmp	r3, #8
 800ba98:	d827      	bhi.n	800baea <UART_SetConfig+0x3fe>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <UART_SetConfig+0x3b4>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800bac5 	.word	0x0800bac5
 800baa4:	0800bacd 	.word	0x0800bacd
 800baa8:	0800bad5 	.word	0x0800bad5
 800baac:	0800baeb 	.word	0x0800baeb
 800bab0:	0800badb 	.word	0x0800badb
 800bab4:	0800baeb 	.word	0x0800baeb
 800bab8:	0800baeb 	.word	0x0800baeb
 800babc:	0800baeb 	.word	0x0800baeb
 800bac0:	0800bae3 	.word	0x0800bae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bac4:	f7fd fa68 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800bac8:	6178      	str	r0, [r7, #20]
        break;
 800baca:	e013      	b.n	800baf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bacc:	f7fd fa7a 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800bad0:	6178      	str	r0, [r7, #20]
        break;
 800bad2:	e00f      	b.n	800baf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bad4:	4b49      	ldr	r3, [pc, #292]	; (800bbfc <UART_SetConfig+0x510>)
 800bad6:	617b      	str	r3, [r7, #20]
        break;
 800bad8:	e00c      	b.n	800baf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bada:	f7fd f9c7 	bl	8008e6c <HAL_RCC_GetSysClockFreq>
 800bade:	6178      	str	r0, [r7, #20]
        break;
 800bae0:	e008      	b.n	800baf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae6:	617b      	str	r3, [r7, #20]
        break;
 800bae8:	e004      	b.n	800baf4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	76bb      	strb	r3, [r7, #26]
        break;
 800baf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d074      	beq.n	800bbe4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	005a      	lsls	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b0f      	cmp	r3, #15
 800bb16:	d916      	bls.n	800bb46 <UART_SetConfig+0x45a>
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1e:	d212      	bcs.n	800bb46 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	f023 030f 	bic.w	r3, r3, #15
 800bb28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	085b      	lsrs	r3, r3, #1
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f003 0307 	and.w	r3, r3, #7
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	89fb      	ldrh	r3, [r7, #14]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	89fa      	ldrh	r2, [r7, #14]
 800bb42:	60da      	str	r2, [r3, #12]
 800bb44:	e04e      	b.n	800bbe4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	76bb      	strb	r3, [r7, #26]
 800bb4a:	e04b      	b.n	800bbe4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb4c:	7efb      	ldrb	r3, [r7, #27]
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	d827      	bhi.n	800bba2 <UART_SetConfig+0x4b6>
 800bb52:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <UART_SetConfig+0x46c>)
 800bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb58:	0800bb7d 	.word	0x0800bb7d
 800bb5c:	0800bb85 	.word	0x0800bb85
 800bb60:	0800bb8d 	.word	0x0800bb8d
 800bb64:	0800bba3 	.word	0x0800bba3
 800bb68:	0800bb93 	.word	0x0800bb93
 800bb6c:	0800bba3 	.word	0x0800bba3
 800bb70:	0800bba3 	.word	0x0800bba3
 800bb74:	0800bba3 	.word	0x0800bba3
 800bb78:	0800bb9b 	.word	0x0800bb9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb7c:	f7fd fa0c 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800bb80:	6178      	str	r0, [r7, #20]
        break;
 800bb82:	e013      	b.n	800bbac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb84:	f7fd fa1e 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800bb88:	6178      	str	r0, [r7, #20]
        break;
 800bb8a:	e00f      	b.n	800bbac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb8c:	4b1b      	ldr	r3, [pc, #108]	; (800bbfc <UART_SetConfig+0x510>)
 800bb8e:	617b      	str	r3, [r7, #20]
        break;
 800bb90:	e00c      	b.n	800bbac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb92:	f7fd f96b 	bl	8008e6c <HAL_RCC_GetSysClockFreq>
 800bb96:	6178      	str	r0, [r7, #20]
        break;
 800bb98:	e008      	b.n	800bbac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb9e:	617b      	str	r3, [r7, #20]
        break;
 800bba0:	e004      	b.n	800bbac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	76bb      	strb	r3, [r7, #26]
        break;
 800bbaa:	bf00      	nop
    }

    if (pclk != 0U)
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d018      	beq.n	800bbe4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	085a      	lsrs	r2, r3, #1
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	441a      	add	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	2b0f      	cmp	r3, #15
 800bbcc:	d908      	bls.n	800bbe0 <UART_SetConfig+0x4f4>
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd4:	d204      	bcs.n	800bbe0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	60da      	str	r2, [r3, #12]
 800bbde:	e001      	b.n	800bbe4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bbf0:	7ebb      	ldrb	r3, [r7, #26]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bbfc:	00f42400 	.word	0x00f42400

0800bc00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	f003 0302 	and.w	r3, r3, #2
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	f003 0308 	and.w	r3, r3, #8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	f003 0310 	and.w	r3, r3, #16
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00a      	beq.n	800bcb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb6:	f003 0320 	and.w	r3, r3, #32
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d01a      	beq.n	800bd16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcfe:	d10a      	bne.n	800bd16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	430a      	orrs	r2, r1
 800bd36:	605a      	str	r2, [r3, #4]
  }
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd52:	f7fb f817 	bl	8006d84 <HAL_GetTick>
 800bd56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d10e      	bne.n	800bd84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f82a 	bl	800bdce <UART_WaitOnFlagUntilTimeout>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e020      	b.n	800bdc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d10e      	bne.n	800bdb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f814 	bl	800bdce <UART_WaitOnFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdac:	2303      	movs	r3, #3
 800bdae:	e00a      	b.n	800bdc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	603b      	str	r3, [r7, #0]
 800bdda:	4613      	mov	r3, r2
 800bddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdde:	e05d      	b.n	800be9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde6:	d059      	beq.n	800be9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bde8:	f7fa ffcc 	bl	8006d84 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	69ba      	ldr	r2, [r7, #24]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d302      	bcc.n	800bdfe <UART_WaitOnFlagUntilTimeout+0x30>
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d11b      	bne.n	800be36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f022 0201 	bic.w	r2, r2, #1
 800be1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2220      	movs	r2, #32
 800be22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2220      	movs	r2, #32
 800be28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e042      	b.n	800bebc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b00      	cmp	r3, #0
 800be42:	d02b      	beq.n	800be9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	69db      	ldr	r3, [r3, #28]
 800be4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be52:	d123      	bne.n	800be9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f022 0201 	bic.w	r2, r2, #1
 800be7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2220      	movs	r2, #32
 800be82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2220      	movs	r2, #32
 800be88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2220      	movs	r2, #32
 800be8e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800be98:	2303      	movs	r3, #3
 800be9a:	e00f      	b.n	800bebc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	69da      	ldr	r2, [r3, #28]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4013      	ands	r3, r2
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	bf0c      	ite	eq
 800beac:	2301      	moveq	r3, #1
 800beae:	2300      	movne	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	461a      	mov	r2, r3
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d092      	beq.n	800bde0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <atoi>:
 800bec4:	220a      	movs	r2, #10
 800bec6:	2100      	movs	r1, #0
 800bec8:	f000 ba08 	b.w	800c2dc <strtol>

0800becc <__errno>:
 800becc:	4b01      	ldr	r3, [pc, #4]	; (800bed4 <__errno+0x8>)
 800bece:	6818      	ldr	r0, [r3, #0]
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20000364 	.word	0x20000364

0800bed8 <__libc_init_array>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	4e0d      	ldr	r6, [pc, #52]	; (800bf10 <__libc_init_array+0x38>)
 800bedc:	4c0d      	ldr	r4, [pc, #52]	; (800bf14 <__libc_init_array+0x3c>)
 800bede:	1ba4      	subs	r4, r4, r6
 800bee0:	10a4      	asrs	r4, r4, #2
 800bee2:	2500      	movs	r5, #0
 800bee4:	42a5      	cmp	r5, r4
 800bee6:	d109      	bne.n	800befc <__libc_init_array+0x24>
 800bee8:	4e0b      	ldr	r6, [pc, #44]	; (800bf18 <__libc_init_array+0x40>)
 800beea:	4c0c      	ldr	r4, [pc, #48]	; (800bf1c <__libc_init_array+0x44>)
 800beec:	f001 fa9c 	bl	800d428 <_init>
 800bef0:	1ba4      	subs	r4, r4, r6
 800bef2:	10a4      	asrs	r4, r4, #2
 800bef4:	2500      	movs	r5, #0
 800bef6:	42a5      	cmp	r5, r4
 800bef8:	d105      	bne.n	800bf06 <__libc_init_array+0x2e>
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf00:	4798      	blx	r3
 800bf02:	3501      	adds	r5, #1
 800bf04:	e7ee      	b.n	800bee4 <__libc_init_array+0xc>
 800bf06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf0a:	4798      	blx	r3
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	e7f2      	b.n	800bef6 <__libc_init_array+0x1e>
 800bf10:	0800e338 	.word	0x0800e338
 800bf14:	0800e338 	.word	0x0800e338
 800bf18:	0800e338 	.word	0x0800e338
 800bf1c:	0800e33c 	.word	0x0800e33c

0800bf20 <memcmp>:
 800bf20:	b530      	push	{r4, r5, lr}
 800bf22:	2400      	movs	r4, #0
 800bf24:	42a2      	cmp	r2, r4
 800bf26:	d101      	bne.n	800bf2c <memcmp+0xc>
 800bf28:	2000      	movs	r0, #0
 800bf2a:	e007      	b.n	800bf3c <memcmp+0x1c>
 800bf2c:	5d03      	ldrb	r3, [r0, r4]
 800bf2e:	3401      	adds	r4, #1
 800bf30:	190d      	adds	r5, r1, r4
 800bf32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bf36:	42ab      	cmp	r3, r5
 800bf38:	d0f4      	beq.n	800bf24 <memcmp+0x4>
 800bf3a:	1b58      	subs	r0, r3, r5
 800bf3c:	bd30      	pop	{r4, r5, pc}

0800bf3e <memcpy>:
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	1e43      	subs	r3, r0, #1
 800bf42:	440a      	add	r2, r1
 800bf44:	4291      	cmp	r1, r2
 800bf46:	d100      	bne.n	800bf4a <memcpy+0xc>
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf52:	e7f7      	b.n	800bf44 <memcpy+0x6>

0800bf54 <memset>:
 800bf54:	4402      	add	r2, r0
 800bf56:	4603      	mov	r3, r0
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d100      	bne.n	800bf5e <memset+0xa>
 800bf5c:	4770      	bx	lr
 800bf5e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf62:	e7f9      	b.n	800bf58 <memset+0x4>

0800bf64 <iprintf>:
 800bf64:	b40f      	push	{r0, r1, r2, r3}
 800bf66:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <iprintf+0x2c>)
 800bf68:	b513      	push	{r0, r1, r4, lr}
 800bf6a:	681c      	ldr	r4, [r3, #0]
 800bf6c:	b124      	cbz	r4, 800bf78 <iprintf+0x14>
 800bf6e:	69a3      	ldr	r3, [r4, #24]
 800bf70:	b913      	cbnz	r3, 800bf78 <iprintf+0x14>
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fb78 	bl	800c668 <__sinit>
 800bf78:	ab05      	add	r3, sp, #20
 800bf7a:	9a04      	ldr	r2, [sp, #16]
 800bf7c:	68a1      	ldr	r1, [r4, #8]
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fea1 	bl	800ccc8 <_vfiprintf_r>
 800bf86:	b002      	add	sp, #8
 800bf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf8c:	b004      	add	sp, #16
 800bf8e:	4770      	bx	lr
 800bf90:	20000364 	.word	0x20000364

0800bf94 <_puts_r>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	460e      	mov	r6, r1
 800bf98:	4605      	mov	r5, r0
 800bf9a:	b118      	cbz	r0, 800bfa4 <_puts_r+0x10>
 800bf9c:	6983      	ldr	r3, [r0, #24]
 800bf9e:	b90b      	cbnz	r3, 800bfa4 <_puts_r+0x10>
 800bfa0:	f000 fb62 	bl	800c668 <__sinit>
 800bfa4:	69ab      	ldr	r3, [r5, #24]
 800bfa6:	68ac      	ldr	r4, [r5, #8]
 800bfa8:	b913      	cbnz	r3, 800bfb0 <_puts_r+0x1c>
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 fb5c 	bl	800c668 <__sinit>
 800bfb0:	4b23      	ldr	r3, [pc, #140]	; (800c040 <_puts_r+0xac>)
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d117      	bne.n	800bfe6 <_puts_r+0x52>
 800bfb6:	686c      	ldr	r4, [r5, #4]
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	071b      	lsls	r3, r3, #28
 800bfbc:	d51d      	bpl.n	800bffa <_puts_r+0x66>
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	b1db      	cbz	r3, 800bffa <_puts_r+0x66>
 800bfc2:	3e01      	subs	r6, #1
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	60a3      	str	r3, [r4, #8]
 800bfce:	b9e9      	cbnz	r1, 800c00c <_puts_r+0x78>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da2e      	bge.n	800c032 <_puts_r+0x9e>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	210a      	movs	r1, #10
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 f995 	bl	800c308 <__swbuf_r>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d011      	beq.n	800c006 <_puts_r+0x72>
 800bfe2:	200a      	movs	r0, #10
 800bfe4:	e011      	b.n	800c00a <_puts_r+0x76>
 800bfe6:	4b17      	ldr	r3, [pc, #92]	; (800c044 <_puts_r+0xb0>)
 800bfe8:	429c      	cmp	r4, r3
 800bfea:	d101      	bne.n	800bff0 <_puts_r+0x5c>
 800bfec:	68ac      	ldr	r4, [r5, #8]
 800bfee:	e7e3      	b.n	800bfb8 <_puts_r+0x24>
 800bff0:	4b15      	ldr	r3, [pc, #84]	; (800c048 <_puts_r+0xb4>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	bf08      	it	eq
 800bff6:	68ec      	ldreq	r4, [r5, #12]
 800bff8:	e7de      	b.n	800bfb8 <_puts_r+0x24>
 800bffa:	4621      	mov	r1, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	f000 f9d5 	bl	800c3ac <__swsetup_r>
 800c002:	2800      	cmp	r0, #0
 800c004:	d0dd      	beq.n	800bfc2 <_puts_r+0x2e>
 800c006:	f04f 30ff 	mov.w	r0, #4294967295
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da04      	bge.n	800c01a <_puts_r+0x86>
 800c010:	69a2      	ldr	r2, [r4, #24]
 800c012:	429a      	cmp	r2, r3
 800c014:	dc06      	bgt.n	800c024 <_puts_r+0x90>
 800c016:	290a      	cmp	r1, #10
 800c018:	d004      	beq.n	800c024 <_puts_r+0x90>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	7019      	strb	r1, [r3, #0]
 800c022:	e7cf      	b.n	800bfc4 <_puts_r+0x30>
 800c024:	4622      	mov	r2, r4
 800c026:	4628      	mov	r0, r5
 800c028:	f000 f96e 	bl	800c308 <__swbuf_r>
 800c02c:	3001      	adds	r0, #1
 800c02e:	d1c9      	bne.n	800bfc4 <_puts_r+0x30>
 800c030:	e7e9      	b.n	800c006 <_puts_r+0x72>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	200a      	movs	r0, #10
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	6022      	str	r2, [r4, #0]
 800c03a:	7018      	strb	r0, [r3, #0]
 800c03c:	e7e5      	b.n	800c00a <_puts_r+0x76>
 800c03e:	bf00      	nop
 800c040:	0800e1b0 	.word	0x0800e1b0
 800c044:	0800e1d0 	.word	0x0800e1d0
 800c048:	0800e190 	.word	0x0800e190

0800c04c <puts>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <puts+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f7ff bf9f 	b.w	800bf94 <_puts_r>
 800c056:	bf00      	nop
 800c058:	20000364 	.word	0x20000364

0800c05c <siprintf>:
 800c05c:	b40e      	push	{r1, r2, r3}
 800c05e:	b500      	push	{lr}
 800c060:	b09c      	sub	sp, #112	; 0x70
 800c062:	ab1d      	add	r3, sp, #116	; 0x74
 800c064:	9002      	str	r0, [sp, #8]
 800c066:	9006      	str	r0, [sp, #24]
 800c068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c06c:	4809      	ldr	r0, [pc, #36]	; (800c094 <siprintf+0x38>)
 800c06e:	9107      	str	r1, [sp, #28]
 800c070:	9104      	str	r1, [sp, #16]
 800c072:	4909      	ldr	r1, [pc, #36]	; (800c098 <siprintf+0x3c>)
 800c074:	f853 2b04 	ldr.w	r2, [r3], #4
 800c078:	9105      	str	r1, [sp, #20]
 800c07a:	6800      	ldr	r0, [r0, #0]
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	a902      	add	r1, sp, #8
 800c080:	f000 fd00 	bl	800ca84 <_svfiprintf_r>
 800c084:	9b02      	ldr	r3, [sp, #8]
 800c086:	2200      	movs	r2, #0
 800c088:	701a      	strb	r2, [r3, #0]
 800c08a:	b01c      	add	sp, #112	; 0x70
 800c08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c090:	b003      	add	sp, #12
 800c092:	4770      	bx	lr
 800c094:	20000364 	.word	0x20000364
 800c098:	ffff0208 	.word	0xffff0208

0800c09c <strcat>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4603      	mov	r3, r0
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	1c5c      	adds	r4, r3, #1
 800c0a4:	b93a      	cbnz	r2, 800c0b6 <strcat+0x1a>
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0b0:	2a00      	cmp	r2, #0
 800c0b2:	d1f9      	bne.n	800c0a8 <strcat+0xc>
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	4623      	mov	r3, r4
 800c0b8:	e7f2      	b.n	800c0a0 <strcat+0x4>

0800c0ba <strncmp>:
 800c0ba:	b510      	push	{r4, lr}
 800c0bc:	b16a      	cbz	r2, 800c0da <strncmp+0x20>
 800c0be:	3901      	subs	r1, #1
 800c0c0:	1884      	adds	r4, r0, r2
 800c0c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d103      	bne.n	800c0d6 <strncmp+0x1c>
 800c0ce:	42a0      	cmp	r0, r4
 800c0d0:	d001      	beq.n	800c0d6 <strncmp+0x1c>
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1f5      	bne.n	800c0c2 <strncmp+0x8>
 800c0d6:	1a98      	subs	r0, r3, r2
 800c0d8:	bd10      	pop	{r4, pc}
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7fc      	b.n	800c0d8 <strncmp+0x1e>

0800c0de <strncpy>:
 800c0de:	b570      	push	{r4, r5, r6, lr}
 800c0e0:	3901      	subs	r1, #1
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	b902      	cbnz	r2, 800c0e8 <strncpy+0xa>
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c0ee:	f803 5b01 	strb.w	r5, [r3], #1
 800c0f2:	1e56      	subs	r6, r2, #1
 800c0f4:	b92d      	cbnz	r5, 800c102 <strncpy+0x24>
 800c0f6:	4414      	add	r4, r2
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	d0f4      	beq.n	800c0e6 <strncpy+0x8>
 800c0fc:	f803 5b01 	strb.w	r5, [r3], #1
 800c100:	e7fa      	b.n	800c0f8 <strncpy+0x1a>
 800c102:	461c      	mov	r4, r3
 800c104:	4632      	mov	r2, r6
 800c106:	e7ed      	b.n	800c0e4 <strncpy+0x6>

0800c108 <strstr>:
 800c108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10a:	7803      	ldrb	r3, [r0, #0]
 800c10c:	b17b      	cbz	r3, 800c12e <strstr+0x26>
 800c10e:	4604      	mov	r4, r0
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	4620      	mov	r0, r4
 800c114:	1c66      	adds	r6, r4, #1
 800c116:	b17b      	cbz	r3, 800c138 <strstr+0x30>
 800c118:	1e4a      	subs	r2, r1, #1
 800c11a:	1e63      	subs	r3, r4, #1
 800c11c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c120:	b14d      	cbz	r5, 800c136 <strstr+0x2e>
 800c122:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c126:	42af      	cmp	r7, r5
 800c128:	4634      	mov	r4, r6
 800c12a:	d0f7      	beq.n	800c11c <strstr+0x14>
 800c12c:	e7f0      	b.n	800c110 <strstr+0x8>
 800c12e:	780b      	ldrb	r3, [r1, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bf18      	it	ne
 800c134:	2000      	movne	r0, #0
 800c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c138:	4618      	mov	r0, r3
 800c13a:	e7fc      	b.n	800c136 <strstr+0x2e>

0800c13c <strtok>:
 800c13c:	4b13      	ldr	r3, [pc, #76]	; (800c18c <strtok+0x50>)
 800c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	681d      	ldr	r5, [r3, #0]
 800c144:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800c146:	4606      	mov	r6, r0
 800c148:	460f      	mov	r7, r1
 800c14a:	b9b4      	cbnz	r4, 800c17a <strtok+0x3e>
 800c14c:	2050      	movs	r0, #80	; 0x50
 800c14e:	f000 fb7d 	bl	800c84c <malloc>
 800c152:	65a8      	str	r0, [r5, #88]	; 0x58
 800c154:	e9c0 4400 	strd	r4, r4, [r0]
 800c158:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c15c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c160:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c164:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c168:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c16c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c170:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c174:	6184      	str	r4, [r0, #24]
 800c176:	7704      	strb	r4, [r0, #28]
 800c178:	6244      	str	r4, [r0, #36]	; 0x24
 800c17a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800c17c:	4639      	mov	r1, r7
 800c17e:	4630      	mov	r0, r6
 800c180:	2301      	movs	r3, #1
 800c182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	f000 b803 	b.w	800c190 <__strtok_r>
 800c18a:	bf00      	nop
 800c18c:	20000364 	.word	0x20000364

0800c190 <__strtok_r>:
 800c190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c192:	b918      	cbnz	r0, 800c19c <__strtok_r+0xc>
 800c194:	6810      	ldr	r0, [r2, #0]
 800c196:	b908      	cbnz	r0, 800c19c <__strtok_r+0xc>
 800c198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19a:	4620      	mov	r0, r4
 800c19c:	4604      	mov	r4, r0
 800c19e:	460f      	mov	r7, r1
 800c1a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c1a4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c1a8:	b91e      	cbnz	r6, 800c1b2 <__strtok_r+0x22>
 800c1aa:	b96d      	cbnz	r5, 800c1c8 <__strtok_r+0x38>
 800c1ac:	6015      	str	r5, [r2, #0]
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	e7f2      	b.n	800c198 <__strtok_r+0x8>
 800c1b2:	42b5      	cmp	r5, r6
 800c1b4:	d1f6      	bne.n	800c1a4 <__strtok_r+0x14>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1ef      	bne.n	800c19a <__strtok_r+0xa>
 800c1ba:	6014      	str	r4, [r2, #0]
 800c1bc:	7003      	strb	r3, [r0, #0]
 800c1be:	e7eb      	b.n	800c198 <__strtok_r+0x8>
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	e00d      	b.n	800c1e0 <__strtok_r+0x50>
 800c1c4:	b926      	cbnz	r6, 800c1d0 <__strtok_r+0x40>
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	4623      	mov	r3, r4
 800c1ca:	460f      	mov	r7, r1
 800c1cc:	f813 5b01 	ldrb.w	r5, [r3], #1
 800c1d0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c1d4:	42b5      	cmp	r5, r6
 800c1d6:	d1f5      	bne.n	800c1c4 <__strtok_r+0x34>
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	d0f1      	beq.n	800c1c0 <__strtok_r+0x30>
 800c1dc:	2100      	movs	r1, #0
 800c1de:	7021      	strb	r1, [r4, #0]
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	e7d9      	b.n	800c198 <__strtok_r+0x8>

0800c1e4 <_strtol_l.isra.0>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	4689      	mov	r9, r1
 800c1ec:	4692      	mov	sl, r2
 800c1ee:	461e      	mov	r6, r3
 800c1f0:	460f      	mov	r7, r1
 800c1f2:	463d      	mov	r5, r7
 800c1f4:	9808      	ldr	r0, [sp, #32]
 800c1f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1fa:	f000 fabf 	bl	800c77c <__locale_ctype_ptr_l>
 800c1fe:	4420      	add	r0, r4
 800c200:	7843      	ldrb	r3, [r0, #1]
 800c202:	f013 0308 	ands.w	r3, r3, #8
 800c206:	d132      	bne.n	800c26e <_strtol_l.isra.0+0x8a>
 800c208:	2c2d      	cmp	r4, #45	; 0x2d
 800c20a:	d132      	bne.n	800c272 <_strtol_l.isra.0+0x8e>
 800c20c:	787c      	ldrb	r4, [r7, #1]
 800c20e:	1cbd      	adds	r5, r7, #2
 800c210:	2201      	movs	r2, #1
 800c212:	2e00      	cmp	r6, #0
 800c214:	d05d      	beq.n	800c2d2 <_strtol_l.isra.0+0xee>
 800c216:	2e10      	cmp	r6, #16
 800c218:	d109      	bne.n	800c22e <_strtol_l.isra.0+0x4a>
 800c21a:	2c30      	cmp	r4, #48	; 0x30
 800c21c:	d107      	bne.n	800c22e <_strtol_l.isra.0+0x4a>
 800c21e:	782b      	ldrb	r3, [r5, #0]
 800c220:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c224:	2b58      	cmp	r3, #88	; 0x58
 800c226:	d14f      	bne.n	800c2c8 <_strtol_l.isra.0+0xe4>
 800c228:	786c      	ldrb	r4, [r5, #1]
 800c22a:	2610      	movs	r6, #16
 800c22c:	3502      	adds	r5, #2
 800c22e:	2a00      	cmp	r2, #0
 800c230:	bf14      	ite	ne
 800c232:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c236:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c23a:	2700      	movs	r7, #0
 800c23c:	fbb1 fcf6 	udiv	ip, r1, r6
 800c240:	4638      	mov	r0, r7
 800c242:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c246:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c24a:	2b09      	cmp	r3, #9
 800c24c:	d817      	bhi.n	800c27e <_strtol_l.isra.0+0x9a>
 800c24e:	461c      	mov	r4, r3
 800c250:	42a6      	cmp	r6, r4
 800c252:	dd23      	ble.n	800c29c <_strtol_l.isra.0+0xb8>
 800c254:	1c7b      	adds	r3, r7, #1
 800c256:	d007      	beq.n	800c268 <_strtol_l.isra.0+0x84>
 800c258:	4584      	cmp	ip, r0
 800c25a:	d31c      	bcc.n	800c296 <_strtol_l.isra.0+0xb2>
 800c25c:	d101      	bne.n	800c262 <_strtol_l.isra.0+0x7e>
 800c25e:	45a6      	cmp	lr, r4
 800c260:	db19      	blt.n	800c296 <_strtol_l.isra.0+0xb2>
 800c262:	fb00 4006 	mla	r0, r0, r6, r4
 800c266:	2701      	movs	r7, #1
 800c268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c26c:	e7eb      	b.n	800c246 <_strtol_l.isra.0+0x62>
 800c26e:	462f      	mov	r7, r5
 800c270:	e7bf      	b.n	800c1f2 <_strtol_l.isra.0+0xe>
 800c272:	2c2b      	cmp	r4, #43	; 0x2b
 800c274:	bf04      	itt	eq
 800c276:	1cbd      	addeq	r5, r7, #2
 800c278:	787c      	ldrbeq	r4, [r7, #1]
 800c27a:	461a      	mov	r2, r3
 800c27c:	e7c9      	b.n	800c212 <_strtol_l.isra.0+0x2e>
 800c27e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c282:	2b19      	cmp	r3, #25
 800c284:	d801      	bhi.n	800c28a <_strtol_l.isra.0+0xa6>
 800c286:	3c37      	subs	r4, #55	; 0x37
 800c288:	e7e2      	b.n	800c250 <_strtol_l.isra.0+0x6c>
 800c28a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c28e:	2b19      	cmp	r3, #25
 800c290:	d804      	bhi.n	800c29c <_strtol_l.isra.0+0xb8>
 800c292:	3c57      	subs	r4, #87	; 0x57
 800c294:	e7dc      	b.n	800c250 <_strtol_l.isra.0+0x6c>
 800c296:	f04f 37ff 	mov.w	r7, #4294967295
 800c29a:	e7e5      	b.n	800c268 <_strtol_l.isra.0+0x84>
 800c29c:	1c7b      	adds	r3, r7, #1
 800c29e:	d108      	bne.n	800c2b2 <_strtol_l.isra.0+0xce>
 800c2a0:	2322      	movs	r3, #34	; 0x22
 800c2a2:	f8c8 3000 	str.w	r3, [r8]
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	f1ba 0f00 	cmp.w	sl, #0
 800c2ac:	d107      	bne.n	800c2be <_strtol_l.isra.0+0xda>
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b2:	b102      	cbz	r2, 800c2b6 <_strtol_l.isra.0+0xd2>
 800c2b4:	4240      	negs	r0, r0
 800c2b6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ba:	d0f8      	beq.n	800c2ae <_strtol_l.isra.0+0xca>
 800c2bc:	b10f      	cbz	r7, 800c2c2 <_strtol_l.isra.0+0xde>
 800c2be:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2c2:	f8ca 9000 	str.w	r9, [sl]
 800c2c6:	e7f2      	b.n	800c2ae <_strtol_l.isra.0+0xca>
 800c2c8:	2430      	movs	r4, #48	; 0x30
 800c2ca:	2e00      	cmp	r6, #0
 800c2cc:	d1af      	bne.n	800c22e <_strtol_l.isra.0+0x4a>
 800c2ce:	2608      	movs	r6, #8
 800c2d0:	e7ad      	b.n	800c22e <_strtol_l.isra.0+0x4a>
 800c2d2:	2c30      	cmp	r4, #48	; 0x30
 800c2d4:	d0a3      	beq.n	800c21e <_strtol_l.isra.0+0x3a>
 800c2d6:	260a      	movs	r6, #10
 800c2d8:	e7a9      	b.n	800c22e <_strtol_l.isra.0+0x4a>
	...

0800c2dc <strtol>:
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <strtol+0x24>)
 800c2de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2e0:	681c      	ldr	r4, [r3, #0]
 800c2e2:	4d08      	ldr	r5, [pc, #32]	; (800c304 <strtol+0x28>)
 800c2e4:	6a23      	ldr	r3, [r4, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bf08      	it	eq
 800c2ea:	462b      	moveq	r3, r5
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	460a      	mov	r2, r1
 800c2f2:	4601      	mov	r1, r0
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f7ff ff75 	bl	800c1e4 <_strtol_l.isra.0>
 800c2fa:	b003      	add	sp, #12
 800c2fc:	bd30      	pop	{r4, r5, pc}
 800c2fe:	bf00      	nop
 800c300:	20000364 	.word	0x20000364
 800c304:	200003c8 	.word	0x200003c8

0800c308 <__swbuf_r>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	460e      	mov	r6, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	4605      	mov	r5, r0
 800c310:	b118      	cbz	r0, 800c31a <__swbuf_r+0x12>
 800c312:	6983      	ldr	r3, [r0, #24]
 800c314:	b90b      	cbnz	r3, 800c31a <__swbuf_r+0x12>
 800c316:	f000 f9a7 	bl	800c668 <__sinit>
 800c31a:	4b21      	ldr	r3, [pc, #132]	; (800c3a0 <__swbuf_r+0x98>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	d12a      	bne.n	800c376 <__swbuf_r+0x6e>
 800c320:	686c      	ldr	r4, [r5, #4]
 800c322:	69a3      	ldr	r3, [r4, #24]
 800c324:	60a3      	str	r3, [r4, #8]
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	071a      	lsls	r2, r3, #28
 800c32a:	d52e      	bpl.n	800c38a <__swbuf_r+0x82>
 800c32c:	6923      	ldr	r3, [r4, #16]
 800c32e:	b363      	cbz	r3, 800c38a <__swbuf_r+0x82>
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	1ac0      	subs	r0, r0, r3
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	b2f6      	uxtb	r6, r6
 800c33a:	4283      	cmp	r3, r0
 800c33c:	4637      	mov	r7, r6
 800c33e:	dc04      	bgt.n	800c34a <__swbuf_r+0x42>
 800c340:	4621      	mov	r1, r4
 800c342:	4628      	mov	r0, r5
 800c344:	f000 f926 	bl	800c594 <_fflush_r>
 800c348:	bb28      	cbnz	r0, 800c396 <__swbuf_r+0x8e>
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	6022      	str	r2, [r4, #0]
 800c356:	701e      	strb	r6, [r3, #0]
 800c358:	6963      	ldr	r3, [r4, #20]
 800c35a:	3001      	adds	r0, #1
 800c35c:	4283      	cmp	r3, r0
 800c35e:	d004      	beq.n	800c36a <__swbuf_r+0x62>
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	07db      	lsls	r3, r3, #31
 800c364:	d519      	bpl.n	800c39a <__swbuf_r+0x92>
 800c366:	2e0a      	cmp	r6, #10
 800c368:	d117      	bne.n	800c39a <__swbuf_r+0x92>
 800c36a:	4621      	mov	r1, r4
 800c36c:	4628      	mov	r0, r5
 800c36e:	f000 f911 	bl	800c594 <_fflush_r>
 800c372:	b190      	cbz	r0, 800c39a <__swbuf_r+0x92>
 800c374:	e00f      	b.n	800c396 <__swbuf_r+0x8e>
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <__swbuf_r+0x9c>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	d101      	bne.n	800c380 <__swbuf_r+0x78>
 800c37c:	68ac      	ldr	r4, [r5, #8]
 800c37e:	e7d0      	b.n	800c322 <__swbuf_r+0x1a>
 800c380:	4b09      	ldr	r3, [pc, #36]	; (800c3a8 <__swbuf_r+0xa0>)
 800c382:	429c      	cmp	r4, r3
 800c384:	bf08      	it	eq
 800c386:	68ec      	ldreq	r4, [r5, #12]
 800c388:	e7cb      	b.n	800c322 <__swbuf_r+0x1a>
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 f80d 	bl	800c3ac <__swsetup_r>
 800c392:	2800      	cmp	r0, #0
 800c394:	d0cc      	beq.n	800c330 <__swbuf_r+0x28>
 800c396:	f04f 37ff 	mov.w	r7, #4294967295
 800c39a:	4638      	mov	r0, r7
 800c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	0800e1b0 	.word	0x0800e1b0
 800c3a4:	0800e1d0 	.word	0x0800e1d0
 800c3a8:	0800e190 	.word	0x0800e190

0800c3ac <__swsetup_r>:
 800c3ac:	4b32      	ldr	r3, [pc, #200]	; (800c478 <__swsetup_r+0xcc>)
 800c3ae:	b570      	push	{r4, r5, r6, lr}
 800c3b0:	681d      	ldr	r5, [r3, #0]
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	b125      	cbz	r5, 800c3c2 <__swsetup_r+0x16>
 800c3b8:	69ab      	ldr	r3, [r5, #24]
 800c3ba:	b913      	cbnz	r3, 800c3c2 <__swsetup_r+0x16>
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f000 f953 	bl	800c668 <__sinit>
 800c3c2:	4b2e      	ldr	r3, [pc, #184]	; (800c47c <__swsetup_r+0xd0>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d10f      	bne.n	800c3e8 <__swsetup_r+0x3c>
 800c3c8:	686c      	ldr	r4, [r5, #4]
 800c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	0715      	lsls	r5, r2, #28
 800c3d2:	d42c      	bmi.n	800c42e <__swsetup_r+0x82>
 800c3d4:	06d0      	lsls	r0, r2, #27
 800c3d6:	d411      	bmi.n	800c3fc <__swsetup_r+0x50>
 800c3d8:	2209      	movs	r2, #9
 800c3da:	6032      	str	r2, [r6, #0]
 800c3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e6:	e03e      	b.n	800c466 <__swsetup_r+0xba>
 800c3e8:	4b25      	ldr	r3, [pc, #148]	; (800c480 <__swsetup_r+0xd4>)
 800c3ea:	429c      	cmp	r4, r3
 800c3ec:	d101      	bne.n	800c3f2 <__swsetup_r+0x46>
 800c3ee:	68ac      	ldr	r4, [r5, #8]
 800c3f0:	e7eb      	b.n	800c3ca <__swsetup_r+0x1e>
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <__swsetup_r+0xd8>)
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	bf08      	it	eq
 800c3f8:	68ec      	ldreq	r4, [r5, #12]
 800c3fa:	e7e6      	b.n	800c3ca <__swsetup_r+0x1e>
 800c3fc:	0751      	lsls	r1, r2, #29
 800c3fe:	d512      	bpl.n	800c426 <__swsetup_r+0x7a>
 800c400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c402:	b141      	cbz	r1, 800c416 <__swsetup_r+0x6a>
 800c404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c408:	4299      	cmp	r1, r3
 800c40a:	d002      	beq.n	800c412 <__swsetup_r+0x66>
 800c40c:	4630      	mov	r0, r6
 800c40e:	f000 fa37 	bl	800c880 <_free_r>
 800c412:	2300      	movs	r3, #0
 800c414:	6363      	str	r3, [r4, #52]	; 0x34
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c41c:	81a3      	strh	r3, [r4, #12]
 800c41e:	2300      	movs	r3, #0
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f043 0308 	orr.w	r3, r3, #8
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	b94b      	cbnz	r3, 800c446 <__swsetup_r+0x9a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c43c:	d003      	beq.n	800c446 <__swsetup_r+0x9a>
 800c43e:	4621      	mov	r1, r4
 800c440:	4630      	mov	r0, r6
 800c442:	f000 f9c3 	bl	800c7cc <__smakebuf_r>
 800c446:	89a2      	ldrh	r2, [r4, #12]
 800c448:	f012 0301 	ands.w	r3, r2, #1
 800c44c:	d00c      	beq.n	800c468 <__swsetup_r+0xbc>
 800c44e:	2300      	movs	r3, #0
 800c450:	60a3      	str	r3, [r4, #8]
 800c452:	6963      	ldr	r3, [r4, #20]
 800c454:	425b      	negs	r3, r3
 800c456:	61a3      	str	r3, [r4, #24]
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	b953      	cbnz	r3, 800c472 <__swsetup_r+0xc6>
 800c45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c460:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c464:	d1ba      	bne.n	800c3dc <__swsetup_r+0x30>
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	0792      	lsls	r2, r2, #30
 800c46a:	bf58      	it	pl
 800c46c:	6963      	ldrpl	r3, [r4, #20]
 800c46e:	60a3      	str	r3, [r4, #8]
 800c470:	e7f2      	b.n	800c458 <__swsetup_r+0xac>
 800c472:	2000      	movs	r0, #0
 800c474:	e7f7      	b.n	800c466 <__swsetup_r+0xba>
 800c476:	bf00      	nop
 800c478:	20000364 	.word	0x20000364
 800c47c:	0800e1b0 	.word	0x0800e1b0
 800c480:	0800e1d0 	.word	0x0800e1d0
 800c484:	0800e190 	.word	0x0800e190

0800c488 <__sflush_r>:
 800c488:	898a      	ldrh	r2, [r1, #12]
 800c48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48e:	4605      	mov	r5, r0
 800c490:	0710      	lsls	r0, r2, #28
 800c492:	460c      	mov	r4, r1
 800c494:	d458      	bmi.n	800c548 <__sflush_r+0xc0>
 800c496:	684b      	ldr	r3, [r1, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dc05      	bgt.n	800c4a8 <__sflush_r+0x20>
 800c49c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	dc02      	bgt.n	800c4a8 <__sflush_r+0x20>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	d0f9      	beq.n	800c4a2 <__sflush_r+0x1a>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4b4:	682f      	ldr	r7, [r5, #0]
 800c4b6:	6a21      	ldr	r1, [r4, #32]
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	d032      	beq.n	800c522 <__sflush_r+0x9a>
 800c4bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	075a      	lsls	r2, r3, #29
 800c4c2:	d505      	bpl.n	800c4d0 <__sflush_r+0x48>
 800c4c4:	6863      	ldr	r3, [r4, #4]
 800c4c6:	1ac0      	subs	r0, r0, r3
 800c4c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4ca:	b10b      	cbz	r3, 800c4d0 <__sflush_r+0x48>
 800c4cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4ce:	1ac0      	subs	r0, r0, r3
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4d6:	6a21      	ldr	r1, [r4, #32]
 800c4d8:	4628      	mov	r0, r5
 800c4da:	47b0      	blx	r6
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	d106      	bne.n	800c4f0 <__sflush_r+0x68>
 800c4e2:	6829      	ldr	r1, [r5, #0]
 800c4e4:	291d      	cmp	r1, #29
 800c4e6:	d848      	bhi.n	800c57a <__sflush_r+0xf2>
 800c4e8:	4a29      	ldr	r2, [pc, #164]	; (800c590 <__sflush_r+0x108>)
 800c4ea:	40ca      	lsrs	r2, r1
 800c4ec:	07d6      	lsls	r6, r2, #31
 800c4ee:	d544      	bpl.n	800c57a <__sflush_r+0xf2>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	6062      	str	r2, [r4, #4]
 800c4f4:	04d9      	lsls	r1, r3, #19
 800c4f6:	6922      	ldr	r2, [r4, #16]
 800c4f8:	6022      	str	r2, [r4, #0]
 800c4fa:	d504      	bpl.n	800c506 <__sflush_r+0x7e>
 800c4fc:	1c42      	adds	r2, r0, #1
 800c4fe:	d101      	bne.n	800c504 <__sflush_r+0x7c>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b903      	cbnz	r3, 800c506 <__sflush_r+0x7e>
 800c504:	6560      	str	r0, [r4, #84]	; 0x54
 800c506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c508:	602f      	str	r7, [r5, #0]
 800c50a:	2900      	cmp	r1, #0
 800c50c:	d0c9      	beq.n	800c4a2 <__sflush_r+0x1a>
 800c50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c512:	4299      	cmp	r1, r3
 800c514:	d002      	beq.n	800c51c <__sflush_r+0x94>
 800c516:	4628      	mov	r0, r5
 800c518:	f000 f9b2 	bl	800c880 <_free_r>
 800c51c:	2000      	movs	r0, #0
 800c51e:	6360      	str	r0, [r4, #52]	; 0x34
 800c520:	e7c0      	b.n	800c4a4 <__sflush_r+0x1c>
 800c522:	2301      	movs	r3, #1
 800c524:	4628      	mov	r0, r5
 800c526:	47b0      	blx	r6
 800c528:	1c41      	adds	r1, r0, #1
 800c52a:	d1c8      	bne.n	800c4be <__sflush_r+0x36>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0c5      	beq.n	800c4be <__sflush_r+0x36>
 800c532:	2b1d      	cmp	r3, #29
 800c534:	d001      	beq.n	800c53a <__sflush_r+0xb2>
 800c536:	2b16      	cmp	r3, #22
 800c538:	d101      	bne.n	800c53e <__sflush_r+0xb6>
 800c53a:	602f      	str	r7, [r5, #0]
 800c53c:	e7b1      	b.n	800c4a2 <__sflush_r+0x1a>
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	e7ad      	b.n	800c4a4 <__sflush_r+0x1c>
 800c548:	690f      	ldr	r7, [r1, #16]
 800c54a:	2f00      	cmp	r7, #0
 800c54c:	d0a9      	beq.n	800c4a2 <__sflush_r+0x1a>
 800c54e:	0793      	lsls	r3, r2, #30
 800c550:	680e      	ldr	r6, [r1, #0]
 800c552:	bf08      	it	eq
 800c554:	694b      	ldreq	r3, [r1, #20]
 800c556:	600f      	str	r7, [r1, #0]
 800c558:	bf18      	it	ne
 800c55a:	2300      	movne	r3, #0
 800c55c:	eba6 0807 	sub.w	r8, r6, r7
 800c560:	608b      	str	r3, [r1, #8]
 800c562:	f1b8 0f00 	cmp.w	r8, #0
 800c566:	dd9c      	ble.n	800c4a2 <__sflush_r+0x1a>
 800c568:	4643      	mov	r3, r8
 800c56a:	463a      	mov	r2, r7
 800c56c:	6a21      	ldr	r1, [r4, #32]
 800c56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c570:	4628      	mov	r0, r5
 800c572:	47b0      	blx	r6
 800c574:	2800      	cmp	r0, #0
 800c576:	dc06      	bgt.n	800c586 <__sflush_r+0xfe>
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	e78e      	b.n	800c4a4 <__sflush_r+0x1c>
 800c586:	4407      	add	r7, r0
 800c588:	eba8 0800 	sub.w	r8, r8, r0
 800c58c:	e7e9      	b.n	800c562 <__sflush_r+0xda>
 800c58e:	bf00      	nop
 800c590:	20400001 	.word	0x20400001

0800c594 <_fflush_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	690b      	ldr	r3, [r1, #16]
 800c598:	4605      	mov	r5, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	b1db      	cbz	r3, 800c5d6 <_fflush_r+0x42>
 800c59e:	b118      	cbz	r0, 800c5a8 <_fflush_r+0x14>
 800c5a0:	6983      	ldr	r3, [r0, #24]
 800c5a2:	b90b      	cbnz	r3, 800c5a8 <_fflush_r+0x14>
 800c5a4:	f000 f860 	bl	800c668 <__sinit>
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <_fflush_r+0x48>)
 800c5aa:	429c      	cmp	r4, r3
 800c5ac:	d109      	bne.n	800c5c2 <_fflush_r+0x2e>
 800c5ae:	686c      	ldr	r4, [r5, #4]
 800c5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b4:	b17b      	cbz	r3, 800c5d6 <_fflush_r+0x42>
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5be:	f7ff bf63 	b.w	800c488 <__sflush_r>
 800c5c2:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <_fflush_r+0x4c>)
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	d101      	bne.n	800c5cc <_fflush_r+0x38>
 800c5c8:	68ac      	ldr	r4, [r5, #8]
 800c5ca:	e7f1      	b.n	800c5b0 <_fflush_r+0x1c>
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <_fflush_r+0x50>)
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	bf08      	it	eq
 800c5d2:	68ec      	ldreq	r4, [r5, #12]
 800c5d4:	e7ec      	b.n	800c5b0 <_fflush_r+0x1c>
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	0800e1b0 	.word	0x0800e1b0
 800c5e0:	0800e1d0 	.word	0x0800e1d0
 800c5e4:	0800e190 	.word	0x0800e190

0800c5e8 <std>:
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c5f2:	6083      	str	r3, [r0, #8]
 800c5f4:	8181      	strh	r1, [r0, #12]
 800c5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c5f8:	81c2      	strh	r2, [r0, #14]
 800c5fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5fe:	6183      	str	r3, [r0, #24]
 800c600:	4619      	mov	r1, r3
 800c602:	2208      	movs	r2, #8
 800c604:	305c      	adds	r0, #92	; 0x5c
 800c606:	f7ff fca5 	bl	800bf54 <memset>
 800c60a:	4b05      	ldr	r3, [pc, #20]	; (800c620 <std+0x38>)
 800c60c:	6263      	str	r3, [r4, #36]	; 0x24
 800c60e:	4b05      	ldr	r3, [pc, #20]	; (800c624 <std+0x3c>)
 800c610:	62a3      	str	r3, [r4, #40]	; 0x28
 800c612:	4b05      	ldr	r3, [pc, #20]	; (800c628 <std+0x40>)
 800c614:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c616:	4b05      	ldr	r3, [pc, #20]	; (800c62c <std+0x44>)
 800c618:	6224      	str	r4, [r4, #32]
 800c61a:	6323      	str	r3, [r4, #48]	; 0x30
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	bf00      	nop
 800c620:	0800d225 	.word	0x0800d225
 800c624:	0800d247 	.word	0x0800d247
 800c628:	0800d27f 	.word	0x0800d27f
 800c62c:	0800d2a3 	.word	0x0800d2a3

0800c630 <_cleanup_r>:
 800c630:	4901      	ldr	r1, [pc, #4]	; (800c638 <_cleanup_r+0x8>)
 800c632:	f000 b885 	b.w	800c740 <_fwalk_reent>
 800c636:	bf00      	nop
 800c638:	0800c595 	.word	0x0800c595

0800c63c <__sfmoreglue>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	1e4a      	subs	r2, r1, #1
 800c640:	2568      	movs	r5, #104	; 0x68
 800c642:	4355      	muls	r5, r2
 800c644:	460e      	mov	r6, r1
 800c646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c64a:	f000 f967 	bl	800c91c <_malloc_r>
 800c64e:	4604      	mov	r4, r0
 800c650:	b140      	cbz	r0, 800c664 <__sfmoreglue+0x28>
 800c652:	2100      	movs	r1, #0
 800c654:	e9c0 1600 	strd	r1, r6, [r0]
 800c658:	300c      	adds	r0, #12
 800c65a:	60a0      	str	r0, [r4, #8]
 800c65c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c660:	f7ff fc78 	bl	800bf54 <memset>
 800c664:	4620      	mov	r0, r4
 800c666:	bd70      	pop	{r4, r5, r6, pc}

0800c668 <__sinit>:
 800c668:	6983      	ldr	r3, [r0, #24]
 800c66a:	b510      	push	{r4, lr}
 800c66c:	4604      	mov	r4, r0
 800c66e:	bb33      	cbnz	r3, 800c6be <__sinit+0x56>
 800c670:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c674:	6503      	str	r3, [r0, #80]	; 0x50
 800c676:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <__sinit+0x58>)
 800c678:	4a12      	ldr	r2, [pc, #72]	; (800c6c4 <__sinit+0x5c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6282      	str	r2, [r0, #40]	; 0x28
 800c67e:	4298      	cmp	r0, r3
 800c680:	bf04      	itt	eq
 800c682:	2301      	moveq	r3, #1
 800c684:	6183      	streq	r3, [r0, #24]
 800c686:	f000 f81f 	bl	800c6c8 <__sfp>
 800c68a:	6060      	str	r0, [r4, #4]
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 f81b 	bl	800c6c8 <__sfp>
 800c692:	60a0      	str	r0, [r4, #8]
 800c694:	4620      	mov	r0, r4
 800c696:	f000 f817 	bl	800c6c8 <__sfp>
 800c69a:	2200      	movs	r2, #0
 800c69c:	60e0      	str	r0, [r4, #12]
 800c69e:	2104      	movs	r1, #4
 800c6a0:	6860      	ldr	r0, [r4, #4]
 800c6a2:	f7ff ffa1 	bl	800c5e8 <std>
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	2109      	movs	r1, #9
 800c6aa:	68a0      	ldr	r0, [r4, #8]
 800c6ac:	f7ff ff9c 	bl	800c5e8 <std>
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	2112      	movs	r1, #18
 800c6b4:	68e0      	ldr	r0, [r4, #12]
 800c6b6:	f7ff ff97 	bl	800c5e8 <std>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	61a3      	str	r3, [r4, #24]
 800c6be:	bd10      	pop	{r4, pc}
 800c6c0:	0800e18c 	.word	0x0800e18c
 800c6c4:	0800c631 	.word	0x0800c631

0800c6c8 <__sfp>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	4b1b      	ldr	r3, [pc, #108]	; (800c738 <__sfp+0x70>)
 800c6cc:	681e      	ldr	r6, [r3, #0]
 800c6ce:	69b3      	ldr	r3, [r6, #24]
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	b913      	cbnz	r3, 800c6da <__sfp+0x12>
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff ffc7 	bl	800c668 <__sinit>
 800c6da:	3648      	adds	r6, #72	; 0x48
 800c6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	d503      	bpl.n	800c6ec <__sfp+0x24>
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	b133      	cbz	r3, 800c6f6 <__sfp+0x2e>
 800c6e8:	6836      	ldr	r6, [r6, #0]
 800c6ea:	e7f7      	b.n	800c6dc <__sfp+0x14>
 800c6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6f0:	b16d      	cbz	r5, 800c70e <__sfp+0x46>
 800c6f2:	3468      	adds	r4, #104	; 0x68
 800c6f4:	e7f4      	b.n	800c6e0 <__sfp+0x18>
 800c6f6:	2104      	movs	r1, #4
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7ff ff9f 	bl	800c63c <__sfmoreglue>
 800c6fe:	6030      	str	r0, [r6, #0]
 800c700:	2800      	cmp	r0, #0
 800c702:	d1f1      	bne.n	800c6e8 <__sfp+0x20>
 800c704:	230c      	movs	r3, #12
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	4604      	mov	r4, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70e:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <__sfp+0x74>)
 800c710:	6665      	str	r5, [r4, #100]	; 0x64
 800c712:	e9c4 5500 	strd	r5, r5, [r4]
 800c716:	60a5      	str	r5, [r4, #8]
 800c718:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c71c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c720:	2208      	movs	r2, #8
 800c722:	4629      	mov	r1, r5
 800c724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c728:	f7ff fc14 	bl	800bf54 <memset>
 800c72c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c734:	e7e9      	b.n	800c70a <__sfp+0x42>
 800c736:	bf00      	nop
 800c738:	0800e18c 	.word	0x0800e18c
 800c73c:	ffff0001 	.word	0xffff0001

0800c740 <_fwalk_reent>:
 800c740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c744:	4680      	mov	r8, r0
 800c746:	4689      	mov	r9, r1
 800c748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c74c:	2600      	movs	r6, #0
 800c74e:	b914      	cbnz	r4, 800c756 <_fwalk_reent+0x16>
 800c750:	4630      	mov	r0, r6
 800c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c756:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c75a:	3f01      	subs	r7, #1
 800c75c:	d501      	bpl.n	800c762 <_fwalk_reent+0x22>
 800c75e:	6824      	ldr	r4, [r4, #0]
 800c760:	e7f5      	b.n	800c74e <_fwalk_reent+0xe>
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d907      	bls.n	800c778 <_fwalk_reent+0x38>
 800c768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c76c:	3301      	adds	r3, #1
 800c76e:	d003      	beq.n	800c778 <_fwalk_reent+0x38>
 800c770:	4629      	mov	r1, r5
 800c772:	4640      	mov	r0, r8
 800c774:	47c8      	blx	r9
 800c776:	4306      	orrs	r6, r0
 800c778:	3568      	adds	r5, #104	; 0x68
 800c77a:	e7ee      	b.n	800c75a <_fwalk_reent+0x1a>

0800c77c <__locale_ctype_ptr_l>:
 800c77c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c780:	4770      	bx	lr

0800c782 <__swhatbuf_r>:
 800c782:	b570      	push	{r4, r5, r6, lr}
 800c784:	460e      	mov	r6, r1
 800c786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78a:	2900      	cmp	r1, #0
 800c78c:	b096      	sub	sp, #88	; 0x58
 800c78e:	4614      	mov	r4, r2
 800c790:	461d      	mov	r5, r3
 800c792:	da07      	bge.n	800c7a4 <__swhatbuf_r+0x22>
 800c794:	2300      	movs	r3, #0
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	89b3      	ldrh	r3, [r6, #12]
 800c79a:	061a      	lsls	r2, r3, #24
 800c79c:	d410      	bmi.n	800c7c0 <__swhatbuf_r+0x3e>
 800c79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a2:	e00e      	b.n	800c7c2 <__swhatbuf_r+0x40>
 800c7a4:	466a      	mov	r2, sp
 800c7a6:	f000 fdaf 	bl	800d308 <_fstat_r>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	dbf2      	blt.n	800c794 <__swhatbuf_r+0x12>
 800c7ae:	9a01      	ldr	r2, [sp, #4]
 800c7b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7b8:	425a      	negs	r2, r3
 800c7ba:	415a      	adcs	r2, r3
 800c7bc:	602a      	str	r2, [r5, #0]
 800c7be:	e7ee      	b.n	800c79e <__swhatbuf_r+0x1c>
 800c7c0:	2340      	movs	r3, #64	; 0x40
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	b016      	add	sp, #88	; 0x58
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7cc <__smakebuf_r>:
 800c7cc:	898b      	ldrh	r3, [r1, #12]
 800c7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7d0:	079d      	lsls	r5, r3, #30
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	d507      	bpl.n	800c7e8 <__smakebuf_r+0x1c>
 800c7d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	6163      	str	r3, [r4, #20]
 800c7e4:	b002      	add	sp, #8
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}
 800c7e8:	ab01      	add	r3, sp, #4
 800c7ea:	466a      	mov	r2, sp
 800c7ec:	f7ff ffc9 	bl	800c782 <__swhatbuf_r>
 800c7f0:	9900      	ldr	r1, [sp, #0]
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f000 f891 	bl	800c91c <_malloc_r>
 800c7fa:	b948      	cbnz	r0, 800c810 <__smakebuf_r+0x44>
 800c7fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c800:	059a      	lsls	r2, r3, #22
 800c802:	d4ef      	bmi.n	800c7e4 <__smakebuf_r+0x18>
 800c804:	f023 0303 	bic.w	r3, r3, #3
 800c808:	f043 0302 	orr.w	r3, r3, #2
 800c80c:	81a3      	strh	r3, [r4, #12]
 800c80e:	e7e3      	b.n	800c7d8 <__smakebuf_r+0xc>
 800c810:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <__smakebuf_r+0x7c>)
 800c812:	62b3      	str	r3, [r6, #40]	; 0x28
 800c814:	89a3      	ldrh	r3, [r4, #12]
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	6163      	str	r3, [r4, #20]
 800c822:	9b01      	ldr	r3, [sp, #4]
 800c824:	6120      	str	r0, [r4, #16]
 800c826:	b15b      	cbz	r3, 800c840 <__smakebuf_r+0x74>
 800c828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c82c:	4630      	mov	r0, r6
 800c82e:	f000 fd7d 	bl	800d32c <_isatty_r>
 800c832:	b128      	cbz	r0, 800c840 <__smakebuf_r+0x74>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f023 0303 	bic.w	r3, r3, #3
 800c83a:	f043 0301 	orr.w	r3, r3, #1
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	431d      	orrs	r5, r3
 800c844:	81a5      	strh	r5, [r4, #12]
 800c846:	e7cd      	b.n	800c7e4 <__smakebuf_r+0x18>
 800c848:	0800c631 	.word	0x0800c631

0800c84c <malloc>:
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <malloc+0xc>)
 800c84e:	4601      	mov	r1, r0
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	f000 b863 	b.w	800c91c <_malloc_r>
 800c856:	bf00      	nop
 800c858:	20000364 	.word	0x20000364

0800c85c <__ascii_mbtowc>:
 800c85c:	b082      	sub	sp, #8
 800c85e:	b901      	cbnz	r1, 800c862 <__ascii_mbtowc+0x6>
 800c860:	a901      	add	r1, sp, #4
 800c862:	b142      	cbz	r2, 800c876 <__ascii_mbtowc+0x1a>
 800c864:	b14b      	cbz	r3, 800c87a <__ascii_mbtowc+0x1e>
 800c866:	7813      	ldrb	r3, [r2, #0]
 800c868:	600b      	str	r3, [r1, #0]
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	1c10      	adds	r0, r2, #0
 800c86e:	bf18      	it	ne
 800c870:	2001      	movne	r0, #1
 800c872:	b002      	add	sp, #8
 800c874:	4770      	bx	lr
 800c876:	4610      	mov	r0, r2
 800c878:	e7fb      	b.n	800c872 <__ascii_mbtowc+0x16>
 800c87a:	f06f 0001 	mvn.w	r0, #1
 800c87e:	e7f8      	b.n	800c872 <__ascii_mbtowc+0x16>

0800c880 <_free_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4605      	mov	r5, r0
 800c884:	2900      	cmp	r1, #0
 800c886:	d045      	beq.n	800c914 <_free_r+0x94>
 800c888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c88c:	1f0c      	subs	r4, r1, #4
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bfb8      	it	lt
 800c892:	18e4      	addlt	r4, r4, r3
 800c894:	f000 fd85 	bl	800d3a2 <__malloc_lock>
 800c898:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <_free_r+0x98>)
 800c89a:	6813      	ldr	r3, [r2, #0]
 800c89c:	4610      	mov	r0, r2
 800c89e:	b933      	cbnz	r3, 800c8ae <_free_r+0x2e>
 800c8a0:	6063      	str	r3, [r4, #4]
 800c8a2:	6014      	str	r4, [r2, #0]
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8aa:	f000 bd7b 	b.w	800d3a4 <__malloc_unlock>
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	d90c      	bls.n	800c8cc <_free_r+0x4c>
 800c8b2:	6821      	ldr	r1, [r4, #0]
 800c8b4:	1862      	adds	r2, r4, r1
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	bf04      	itt	eq
 800c8ba:	681a      	ldreq	r2, [r3, #0]
 800c8bc:	685b      	ldreq	r3, [r3, #4]
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	bf04      	itt	eq
 800c8c2:	1852      	addeq	r2, r2, r1
 800c8c4:	6022      	streq	r2, [r4, #0]
 800c8c6:	6004      	str	r4, [r0, #0]
 800c8c8:	e7ec      	b.n	800c8a4 <_free_r+0x24>
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	b10a      	cbz	r2, 800c8d4 <_free_r+0x54>
 800c8d0:	42a2      	cmp	r2, r4
 800c8d2:	d9fa      	bls.n	800c8ca <_free_r+0x4a>
 800c8d4:	6819      	ldr	r1, [r3, #0]
 800c8d6:	1858      	adds	r0, r3, r1
 800c8d8:	42a0      	cmp	r0, r4
 800c8da:	d10b      	bne.n	800c8f4 <_free_r+0x74>
 800c8dc:	6820      	ldr	r0, [r4, #0]
 800c8de:	4401      	add	r1, r0
 800c8e0:	1858      	adds	r0, r3, r1
 800c8e2:	4282      	cmp	r2, r0
 800c8e4:	6019      	str	r1, [r3, #0]
 800c8e6:	d1dd      	bne.n	800c8a4 <_free_r+0x24>
 800c8e8:	6810      	ldr	r0, [r2, #0]
 800c8ea:	6852      	ldr	r2, [r2, #4]
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	4401      	add	r1, r0
 800c8f0:	6019      	str	r1, [r3, #0]
 800c8f2:	e7d7      	b.n	800c8a4 <_free_r+0x24>
 800c8f4:	d902      	bls.n	800c8fc <_free_r+0x7c>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	e7d3      	b.n	800c8a4 <_free_r+0x24>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	1821      	adds	r1, r4, r0
 800c900:	428a      	cmp	r2, r1
 800c902:	bf04      	itt	eq
 800c904:	6811      	ldreq	r1, [r2, #0]
 800c906:	6852      	ldreq	r2, [r2, #4]
 800c908:	6062      	str	r2, [r4, #4]
 800c90a:	bf04      	itt	eq
 800c90c:	1809      	addeq	r1, r1, r0
 800c90e:	6021      	streq	r1, [r4, #0]
 800c910:	605c      	str	r4, [r3, #4]
 800c912:	e7c7      	b.n	800c8a4 <_free_r+0x24>
 800c914:	bd38      	pop	{r3, r4, r5, pc}
 800c916:	bf00      	nop
 800c918:	20004978 	.word	0x20004978

0800c91c <_malloc_r>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	1ccd      	adds	r5, r1, #3
 800c920:	f025 0503 	bic.w	r5, r5, #3
 800c924:	3508      	adds	r5, #8
 800c926:	2d0c      	cmp	r5, #12
 800c928:	bf38      	it	cc
 800c92a:	250c      	movcc	r5, #12
 800c92c:	2d00      	cmp	r5, #0
 800c92e:	4606      	mov	r6, r0
 800c930:	db01      	blt.n	800c936 <_malloc_r+0x1a>
 800c932:	42a9      	cmp	r1, r5
 800c934:	d903      	bls.n	800c93e <_malloc_r+0x22>
 800c936:	230c      	movs	r3, #12
 800c938:	6033      	str	r3, [r6, #0]
 800c93a:	2000      	movs	r0, #0
 800c93c:	bd70      	pop	{r4, r5, r6, pc}
 800c93e:	f000 fd30 	bl	800d3a2 <__malloc_lock>
 800c942:	4a21      	ldr	r2, [pc, #132]	; (800c9c8 <_malloc_r+0xac>)
 800c944:	6814      	ldr	r4, [r2, #0]
 800c946:	4621      	mov	r1, r4
 800c948:	b991      	cbnz	r1, 800c970 <_malloc_r+0x54>
 800c94a:	4c20      	ldr	r4, [pc, #128]	; (800c9cc <_malloc_r+0xb0>)
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	b91b      	cbnz	r3, 800c958 <_malloc_r+0x3c>
 800c950:	4630      	mov	r0, r6
 800c952:	f000 fc57 	bl	800d204 <_sbrk_r>
 800c956:	6020      	str	r0, [r4, #0]
 800c958:	4629      	mov	r1, r5
 800c95a:	4630      	mov	r0, r6
 800c95c:	f000 fc52 	bl	800d204 <_sbrk_r>
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	d124      	bne.n	800c9ae <_malloc_r+0x92>
 800c964:	230c      	movs	r3, #12
 800c966:	6033      	str	r3, [r6, #0]
 800c968:	4630      	mov	r0, r6
 800c96a:	f000 fd1b 	bl	800d3a4 <__malloc_unlock>
 800c96e:	e7e4      	b.n	800c93a <_malloc_r+0x1e>
 800c970:	680b      	ldr	r3, [r1, #0]
 800c972:	1b5b      	subs	r3, r3, r5
 800c974:	d418      	bmi.n	800c9a8 <_malloc_r+0x8c>
 800c976:	2b0b      	cmp	r3, #11
 800c978:	d90f      	bls.n	800c99a <_malloc_r+0x7e>
 800c97a:	600b      	str	r3, [r1, #0]
 800c97c:	50cd      	str	r5, [r1, r3]
 800c97e:	18cc      	adds	r4, r1, r3
 800c980:	4630      	mov	r0, r6
 800c982:	f000 fd0f 	bl	800d3a4 <__malloc_unlock>
 800c986:	f104 000b 	add.w	r0, r4, #11
 800c98a:	1d23      	adds	r3, r4, #4
 800c98c:	f020 0007 	bic.w	r0, r0, #7
 800c990:	1ac3      	subs	r3, r0, r3
 800c992:	d0d3      	beq.n	800c93c <_malloc_r+0x20>
 800c994:	425a      	negs	r2, r3
 800c996:	50e2      	str	r2, [r4, r3]
 800c998:	e7d0      	b.n	800c93c <_malloc_r+0x20>
 800c99a:	428c      	cmp	r4, r1
 800c99c:	684b      	ldr	r3, [r1, #4]
 800c99e:	bf16      	itet	ne
 800c9a0:	6063      	strne	r3, [r4, #4]
 800c9a2:	6013      	streq	r3, [r2, #0]
 800c9a4:	460c      	movne	r4, r1
 800c9a6:	e7eb      	b.n	800c980 <_malloc_r+0x64>
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	6849      	ldr	r1, [r1, #4]
 800c9ac:	e7cc      	b.n	800c948 <_malloc_r+0x2c>
 800c9ae:	1cc4      	adds	r4, r0, #3
 800c9b0:	f024 0403 	bic.w	r4, r4, #3
 800c9b4:	42a0      	cmp	r0, r4
 800c9b6:	d005      	beq.n	800c9c4 <_malloc_r+0xa8>
 800c9b8:	1a21      	subs	r1, r4, r0
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 fc22 	bl	800d204 <_sbrk_r>
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	d0cf      	beq.n	800c964 <_malloc_r+0x48>
 800c9c4:	6025      	str	r5, [r4, #0]
 800c9c6:	e7db      	b.n	800c980 <_malloc_r+0x64>
 800c9c8:	20004978 	.word	0x20004978
 800c9cc:	2000497c 	.word	0x2000497c

0800c9d0 <__ssputs_r>:
 800c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	688e      	ldr	r6, [r1, #8]
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	4682      	mov	sl, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	4690      	mov	r8, r2
 800c9de:	4699      	mov	r9, r3
 800c9e0:	d837      	bhi.n	800ca52 <__ssputs_r+0x82>
 800c9e2:	898a      	ldrh	r2, [r1, #12]
 800c9e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9e8:	d031      	beq.n	800ca4e <__ssputs_r+0x7e>
 800c9ea:	6825      	ldr	r5, [r4, #0]
 800c9ec:	6909      	ldr	r1, [r1, #16]
 800c9ee:	1a6f      	subs	r7, r5, r1
 800c9f0:	6965      	ldr	r5, [r4, #20]
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800c9fc:	f109 0301 	add.w	r3, r9, #1
 800ca00:	443b      	add	r3, r7
 800ca02:	429d      	cmp	r5, r3
 800ca04:	bf38      	it	cc
 800ca06:	461d      	movcc	r5, r3
 800ca08:	0553      	lsls	r3, r2, #21
 800ca0a:	d530      	bpl.n	800ca6e <__ssputs_r+0x9e>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	f7ff ff85 	bl	800c91c <_malloc_r>
 800ca12:	4606      	mov	r6, r0
 800ca14:	b950      	cbnz	r0, 800ca2c <__ssputs_r+0x5c>
 800ca16:	230c      	movs	r3, #12
 800ca18:	f8ca 3000 	str.w	r3, [sl]
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca22:	81a3      	strh	r3, [r4, #12]
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2c:	463a      	mov	r2, r7
 800ca2e:	6921      	ldr	r1, [r4, #16]
 800ca30:	f7ff fa85 	bl	800bf3e <memcpy>
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	6126      	str	r6, [r4, #16]
 800ca42:	6165      	str	r5, [r4, #20]
 800ca44:	443e      	add	r6, r7
 800ca46:	1bed      	subs	r5, r5, r7
 800ca48:	6026      	str	r6, [r4, #0]
 800ca4a:	60a5      	str	r5, [r4, #8]
 800ca4c:	464e      	mov	r6, r9
 800ca4e:	454e      	cmp	r6, r9
 800ca50:	d900      	bls.n	800ca54 <__ssputs_r+0x84>
 800ca52:	464e      	mov	r6, r9
 800ca54:	4632      	mov	r2, r6
 800ca56:	4641      	mov	r1, r8
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	f000 fc89 	bl	800d370 <memmove>
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	1b9b      	subs	r3, r3, r6
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	441e      	add	r6, r3
 800ca68:	6026      	str	r6, [r4, #0]
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	e7dc      	b.n	800ca28 <__ssputs_r+0x58>
 800ca6e:	462a      	mov	r2, r5
 800ca70:	f000 fc99 	bl	800d3a6 <_realloc_r>
 800ca74:	4606      	mov	r6, r0
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d1e2      	bne.n	800ca40 <__ssputs_r+0x70>
 800ca7a:	6921      	ldr	r1, [r4, #16]
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	f7ff feff 	bl	800c880 <_free_r>
 800ca82:	e7c8      	b.n	800ca16 <__ssputs_r+0x46>

0800ca84 <_svfiprintf_r>:
 800ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	461d      	mov	r5, r3
 800ca8a:	898b      	ldrh	r3, [r1, #12]
 800ca8c:	061f      	lsls	r7, r3, #24
 800ca8e:	b09d      	sub	sp, #116	; 0x74
 800ca90:	4680      	mov	r8, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	4616      	mov	r6, r2
 800ca96:	d50f      	bpl.n	800cab8 <_svfiprintf_r+0x34>
 800ca98:	690b      	ldr	r3, [r1, #16]
 800ca9a:	b96b      	cbnz	r3, 800cab8 <_svfiprintf_r+0x34>
 800ca9c:	2140      	movs	r1, #64	; 0x40
 800ca9e:	f7ff ff3d 	bl	800c91c <_malloc_r>
 800caa2:	6020      	str	r0, [r4, #0]
 800caa4:	6120      	str	r0, [r4, #16]
 800caa6:	b928      	cbnz	r0, 800cab4 <_svfiprintf_r+0x30>
 800caa8:	230c      	movs	r3, #12
 800caaa:	f8c8 3000 	str.w	r3, [r8]
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	e0c8      	b.n	800cc46 <_svfiprintf_r+0x1c2>
 800cab4:	2340      	movs	r3, #64	; 0x40
 800cab6:	6163      	str	r3, [r4, #20]
 800cab8:	2300      	movs	r3, #0
 800caba:	9309      	str	r3, [sp, #36]	; 0x24
 800cabc:	2320      	movs	r3, #32
 800cabe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cac2:	2330      	movs	r3, #48	; 0x30
 800cac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cac8:	9503      	str	r5, [sp, #12]
 800caca:	f04f 0b01 	mov.w	fp, #1
 800cace:	4637      	mov	r7, r6
 800cad0:	463d      	mov	r5, r7
 800cad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cad6:	b10b      	cbz	r3, 800cadc <_svfiprintf_r+0x58>
 800cad8:	2b25      	cmp	r3, #37	; 0x25
 800cada:	d13e      	bne.n	800cb5a <_svfiprintf_r+0xd6>
 800cadc:	ebb7 0a06 	subs.w	sl, r7, r6
 800cae0:	d00b      	beq.n	800cafa <_svfiprintf_r+0x76>
 800cae2:	4653      	mov	r3, sl
 800cae4:	4632      	mov	r2, r6
 800cae6:	4621      	mov	r1, r4
 800cae8:	4640      	mov	r0, r8
 800caea:	f7ff ff71 	bl	800c9d0 <__ssputs_r>
 800caee:	3001      	adds	r0, #1
 800caf0:	f000 80a4 	beq.w	800cc3c <_svfiprintf_r+0x1b8>
 800caf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf6:	4453      	add	r3, sl
 800caf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cafa:	783b      	ldrb	r3, [r7, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 809d 	beq.w	800cc3c <_svfiprintf_r+0x1b8>
 800cb02:	2300      	movs	r3, #0
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295
 800cb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb14:	931a      	str	r3, [sp, #104]	; 0x68
 800cb16:	462f      	mov	r7, r5
 800cb18:	2205      	movs	r2, #5
 800cb1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb1e:	4850      	ldr	r0, [pc, #320]	; (800cc60 <_svfiprintf_r+0x1dc>)
 800cb20:	f7f3 fb5e 	bl	80001e0 <memchr>
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	b9d0      	cbnz	r0, 800cb5e <_svfiprintf_r+0xda>
 800cb28:	06d9      	lsls	r1, r3, #27
 800cb2a:	bf44      	itt	mi
 800cb2c:	2220      	movmi	r2, #32
 800cb2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb32:	071a      	lsls	r2, r3, #28
 800cb34:	bf44      	itt	mi
 800cb36:	222b      	movmi	r2, #43	; 0x2b
 800cb38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb3c:	782a      	ldrb	r2, [r5, #0]
 800cb3e:	2a2a      	cmp	r2, #42	; 0x2a
 800cb40:	d015      	beq.n	800cb6e <_svfiprintf_r+0xea>
 800cb42:	9a07      	ldr	r2, [sp, #28]
 800cb44:	462f      	mov	r7, r5
 800cb46:	2000      	movs	r0, #0
 800cb48:	250a      	movs	r5, #10
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb50:	3b30      	subs	r3, #48	; 0x30
 800cb52:	2b09      	cmp	r3, #9
 800cb54:	d94d      	bls.n	800cbf2 <_svfiprintf_r+0x16e>
 800cb56:	b1b8      	cbz	r0, 800cb88 <_svfiprintf_r+0x104>
 800cb58:	e00f      	b.n	800cb7a <_svfiprintf_r+0xf6>
 800cb5a:	462f      	mov	r7, r5
 800cb5c:	e7b8      	b.n	800cad0 <_svfiprintf_r+0x4c>
 800cb5e:	4a40      	ldr	r2, [pc, #256]	; (800cc60 <_svfiprintf_r+0x1dc>)
 800cb60:	1a80      	subs	r0, r0, r2
 800cb62:	fa0b f000 	lsl.w	r0, fp, r0
 800cb66:	4318      	orrs	r0, r3
 800cb68:	9004      	str	r0, [sp, #16]
 800cb6a:	463d      	mov	r5, r7
 800cb6c:	e7d3      	b.n	800cb16 <_svfiprintf_r+0x92>
 800cb6e:	9a03      	ldr	r2, [sp, #12]
 800cb70:	1d11      	adds	r1, r2, #4
 800cb72:	6812      	ldr	r2, [r2, #0]
 800cb74:	9103      	str	r1, [sp, #12]
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	db01      	blt.n	800cb7e <_svfiprintf_r+0xfa>
 800cb7a:	9207      	str	r2, [sp, #28]
 800cb7c:	e004      	b.n	800cb88 <_svfiprintf_r+0x104>
 800cb7e:	4252      	negs	r2, r2
 800cb80:	f043 0302 	orr.w	r3, r3, #2
 800cb84:	9207      	str	r2, [sp, #28]
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	783b      	ldrb	r3, [r7, #0]
 800cb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8c:	d10c      	bne.n	800cba8 <_svfiprintf_r+0x124>
 800cb8e:	787b      	ldrb	r3, [r7, #1]
 800cb90:	2b2a      	cmp	r3, #42	; 0x2a
 800cb92:	d133      	bne.n	800cbfc <_svfiprintf_r+0x178>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	1d1a      	adds	r2, r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	9203      	str	r2, [sp, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bfb8      	it	lt
 800cba0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cba4:	3702      	adds	r7, #2
 800cba6:	9305      	str	r3, [sp, #20]
 800cba8:	4d2e      	ldr	r5, [pc, #184]	; (800cc64 <_svfiprintf_r+0x1e0>)
 800cbaa:	7839      	ldrb	r1, [r7, #0]
 800cbac:	2203      	movs	r2, #3
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f7f3 fb16 	bl	80001e0 <memchr>
 800cbb4:	b138      	cbz	r0, 800cbc6 <_svfiprintf_r+0x142>
 800cbb6:	2340      	movs	r3, #64	; 0x40
 800cbb8:	1b40      	subs	r0, r0, r5
 800cbba:	fa03 f000 	lsl.w	r0, r3, r0
 800cbbe:	9b04      	ldr	r3, [sp, #16]
 800cbc0:	4303      	orrs	r3, r0
 800cbc2:	3701      	adds	r7, #1
 800cbc4:	9304      	str	r3, [sp, #16]
 800cbc6:	7839      	ldrb	r1, [r7, #0]
 800cbc8:	4827      	ldr	r0, [pc, #156]	; (800cc68 <_svfiprintf_r+0x1e4>)
 800cbca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbce:	2206      	movs	r2, #6
 800cbd0:	1c7e      	adds	r6, r7, #1
 800cbd2:	f7f3 fb05 	bl	80001e0 <memchr>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d038      	beq.n	800cc4c <_svfiprintf_r+0x1c8>
 800cbda:	4b24      	ldr	r3, [pc, #144]	; (800cc6c <_svfiprintf_r+0x1e8>)
 800cbdc:	bb13      	cbnz	r3, 800cc24 <_svfiprintf_r+0x1a0>
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	3307      	adds	r3, #7
 800cbe2:	f023 0307 	bic.w	r3, r3, #7
 800cbe6:	3308      	adds	r3, #8
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbec:	444b      	add	r3, r9
 800cbee:	9309      	str	r3, [sp, #36]	; 0x24
 800cbf0:	e76d      	b.n	800cace <_svfiprintf_r+0x4a>
 800cbf2:	fb05 3202 	mla	r2, r5, r2, r3
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	460f      	mov	r7, r1
 800cbfa:	e7a6      	b.n	800cb4a <_svfiprintf_r+0xc6>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	3701      	adds	r7, #1
 800cc00:	9305      	str	r3, [sp, #20]
 800cc02:	4619      	mov	r1, r3
 800cc04:	250a      	movs	r5, #10
 800cc06:	4638      	mov	r0, r7
 800cc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc0c:	3a30      	subs	r2, #48	; 0x30
 800cc0e:	2a09      	cmp	r2, #9
 800cc10:	d903      	bls.n	800cc1a <_svfiprintf_r+0x196>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d0c8      	beq.n	800cba8 <_svfiprintf_r+0x124>
 800cc16:	9105      	str	r1, [sp, #20]
 800cc18:	e7c6      	b.n	800cba8 <_svfiprintf_r+0x124>
 800cc1a:	fb05 2101 	mla	r1, r5, r1, r2
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4607      	mov	r7, r0
 800cc22:	e7f0      	b.n	800cc06 <_svfiprintf_r+0x182>
 800cc24:	ab03      	add	r3, sp, #12
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4b11      	ldr	r3, [pc, #68]	; (800cc70 <_svfiprintf_r+0x1ec>)
 800cc2c:	a904      	add	r1, sp, #16
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f3af 8000 	nop.w
 800cc34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc38:	4681      	mov	r9, r0
 800cc3a:	d1d6      	bne.n	800cbea <_svfiprintf_r+0x166>
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	065b      	lsls	r3, r3, #25
 800cc40:	f53f af35 	bmi.w	800caae <_svfiprintf_r+0x2a>
 800cc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc46:	b01d      	add	sp, #116	; 0x74
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	ab03      	add	r3, sp, #12
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	4622      	mov	r2, r4
 800cc52:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <_svfiprintf_r+0x1ec>)
 800cc54:	a904      	add	r1, sp, #16
 800cc56:	4640      	mov	r0, r8
 800cc58:	f000 f9c2 	bl	800cfe0 <_printf_i>
 800cc5c:	e7ea      	b.n	800cc34 <_svfiprintf_r+0x1b0>
 800cc5e:	bf00      	nop
 800cc60:	0800e1fa 	.word	0x0800e1fa
 800cc64:	0800e200 	.word	0x0800e200
 800cc68:	0800e204 	.word	0x0800e204
 800cc6c:	00000000 	.word	0x00000000
 800cc70:	0800c9d1 	.word	0x0800c9d1

0800cc74 <__sfputc_r>:
 800cc74:	6893      	ldr	r3, [r2, #8]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	b410      	push	{r4}
 800cc7c:	6093      	str	r3, [r2, #8]
 800cc7e:	da08      	bge.n	800cc92 <__sfputc_r+0x1e>
 800cc80:	6994      	ldr	r4, [r2, #24]
 800cc82:	42a3      	cmp	r3, r4
 800cc84:	db01      	blt.n	800cc8a <__sfputc_r+0x16>
 800cc86:	290a      	cmp	r1, #10
 800cc88:	d103      	bne.n	800cc92 <__sfputc_r+0x1e>
 800cc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc8e:	f7ff bb3b 	b.w	800c308 <__swbuf_r>
 800cc92:	6813      	ldr	r3, [r2, #0]
 800cc94:	1c58      	adds	r0, r3, #1
 800cc96:	6010      	str	r0, [r2, #0]
 800cc98:	7019      	strb	r1, [r3, #0]
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <__sfputs_r>:
 800cca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca4:	4606      	mov	r6, r0
 800cca6:	460f      	mov	r7, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	18d5      	adds	r5, r2, r3
 800ccac:	42ac      	cmp	r4, r5
 800ccae:	d101      	bne.n	800ccb4 <__sfputs_r+0x12>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e007      	b.n	800ccc4 <__sfputs_r+0x22>
 800ccb4:	463a      	mov	r2, r7
 800ccb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ffda 	bl	800cc74 <__sfputc_r>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	d1f3      	bne.n	800ccac <__sfputs_r+0xa>
 800ccc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccc8 <_vfiprintf_r>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	b09d      	sub	sp, #116	; 0x74
 800ccd0:	4617      	mov	r7, r2
 800ccd2:	461d      	mov	r5, r3
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	b118      	cbz	r0, 800cce0 <_vfiprintf_r+0x18>
 800ccd8:	6983      	ldr	r3, [r0, #24]
 800ccda:	b90b      	cbnz	r3, 800cce0 <_vfiprintf_r+0x18>
 800ccdc:	f7ff fcc4 	bl	800c668 <__sinit>
 800cce0:	4b7c      	ldr	r3, [pc, #496]	; (800ced4 <_vfiprintf_r+0x20c>)
 800cce2:	429c      	cmp	r4, r3
 800cce4:	d158      	bne.n	800cd98 <_vfiprintf_r+0xd0>
 800cce6:	6874      	ldr	r4, [r6, #4]
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	0718      	lsls	r0, r3, #28
 800ccec:	d55e      	bpl.n	800cdac <_vfiprintf_r+0xe4>
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d05b      	beq.n	800cdac <_vfiprintf_r+0xe4>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf8:	2320      	movs	r3, #32
 800ccfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccfe:	2330      	movs	r3, #48	; 0x30
 800cd00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd04:	9503      	str	r5, [sp, #12]
 800cd06:	f04f 0b01 	mov.w	fp, #1
 800cd0a:	46b8      	mov	r8, r7
 800cd0c:	4645      	mov	r5, r8
 800cd0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd12:	b10b      	cbz	r3, 800cd18 <_vfiprintf_r+0x50>
 800cd14:	2b25      	cmp	r3, #37	; 0x25
 800cd16:	d154      	bne.n	800cdc2 <_vfiprintf_r+0xfa>
 800cd18:	ebb8 0a07 	subs.w	sl, r8, r7
 800cd1c:	d00b      	beq.n	800cd36 <_vfiprintf_r+0x6e>
 800cd1e:	4653      	mov	r3, sl
 800cd20:	463a      	mov	r2, r7
 800cd22:	4621      	mov	r1, r4
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ffbc 	bl	800cca2 <__sfputs_r>
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	f000 80c2 	beq.w	800ceb4 <_vfiprintf_r+0x1ec>
 800cd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd32:	4453      	add	r3, sl
 800cd34:	9309      	str	r3, [sp, #36]	; 0x24
 800cd36:	f898 3000 	ldrb.w	r3, [r8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 80ba 	beq.w	800ceb4 <_vfiprintf_r+0x1ec>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4a:	9304      	str	r3, [sp, #16]
 800cd4c:	9307      	str	r3, [sp, #28]
 800cd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd52:	931a      	str	r3, [sp, #104]	; 0x68
 800cd54:	46a8      	mov	r8, r5
 800cd56:	2205      	movs	r2, #5
 800cd58:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cd5c:	485e      	ldr	r0, [pc, #376]	; (800ced8 <_vfiprintf_r+0x210>)
 800cd5e:	f7f3 fa3f 	bl	80001e0 <memchr>
 800cd62:	9b04      	ldr	r3, [sp, #16]
 800cd64:	bb78      	cbnz	r0, 800cdc6 <_vfiprintf_r+0xfe>
 800cd66:	06d9      	lsls	r1, r3, #27
 800cd68:	bf44      	itt	mi
 800cd6a:	2220      	movmi	r2, #32
 800cd6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd70:	071a      	lsls	r2, r3, #28
 800cd72:	bf44      	itt	mi
 800cd74:	222b      	movmi	r2, #43	; 0x2b
 800cd76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd7a:	782a      	ldrb	r2, [r5, #0]
 800cd7c:	2a2a      	cmp	r2, #42	; 0x2a
 800cd7e:	d02a      	beq.n	800cdd6 <_vfiprintf_r+0x10e>
 800cd80:	9a07      	ldr	r2, [sp, #28]
 800cd82:	46a8      	mov	r8, r5
 800cd84:	2000      	movs	r0, #0
 800cd86:	250a      	movs	r5, #10
 800cd88:	4641      	mov	r1, r8
 800cd8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd8e:	3b30      	subs	r3, #48	; 0x30
 800cd90:	2b09      	cmp	r3, #9
 800cd92:	d969      	bls.n	800ce68 <_vfiprintf_r+0x1a0>
 800cd94:	b360      	cbz	r0, 800cdf0 <_vfiprintf_r+0x128>
 800cd96:	e024      	b.n	800cde2 <_vfiprintf_r+0x11a>
 800cd98:	4b50      	ldr	r3, [pc, #320]	; (800cedc <_vfiprintf_r+0x214>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d101      	bne.n	800cda2 <_vfiprintf_r+0xda>
 800cd9e:	68b4      	ldr	r4, [r6, #8]
 800cda0:	e7a2      	b.n	800cce8 <_vfiprintf_r+0x20>
 800cda2:	4b4f      	ldr	r3, [pc, #316]	; (800cee0 <_vfiprintf_r+0x218>)
 800cda4:	429c      	cmp	r4, r3
 800cda6:	bf08      	it	eq
 800cda8:	68f4      	ldreq	r4, [r6, #12]
 800cdaa:	e79d      	b.n	800cce8 <_vfiprintf_r+0x20>
 800cdac:	4621      	mov	r1, r4
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7ff fafc 	bl	800c3ac <__swsetup_r>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d09d      	beq.n	800ccf4 <_vfiprintf_r+0x2c>
 800cdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbc:	b01d      	add	sp, #116	; 0x74
 800cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc2:	46a8      	mov	r8, r5
 800cdc4:	e7a2      	b.n	800cd0c <_vfiprintf_r+0x44>
 800cdc6:	4a44      	ldr	r2, [pc, #272]	; (800ced8 <_vfiprintf_r+0x210>)
 800cdc8:	1a80      	subs	r0, r0, r2
 800cdca:	fa0b f000 	lsl.w	r0, fp, r0
 800cdce:	4318      	orrs	r0, r3
 800cdd0:	9004      	str	r0, [sp, #16]
 800cdd2:	4645      	mov	r5, r8
 800cdd4:	e7be      	b.n	800cd54 <_vfiprintf_r+0x8c>
 800cdd6:	9a03      	ldr	r2, [sp, #12]
 800cdd8:	1d11      	adds	r1, r2, #4
 800cdda:	6812      	ldr	r2, [r2, #0]
 800cddc:	9103      	str	r1, [sp, #12]
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	db01      	blt.n	800cde6 <_vfiprintf_r+0x11e>
 800cde2:	9207      	str	r2, [sp, #28]
 800cde4:	e004      	b.n	800cdf0 <_vfiprintf_r+0x128>
 800cde6:	4252      	negs	r2, r2
 800cde8:	f043 0302 	orr.w	r3, r3, #2
 800cdec:	9207      	str	r2, [sp, #28]
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	f898 3000 	ldrb.w	r3, [r8]
 800cdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800cdf6:	d10e      	bne.n	800ce16 <_vfiprintf_r+0x14e>
 800cdf8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cdfc:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfe:	d138      	bne.n	800ce72 <_vfiprintf_r+0x1aa>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	1d1a      	adds	r2, r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	bfb8      	it	lt
 800ce0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce10:	f108 0802 	add.w	r8, r8, #2
 800ce14:	9305      	str	r3, [sp, #20]
 800ce16:	4d33      	ldr	r5, [pc, #204]	; (800cee4 <_vfiprintf_r+0x21c>)
 800ce18:	f898 1000 	ldrb.w	r1, [r8]
 800ce1c:	2203      	movs	r2, #3
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f7f3 f9de 	bl	80001e0 <memchr>
 800ce24:	b140      	cbz	r0, 800ce38 <_vfiprintf_r+0x170>
 800ce26:	2340      	movs	r3, #64	; 0x40
 800ce28:	1b40      	subs	r0, r0, r5
 800ce2a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce2e:	9b04      	ldr	r3, [sp, #16]
 800ce30:	4303      	orrs	r3, r0
 800ce32:	f108 0801 	add.w	r8, r8, #1
 800ce36:	9304      	str	r3, [sp, #16]
 800ce38:	f898 1000 	ldrb.w	r1, [r8]
 800ce3c:	482a      	ldr	r0, [pc, #168]	; (800cee8 <_vfiprintf_r+0x220>)
 800ce3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce42:	2206      	movs	r2, #6
 800ce44:	f108 0701 	add.w	r7, r8, #1
 800ce48:	f7f3 f9ca 	bl	80001e0 <memchr>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d037      	beq.n	800cec0 <_vfiprintf_r+0x1f8>
 800ce50:	4b26      	ldr	r3, [pc, #152]	; (800ceec <_vfiprintf_r+0x224>)
 800ce52:	bb1b      	cbnz	r3, 800ce9c <_vfiprintf_r+0x1d4>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	3307      	adds	r3, #7
 800ce58:	f023 0307 	bic.w	r3, r3, #7
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	9303      	str	r3, [sp, #12]
 800ce60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce62:	444b      	add	r3, r9
 800ce64:	9309      	str	r3, [sp, #36]	; 0x24
 800ce66:	e750      	b.n	800cd0a <_vfiprintf_r+0x42>
 800ce68:	fb05 3202 	mla	r2, r5, r2, r3
 800ce6c:	2001      	movs	r0, #1
 800ce6e:	4688      	mov	r8, r1
 800ce70:	e78a      	b.n	800cd88 <_vfiprintf_r+0xc0>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f108 0801 	add.w	r8, r8, #1
 800ce78:	9305      	str	r3, [sp, #20]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	250a      	movs	r5, #10
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce84:	3a30      	subs	r2, #48	; 0x30
 800ce86:	2a09      	cmp	r2, #9
 800ce88:	d903      	bls.n	800ce92 <_vfiprintf_r+0x1ca>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0c3      	beq.n	800ce16 <_vfiprintf_r+0x14e>
 800ce8e:	9105      	str	r1, [sp, #20]
 800ce90:	e7c1      	b.n	800ce16 <_vfiprintf_r+0x14e>
 800ce92:	fb05 2101 	mla	r1, r5, r1, r2
 800ce96:	2301      	movs	r3, #1
 800ce98:	4680      	mov	r8, r0
 800ce9a:	e7f0      	b.n	800ce7e <_vfiprintf_r+0x1b6>
 800ce9c:	ab03      	add	r3, sp, #12
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4622      	mov	r2, r4
 800cea2:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <_vfiprintf_r+0x228>)
 800cea4:	a904      	add	r1, sp, #16
 800cea6:	4630      	mov	r0, r6
 800cea8:	f3af 8000 	nop.w
 800ceac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ceb0:	4681      	mov	r9, r0
 800ceb2:	d1d5      	bne.n	800ce60 <_vfiprintf_r+0x198>
 800ceb4:	89a3      	ldrh	r3, [r4, #12]
 800ceb6:	065b      	lsls	r3, r3, #25
 800ceb8:	f53f af7e 	bmi.w	800cdb8 <_vfiprintf_r+0xf0>
 800cebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cebe:	e77d      	b.n	800cdbc <_vfiprintf_r+0xf4>
 800cec0:	ab03      	add	r3, sp, #12
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	4622      	mov	r2, r4
 800cec6:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <_vfiprintf_r+0x228>)
 800cec8:	a904      	add	r1, sp, #16
 800ceca:	4630      	mov	r0, r6
 800cecc:	f000 f888 	bl	800cfe0 <_printf_i>
 800ced0:	e7ec      	b.n	800ceac <_vfiprintf_r+0x1e4>
 800ced2:	bf00      	nop
 800ced4:	0800e1b0 	.word	0x0800e1b0
 800ced8:	0800e1fa 	.word	0x0800e1fa
 800cedc:	0800e1d0 	.word	0x0800e1d0
 800cee0:	0800e190 	.word	0x0800e190
 800cee4:	0800e200 	.word	0x0800e200
 800cee8:	0800e204 	.word	0x0800e204
 800ceec:	00000000 	.word	0x00000000
 800cef0:	0800cca3 	.word	0x0800cca3

0800cef4 <_printf_common>:
 800cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef8:	4691      	mov	r9, r2
 800cefa:	461f      	mov	r7, r3
 800cefc:	688a      	ldr	r2, [r1, #8]
 800cefe:	690b      	ldr	r3, [r1, #16]
 800cf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	bfb8      	it	lt
 800cf08:	4613      	movlt	r3, r2
 800cf0a:	f8c9 3000 	str.w	r3, [r9]
 800cf0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf12:	4606      	mov	r6, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	b112      	cbz	r2, 800cf1e <_printf_common+0x2a>
 800cf18:	3301      	adds	r3, #1
 800cf1a:	f8c9 3000 	str.w	r3, [r9]
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	0699      	lsls	r1, r3, #26
 800cf22:	bf42      	ittt	mi
 800cf24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cf28:	3302      	addmi	r3, #2
 800cf2a:	f8c9 3000 	strmi.w	r3, [r9]
 800cf2e:	6825      	ldr	r5, [r4, #0]
 800cf30:	f015 0506 	ands.w	r5, r5, #6
 800cf34:	d107      	bne.n	800cf46 <_printf_common+0x52>
 800cf36:	f104 0a19 	add.w	sl, r4, #25
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf40:	1a9b      	subs	r3, r3, r2
 800cf42:	42ab      	cmp	r3, r5
 800cf44:	dc28      	bgt.n	800cf98 <_printf_common+0xa4>
 800cf46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf4a:	6822      	ldr	r2, [r4, #0]
 800cf4c:	3300      	adds	r3, #0
 800cf4e:	bf18      	it	ne
 800cf50:	2301      	movne	r3, #1
 800cf52:	0692      	lsls	r2, r2, #26
 800cf54:	d42d      	bmi.n	800cfb2 <_printf_common+0xbe>
 800cf56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	47c0      	blx	r8
 800cf60:	3001      	adds	r0, #1
 800cf62:	d020      	beq.n	800cfa6 <_printf_common+0xb2>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	68e5      	ldr	r5, [r4, #12]
 800cf68:	f8d9 2000 	ldr.w	r2, [r9]
 800cf6c:	f003 0306 	and.w	r3, r3, #6
 800cf70:	2b04      	cmp	r3, #4
 800cf72:	bf08      	it	eq
 800cf74:	1aad      	subeq	r5, r5, r2
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	6922      	ldr	r2, [r4, #16]
 800cf7a:	bf0c      	ite	eq
 800cf7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf80:	2500      	movne	r5, #0
 800cf82:	4293      	cmp	r3, r2
 800cf84:	bfc4      	itt	gt
 800cf86:	1a9b      	subgt	r3, r3, r2
 800cf88:	18ed      	addgt	r5, r5, r3
 800cf8a:	f04f 0900 	mov.w	r9, #0
 800cf8e:	341a      	adds	r4, #26
 800cf90:	454d      	cmp	r5, r9
 800cf92:	d11a      	bne.n	800cfca <_printf_common+0xd6>
 800cf94:	2000      	movs	r0, #0
 800cf96:	e008      	b.n	800cfaa <_printf_common+0xb6>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	47c0      	blx	r8
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	d103      	bne.n	800cfae <_printf_common+0xba>
 800cfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfae:	3501      	adds	r5, #1
 800cfb0:	e7c3      	b.n	800cf3a <_printf_common+0x46>
 800cfb2:	18e1      	adds	r1, r4, r3
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	2030      	movs	r0, #48	; 0x30
 800cfb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfbc:	4422      	add	r2, r4
 800cfbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfc6:	3302      	adds	r3, #2
 800cfc8:	e7c5      	b.n	800cf56 <_printf_common+0x62>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	47c0      	blx	r8
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d0e6      	beq.n	800cfa6 <_printf_common+0xb2>
 800cfd8:	f109 0901 	add.w	r9, r9, #1
 800cfdc:	e7d8      	b.n	800cf90 <_printf_common+0x9c>
	...

0800cfe0 <_printf_i>:
 800cfe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cfe8:	460c      	mov	r4, r1
 800cfea:	7e09      	ldrb	r1, [r1, #24]
 800cfec:	b085      	sub	sp, #20
 800cfee:	296e      	cmp	r1, #110	; 0x6e
 800cff0:	4617      	mov	r7, r2
 800cff2:	4606      	mov	r6, r0
 800cff4:	4698      	mov	r8, r3
 800cff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cff8:	f000 80b3 	beq.w	800d162 <_printf_i+0x182>
 800cffc:	d822      	bhi.n	800d044 <_printf_i+0x64>
 800cffe:	2963      	cmp	r1, #99	; 0x63
 800d000:	d036      	beq.n	800d070 <_printf_i+0x90>
 800d002:	d80a      	bhi.n	800d01a <_printf_i+0x3a>
 800d004:	2900      	cmp	r1, #0
 800d006:	f000 80b9 	beq.w	800d17c <_printf_i+0x19c>
 800d00a:	2958      	cmp	r1, #88	; 0x58
 800d00c:	f000 8083 	beq.w	800d116 <_printf_i+0x136>
 800d010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d014:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d018:	e032      	b.n	800d080 <_printf_i+0xa0>
 800d01a:	2964      	cmp	r1, #100	; 0x64
 800d01c:	d001      	beq.n	800d022 <_printf_i+0x42>
 800d01e:	2969      	cmp	r1, #105	; 0x69
 800d020:	d1f6      	bne.n	800d010 <_printf_i+0x30>
 800d022:	6820      	ldr	r0, [r4, #0]
 800d024:	6813      	ldr	r3, [r2, #0]
 800d026:	0605      	lsls	r5, r0, #24
 800d028:	f103 0104 	add.w	r1, r3, #4
 800d02c:	d52a      	bpl.n	800d084 <_printf_i+0xa4>
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6011      	str	r1, [r2, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	da03      	bge.n	800d03e <_printf_i+0x5e>
 800d036:	222d      	movs	r2, #45	; 0x2d
 800d038:	425b      	negs	r3, r3
 800d03a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d03e:	486f      	ldr	r0, [pc, #444]	; (800d1fc <_printf_i+0x21c>)
 800d040:	220a      	movs	r2, #10
 800d042:	e039      	b.n	800d0b8 <_printf_i+0xd8>
 800d044:	2973      	cmp	r1, #115	; 0x73
 800d046:	f000 809d 	beq.w	800d184 <_printf_i+0x1a4>
 800d04a:	d808      	bhi.n	800d05e <_printf_i+0x7e>
 800d04c:	296f      	cmp	r1, #111	; 0x6f
 800d04e:	d020      	beq.n	800d092 <_printf_i+0xb2>
 800d050:	2970      	cmp	r1, #112	; 0x70
 800d052:	d1dd      	bne.n	800d010 <_printf_i+0x30>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	f043 0320 	orr.w	r3, r3, #32
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	e003      	b.n	800d066 <_printf_i+0x86>
 800d05e:	2975      	cmp	r1, #117	; 0x75
 800d060:	d017      	beq.n	800d092 <_printf_i+0xb2>
 800d062:	2978      	cmp	r1, #120	; 0x78
 800d064:	d1d4      	bne.n	800d010 <_printf_i+0x30>
 800d066:	2378      	movs	r3, #120	; 0x78
 800d068:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d06c:	4864      	ldr	r0, [pc, #400]	; (800d200 <_printf_i+0x220>)
 800d06e:	e055      	b.n	800d11c <_printf_i+0x13c>
 800d070:	6813      	ldr	r3, [r2, #0]
 800d072:	1d19      	adds	r1, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6011      	str	r1, [r2, #0]
 800d078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d080:	2301      	movs	r3, #1
 800d082:	e08c      	b.n	800d19e <_printf_i+0x1be>
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6011      	str	r1, [r2, #0]
 800d088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d08c:	bf18      	it	ne
 800d08e:	b21b      	sxthne	r3, r3
 800d090:	e7cf      	b.n	800d032 <_printf_i+0x52>
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	6825      	ldr	r5, [r4, #0]
 800d096:	1d18      	adds	r0, r3, #4
 800d098:	6010      	str	r0, [r2, #0]
 800d09a:	0628      	lsls	r0, r5, #24
 800d09c:	d501      	bpl.n	800d0a2 <_printf_i+0xc2>
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	e002      	b.n	800d0a8 <_printf_i+0xc8>
 800d0a2:	0668      	lsls	r0, r5, #25
 800d0a4:	d5fb      	bpl.n	800d09e <_printf_i+0xbe>
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	4854      	ldr	r0, [pc, #336]	; (800d1fc <_printf_i+0x21c>)
 800d0aa:	296f      	cmp	r1, #111	; 0x6f
 800d0ac:	bf14      	ite	ne
 800d0ae:	220a      	movne	r2, #10
 800d0b0:	2208      	moveq	r2, #8
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0b8:	6865      	ldr	r5, [r4, #4]
 800d0ba:	60a5      	str	r5, [r4, #8]
 800d0bc:	2d00      	cmp	r5, #0
 800d0be:	f2c0 8095 	blt.w	800d1ec <_printf_i+0x20c>
 800d0c2:	6821      	ldr	r1, [r4, #0]
 800d0c4:	f021 0104 	bic.w	r1, r1, #4
 800d0c8:	6021      	str	r1, [r4, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d13d      	bne.n	800d14a <_printf_i+0x16a>
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	f040 808e 	bne.w	800d1f0 <_printf_i+0x210>
 800d0d4:	4665      	mov	r5, ip
 800d0d6:	2a08      	cmp	r2, #8
 800d0d8:	d10b      	bne.n	800d0f2 <_printf_i+0x112>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	07db      	lsls	r3, r3, #31
 800d0de:	d508      	bpl.n	800d0f2 <_printf_i+0x112>
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	6862      	ldr	r2, [r4, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	bfde      	ittt	le
 800d0e8:	2330      	movle	r3, #48	; 0x30
 800d0ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0f2:	ebac 0305 	sub.w	r3, ip, r5
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	f8cd 8000 	str.w	r8, [sp]
 800d0fc:	463b      	mov	r3, r7
 800d0fe:	aa03      	add	r2, sp, #12
 800d100:	4621      	mov	r1, r4
 800d102:	4630      	mov	r0, r6
 800d104:	f7ff fef6 	bl	800cef4 <_printf_common>
 800d108:	3001      	adds	r0, #1
 800d10a:	d14d      	bne.n	800d1a8 <_printf_i+0x1c8>
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295
 800d110:	b005      	add	sp, #20
 800d112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d116:	4839      	ldr	r0, [pc, #228]	; (800d1fc <_printf_i+0x21c>)
 800d118:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d11c:	6813      	ldr	r3, [r2, #0]
 800d11e:	6821      	ldr	r1, [r4, #0]
 800d120:	1d1d      	adds	r5, r3, #4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6015      	str	r5, [r2, #0]
 800d126:	060a      	lsls	r2, r1, #24
 800d128:	d50b      	bpl.n	800d142 <_printf_i+0x162>
 800d12a:	07ca      	lsls	r2, r1, #31
 800d12c:	bf44      	itt	mi
 800d12e:	f041 0120 	orrmi.w	r1, r1, #32
 800d132:	6021      	strmi	r1, [r4, #0]
 800d134:	b91b      	cbnz	r3, 800d13e <_printf_i+0x15e>
 800d136:	6822      	ldr	r2, [r4, #0]
 800d138:	f022 0220 	bic.w	r2, r2, #32
 800d13c:	6022      	str	r2, [r4, #0]
 800d13e:	2210      	movs	r2, #16
 800d140:	e7b7      	b.n	800d0b2 <_printf_i+0xd2>
 800d142:	064d      	lsls	r5, r1, #25
 800d144:	bf48      	it	mi
 800d146:	b29b      	uxthmi	r3, r3
 800d148:	e7ef      	b.n	800d12a <_printf_i+0x14a>
 800d14a:	4665      	mov	r5, ip
 800d14c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d150:	fb02 3311 	mls	r3, r2, r1, r3
 800d154:	5cc3      	ldrb	r3, [r0, r3]
 800d156:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d15a:	460b      	mov	r3, r1
 800d15c:	2900      	cmp	r1, #0
 800d15e:	d1f5      	bne.n	800d14c <_printf_i+0x16c>
 800d160:	e7b9      	b.n	800d0d6 <_printf_i+0xf6>
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	6825      	ldr	r5, [r4, #0]
 800d166:	6961      	ldr	r1, [r4, #20]
 800d168:	1d18      	adds	r0, r3, #4
 800d16a:	6010      	str	r0, [r2, #0]
 800d16c:	0628      	lsls	r0, r5, #24
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	d501      	bpl.n	800d176 <_printf_i+0x196>
 800d172:	6019      	str	r1, [r3, #0]
 800d174:	e002      	b.n	800d17c <_printf_i+0x19c>
 800d176:	066a      	lsls	r2, r5, #25
 800d178:	d5fb      	bpl.n	800d172 <_printf_i+0x192>
 800d17a:	8019      	strh	r1, [r3, #0]
 800d17c:	2300      	movs	r3, #0
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	4665      	mov	r5, ip
 800d182:	e7b9      	b.n	800d0f8 <_printf_i+0x118>
 800d184:	6813      	ldr	r3, [r2, #0]
 800d186:	1d19      	adds	r1, r3, #4
 800d188:	6011      	str	r1, [r2, #0]
 800d18a:	681d      	ldr	r5, [r3, #0]
 800d18c:	6862      	ldr	r2, [r4, #4]
 800d18e:	2100      	movs	r1, #0
 800d190:	4628      	mov	r0, r5
 800d192:	f7f3 f825 	bl	80001e0 <memchr>
 800d196:	b108      	cbz	r0, 800d19c <_printf_i+0x1bc>
 800d198:	1b40      	subs	r0, r0, r5
 800d19a:	6060      	str	r0, [r4, #4]
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	6123      	str	r3, [r4, #16]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1a6:	e7a7      	b.n	800d0f8 <_printf_i+0x118>
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	47c0      	blx	r8
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d0aa      	beq.n	800d10c <_printf_i+0x12c>
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	079b      	lsls	r3, r3, #30
 800d1ba:	d413      	bmi.n	800d1e4 <_printf_i+0x204>
 800d1bc:	68e0      	ldr	r0, [r4, #12]
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	4298      	cmp	r0, r3
 800d1c2:	bfb8      	it	lt
 800d1c4:	4618      	movlt	r0, r3
 800d1c6:	e7a3      	b.n	800d110 <_printf_i+0x130>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	464a      	mov	r2, r9
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	47c0      	blx	r8
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	d09a      	beq.n	800d10c <_printf_i+0x12c>
 800d1d6:	3501      	adds	r5, #1
 800d1d8:	68e3      	ldr	r3, [r4, #12]
 800d1da:	9a03      	ldr	r2, [sp, #12]
 800d1dc:	1a9b      	subs	r3, r3, r2
 800d1de:	42ab      	cmp	r3, r5
 800d1e0:	dcf2      	bgt.n	800d1c8 <_printf_i+0x1e8>
 800d1e2:	e7eb      	b.n	800d1bc <_printf_i+0x1dc>
 800d1e4:	2500      	movs	r5, #0
 800d1e6:	f104 0919 	add.w	r9, r4, #25
 800d1ea:	e7f5      	b.n	800d1d8 <_printf_i+0x1f8>
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1ac      	bne.n	800d14a <_printf_i+0x16a>
 800d1f0:	7803      	ldrb	r3, [r0, #0]
 800d1f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1fa:	e76c      	b.n	800d0d6 <_printf_i+0xf6>
 800d1fc:	0800e20b 	.word	0x0800e20b
 800d200:	0800e21c 	.word	0x0800e21c

0800d204 <_sbrk_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4c06      	ldr	r4, [pc, #24]	; (800d220 <_sbrk_r+0x1c>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4605      	mov	r5, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	f7f6 ffb8 	bl	8004184 <_sbrk>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_sbrk_r+0x1a>
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_sbrk_r+0x1a>
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	200054c0 	.word	0x200054c0

0800d224 <__sread>:
 800d224:	b510      	push	{r4, lr}
 800d226:	460c      	mov	r4, r1
 800d228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d22c:	f000 f8e2 	bl	800d3f4 <_read_r>
 800d230:	2800      	cmp	r0, #0
 800d232:	bfab      	itete	ge
 800d234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d236:	89a3      	ldrhlt	r3, [r4, #12]
 800d238:	181b      	addge	r3, r3, r0
 800d23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d23e:	bfac      	ite	ge
 800d240:	6563      	strge	r3, [r4, #84]	; 0x54
 800d242:	81a3      	strhlt	r3, [r4, #12]
 800d244:	bd10      	pop	{r4, pc}

0800d246 <__swrite>:
 800d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24a:	461f      	mov	r7, r3
 800d24c:	898b      	ldrh	r3, [r1, #12]
 800d24e:	05db      	lsls	r3, r3, #23
 800d250:	4605      	mov	r5, r0
 800d252:	460c      	mov	r4, r1
 800d254:	4616      	mov	r6, r2
 800d256:	d505      	bpl.n	800d264 <__swrite+0x1e>
 800d258:	2302      	movs	r3, #2
 800d25a:	2200      	movs	r2, #0
 800d25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d260:	f000 f874 	bl	800d34c <_lseek_r>
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d26e:	81a3      	strh	r3, [r4, #12]
 800d270:	4632      	mov	r2, r6
 800d272:	463b      	mov	r3, r7
 800d274:	4628      	mov	r0, r5
 800d276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27a:	f000 b823 	b.w	800d2c4 <_write_r>

0800d27e <__sseek>:
 800d27e:	b510      	push	{r4, lr}
 800d280:	460c      	mov	r4, r1
 800d282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d286:	f000 f861 	bl	800d34c <_lseek_r>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	bf15      	itete	ne
 800d290:	6560      	strne	r0, [r4, #84]	; 0x54
 800d292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29a:	81a3      	strheq	r3, [r4, #12]
 800d29c:	bf18      	it	ne
 800d29e:	81a3      	strhne	r3, [r4, #12]
 800d2a0:	bd10      	pop	{r4, pc}

0800d2a2 <__sclose>:
 800d2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a6:	f000 b81f 	b.w	800d2e8 <_close_r>

0800d2aa <__ascii_wctomb>:
 800d2aa:	b149      	cbz	r1, 800d2c0 <__ascii_wctomb+0x16>
 800d2ac:	2aff      	cmp	r2, #255	; 0xff
 800d2ae:	bf85      	ittet	hi
 800d2b0:	238a      	movhi	r3, #138	; 0x8a
 800d2b2:	6003      	strhi	r3, [r0, #0]
 800d2b4:	700a      	strbls	r2, [r1, #0]
 800d2b6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2ba:	bf98      	it	ls
 800d2bc:	2001      	movls	r0, #1
 800d2be:	4770      	bx	lr
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4770      	bx	lr

0800d2c4 <_write_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4c07      	ldr	r4, [pc, #28]	; (800d2e4 <_write_r+0x20>)
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f7f6 ff05 	bl	80040e2 <_write>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_write_r+0x1e>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_write_r+0x1e>
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	200054c0 	.word	0x200054c0

0800d2e8 <_close_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4c06      	ldr	r4, [pc, #24]	; (800d304 <_close_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	f7f6 ff11 	bl	800411a <_close>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_close_r+0x1a>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_close_r+0x1a>
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	200054c0 	.word	0x200054c0

0800d308 <_fstat_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4c07      	ldr	r4, [pc, #28]	; (800d328 <_fstat_r+0x20>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4605      	mov	r5, r0
 800d310:	4608      	mov	r0, r1
 800d312:	4611      	mov	r1, r2
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	f7f6 ff0c 	bl	8004132 <_fstat>
 800d31a:	1c43      	adds	r3, r0, #1
 800d31c:	d102      	bne.n	800d324 <_fstat_r+0x1c>
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	b103      	cbz	r3, 800d324 <_fstat_r+0x1c>
 800d322:	602b      	str	r3, [r5, #0]
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	bf00      	nop
 800d328:	200054c0 	.word	0x200054c0

0800d32c <_isatty_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4c06      	ldr	r4, [pc, #24]	; (800d348 <_isatty_r+0x1c>)
 800d330:	2300      	movs	r3, #0
 800d332:	4605      	mov	r5, r0
 800d334:	4608      	mov	r0, r1
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	f7f6 ff0b 	bl	8004152 <_isatty>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_isatty_r+0x1a>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	b103      	cbz	r3, 800d346 <_isatty_r+0x1a>
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	200054c0 	.word	0x200054c0

0800d34c <_lseek_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4c07      	ldr	r4, [pc, #28]	; (800d36c <_lseek_r+0x20>)
 800d350:	4605      	mov	r5, r0
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	2200      	movs	r2, #0
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f7f6 ff04 	bl	8004168 <_lseek>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_lseek_r+0x1e>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	b103      	cbz	r3, 800d36a <_lseek_r+0x1e>
 800d368:	602b      	str	r3, [r5, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	200054c0 	.word	0x200054c0

0800d370 <memmove>:
 800d370:	4288      	cmp	r0, r1
 800d372:	b510      	push	{r4, lr}
 800d374:	eb01 0302 	add.w	r3, r1, r2
 800d378:	d807      	bhi.n	800d38a <memmove+0x1a>
 800d37a:	1e42      	subs	r2, r0, #1
 800d37c:	4299      	cmp	r1, r3
 800d37e:	d00a      	beq.n	800d396 <memmove+0x26>
 800d380:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d384:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d388:	e7f8      	b.n	800d37c <memmove+0xc>
 800d38a:	4283      	cmp	r3, r0
 800d38c:	d9f5      	bls.n	800d37a <memmove+0xa>
 800d38e:	1881      	adds	r1, r0, r2
 800d390:	1ad2      	subs	r2, r2, r3
 800d392:	42d3      	cmn	r3, r2
 800d394:	d100      	bne.n	800d398 <memmove+0x28>
 800d396:	bd10      	pop	{r4, pc}
 800d398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d39c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d3a0:	e7f7      	b.n	800d392 <memmove+0x22>

0800d3a2 <__malloc_lock>:
 800d3a2:	4770      	bx	lr

0800d3a4 <__malloc_unlock>:
 800d3a4:	4770      	bx	lr

0800d3a6 <_realloc_r>:
 800d3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	b921      	cbnz	r1, 800d3ba <_realloc_r+0x14>
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d3b6:	f7ff bab1 	b.w	800c91c <_malloc_r>
 800d3ba:	b922      	cbnz	r2, 800d3c6 <_realloc_r+0x20>
 800d3bc:	f7ff fa60 	bl	800c880 <_free_r>
 800d3c0:	4625      	mov	r5, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c6:	f000 f827 	bl	800d418 <_malloc_usable_size_r>
 800d3ca:	42a0      	cmp	r0, r4
 800d3cc:	d20f      	bcs.n	800d3ee <_realloc_r+0x48>
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f7ff faa3 	bl	800c91c <_malloc_r>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0f2      	beq.n	800d3c2 <_realloc_r+0x1c>
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4622      	mov	r2, r4
 800d3e0:	f7fe fdad 	bl	800bf3e <memcpy>
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	f7ff fa4a 	bl	800c880 <_free_r>
 800d3ec:	e7e9      	b.n	800d3c2 <_realloc_r+0x1c>
 800d3ee:	4635      	mov	r5, r6
 800d3f0:	e7e7      	b.n	800d3c2 <_realloc_r+0x1c>
	...

0800d3f4 <_read_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4c07      	ldr	r4, [pc, #28]	; (800d414 <_read_r+0x20>)
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	2200      	movs	r2, #0
 800d400:	6022      	str	r2, [r4, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	f7f6 fe50 	bl	80040a8 <_read>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d102      	bne.n	800d412 <_read_r+0x1e>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	b103      	cbz	r3, 800d412 <_read_r+0x1e>
 800d410:	602b      	str	r3, [r5, #0]
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	200054c0 	.word	0x200054c0

0800d418 <_malloc_usable_size_r>:
 800d418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d41c:	1f18      	subs	r0, r3, #4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	bfbc      	itt	lt
 800d422:	580b      	ldrlt	r3, [r1, r0]
 800d424:	18c0      	addlt	r0, r0, r3
 800d426:	4770      	bx	lr

0800d428 <_init>:
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42a:	bf00      	nop
 800d42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42e:	bc08      	pop	{r3}
 800d430:	469e      	mov	lr, r3
 800d432:	4770      	bx	lr

0800d434 <_fini>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	bf00      	nop
 800d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43a:	bc08      	pop	{r3}
 800d43c:	469e      	mov	lr, r3
 800d43e:	4770      	bx	lr
